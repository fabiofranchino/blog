{"posts":[{"attributes":{"title":"A hello world post","date":"2017-01-29 09:00:00 +0100","subtitle":"29th January, 2017","HN":13513098,"style":"red","categories":"Opinions","tags":["opinion","general","thoughts"]},"body":"First off, a confession.I've been always an internet lurker with some timid public contributions.   \nMost of what I've learned over my career is thanks to the web, a place where, among other things, people use their personal time to organize and share pieces of knowledge, often for free.\nI've always felt a bit guilty. That particular feeling in the gut when you owe something to someone.\nTo mitigate that feeling I did some attempts in the past, in the spirit of giving back, but nothing worth to mention.\nI've always told myself a lot of shit in order to keep the things as is.\nThe most common? That it's too late to begin, that it's something I should have done years ago.\nBullshit. You know what?\n\nIt's never too late to start something.\n\nLast year I thought, more than usual, about this issue and I've decided to take action.\nI've committed myself to write more.\nWriting is a wonderful tool to both organize thoughts and foster new perspectives.But writing alone is not enough. Publish is also an important aspect.\nSo, here's my Hello World (a blog is not a blog without a hello world post)\n\nYes, I'm starting a blog (and you should too).  \n\nI'm not sure which kind of blog is going to be.I suspect I'll write mostly about my professional life and things I'm interested in like design, computation, data and user experience alongside all the possible intersections in between.  \nIf this happens to be useful for someone, that's great.\nThe easiest part done! Now, let's keep the commitment up.\n","frontmatter":"title:  A hello world post\ndate:   2017-01-29 09:00:00 +0100\nsubtitle: 29th January, 2017\nHN: 13513098\nstyle: red\ncategories: Opinions\ntags: [opinion, general, thoughts]"},{"attributes":{"title":"Node.js, Canvas, d3.js: first date","date":"2017-02-12 09:00:00 +0100","subtitle":"12th February, 2017","HN":13627495,"style":"purple","categories":"Projects","tags":["project","nodejs","canvas","d3js"]},"body":"Last week I've released a silly product.A tiny digital toy to peep my mouse in real time.As I said, a silly thing.\nIt's based on a little daemon that watches my computer cursor advertising online its current properties.The step to collect and archive all these information was very close, though.\nThe original daemon has been built using Node.js.It was a matter of a couple of hours forking it in order to save every single data-point on a CSV file.\nJust to be clear, I'm not a Node.js ninja.I use it sometimes for quick data transformation or as a communication middleware.Maybe this is why a little voice at some point told me something weird. It sounded like:\n\nHey, dude! What about creating a bot or a daemon that fetch data somewhere producing automatically outcomes (i.e. visualizations)? Wouldn't it be amazing?\n\nThat intrigues me a ton.\nDaemon number two\nSince the 6th of February, a little daemon sits on my computer collecting all the mouse information available on daily basis. Coordinates, pixel color underneath it and timestamp. A data point for each recorded mouse position on a specific time.In total, we are talking about from 10k to 30k data points per day, give or take.\nI've waited one week before actively considering to visualise this data.\nUsually, d3.js in the browser would be the first choice for that kind of task. \nThis time that little voice continued to push me. \n\nI've realized I should have done differently, learning something new just to make something old.\n\nHello d3.js, I'm Node\nNode.js doesn't know anything about the browser DOM. The canvas or svg element are simply undefined objects in Node context.\nLuckily enough there's a canvas implementation for Node.js made by Automattic. It's pretty solid and powerful. There is also a DOM implementation but that is for another post.\nSo, after a bunch of hours I've set up a dirty .js script including d3.js, the Automattic canvas and some built-in node' libraries to handle file system operations.\nNow I have a (cleaner) script that can generate zillion of plot visualisations gathering datasets from a specific folder. Neat!\nNow, show time:\n\n\n\n\n\n\n\nIt's not easy to extract meaningful insights out of them. You might notice the unusual dots concentration on the left side. \nI do use Mac OS X and my dock is left-centered positioned.\nThe next iteration includes histograms related to quantitative occurrences on specific coordinate positions. The red one is the quantity of data points in the x-axis, the blue one in the y-axis:\n\n\n\n\n\n\n\nSo, what's the point?\nSticking always to something you know very well is not a good thing.Sometimes it's necessary to try out different stuff getting outside the comfort zone.\nIt's javascript after all, nevertheless I had to figure out a couple of things I wasn't aware.I could have built those visualisations in a more comfortable way.I'm happy I didn't do it.The time spent on learning new details, even though the actual basic results, has been rewarding.\nDo something new today, you'll feel better.\n","frontmatter":"title: \"Node.js, Canvas, d3.js: first date\"\ndate: 2017-02-12 09:00:00 +0100\nsubtitle: 12th February, 2017\nHN: 13627495\nstyle: purple\ncategories: Projects\ntags: [project, nodejs, canvas, d3js]"},{"attributes":{"title":"Scrub The Mouse","date":"2017-02-26 14:00:00 +0100","subtitle":"26th February, 2017","HN":13731477,"style":"purple","cover":"cover.gif","categories":"Projects","tags":["project","silly","selfinitiated","d3js","ui","webtoy"]},"body":"TL;DR: Go straight to the toy to explore my mouse activity.\n\nPreviously on...\nI've started this thing about first advertising and then collecting my mouse activity just for fun.To be fair, everything started only to be able to say:\n\nHey! I've demonized my computer!\n\nThis is going to continue for some weird reason, indeed this is another exploration step in the category of silly projects.\nWhat is about?\nIt's a simple interactive exploration tool for the sample data I'm referring above.Remember, we're in the silly land, therefore a silly tool is in order.\nThis web-ui-toy let you explore, visually and interactively, my mouse activity over time.It begins picking up a random day' dataset starting to show its whole journey.You can scrub the playhead to move back and forth like a vintage tape recorder, this is why the ui has this little touch of retro style.\nThere's an issue\nI need to explain the way how the samples are shown during the animation.The playhead is driven by the index position of the dataset array instead of the value of the current sample time.  \nThis is a stretch.  \nThe design decision is totally related to the time constraint I've set up for this project (few hours).  \nThis is definitely not an accurate representation because the time difference between samples is not honored from the visual point of view. If the mouse has not been used for a while, you won't see a stationary cursor for the same duration.\nd3.js to the rescue\nWhile it doesn't look like a typical d3.js outcome, it's almost fully based on it.  \nThis was intentional.  \nIt was the opportunity to test d3.js on a (tiny) digital project that is far from the usual representation models of the library. Achievement unlocked!\n\nd3.js is great for UI digital product as well.\n\nExperience the toy if you haven't already done.\nAnd tell me what you think (on @fabiofranchino) about. Very curious.\nHave a nice day!\n","frontmatter":"title: \"Scrub The Mouse\"\ndate: 2017-02-26 14:00:00 +0100\nsubtitle: 26th February, 2017\nHN: 13731477\nstyle: purple\ncover: cover.gif\ncategories: Projects\ntags: [project, silly, selfinitiated, d3js, ui, webtoy]"},{"attributes":{"title":"Browser-sync with Electron like a charm","date":"2017-03-02 14:00:00 +0100","subtitle":"2nd March, 2017","style":"blue","HN":13781142,"cover":"cover.png","categories":"Tutorials","tags":["tutorial","tips","electron","browsersync"]},"body":"I'm going to introduce a new post type in this blog.It's about little tips discovered after a bit of research and test with the aim to find them again, more easily, the next time.It might also be useful for others, though.\nTL;RL: To use Browser-sync with Electron use the recent localOnly option. It works like a charm.\n\nBrowser-sync\nIf you work in web design and development fields you already know how the process works:\n\nedit a chunk of HTML/CSS/JS\nsave the file\nreload the browser to see the effect\nrepeat\n\nYou should also know that those edits gonna be thousands in a project.  \nIf you already know that issue, there is a big chance you already know Browser-sync.\nBrowser-sync is a super-mega time saver tool that simply refreshes the browser for you any time you edit a file during a development session.Even only considering half of a second for each edit to reload manually the browser, we are talking about days of time wasted in a long time project.\n\nLet's shine the computer on repetitive tasks like that one\n\nIf you don't know Browser-sync yet, I can't stress enough, check it right now.\nElectron\nIf you're able to design and develop a web app for the browser you're able to release it as native app too.Electron makes that easy by removing all the hassles that don't belong to the web development field.\nBrowser-sync works beautifully with the browsers but not when using Electron.\nThe solution\nThere was an interesting discussion about the issue that brought to a new option specifically to work with Electron or similar environment.The localOnly flag allows supporting environments where dynamic hostnames are not required (ie: Electron)It was added in the 2.14.0 version of Browser-sync and can be used in the CLI like this:\nbrowser-sync start --localOnly --files './app'\n\nDon't forget to put the snippet of code provided by the shell into the .html files you're editing. The snippet is something like:\n<script async id=\"__bs_script__\" \nsrc=\"http://localhost:3000/\nbrowser-sync/\nbrowser-sync-client.js?v=2.18.8 \">\n</script>\n\nWith this setup, I can edit and see instant refresh of the Electron app on each little change. I can dev lightning fast on Electron projects too.\nCheers and carry a faster development on.\n","frontmatter":"title: Browser-sync with Electron like a charm\ndate: 2017-03-02 14:00:00 +0100\nsubtitle: 2nd March, 2017\nstyle: blue\nHN: 13781142\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, tips, electron, browsersync]"},{"attributes":{"title":"D3.js toward v4 - first round","date":"2017-03-03 14:00:00 +0100","subtitle":"3rd March, 2017","style":"blue","HN":null,"cover":"cover.png","categories":"Tutorials","tags":["tutorial","d3js","bigdive","tips"]},"body":"Bigdive, the training program to boost the technical skills to dive into the Big Data universe, turned to 6th edition and is coming very soon.Therefore, some updates are required in order to provide the most up-to-date and relevant learning experience to the next brave students.Indeed, the Bigdive visualization track will adopt the latest version of D3.js, saying goodbye to the v3.\n\nD3.js, the popular javascript library that allows to represent data in graphical forms, got a major update, with the version 4, early the last summer.\nA major update usually means breaking changes in the API therefore a bit of learning is required in order to embrace it in your projects.\nThanks to a pretty solid API model, most of the version 3 syntax is perfectly compatible with version 4 of the library.\nMost which means that some won't work anymore due to library API changes.Some are subtle since they rely only on simple object renames.Addressing these changes are often a no-brainer but at the same time it takes time to internalize and learn them properly.\nBefore to start, it might be a good idea reading official resources that may introduce to the transition.There are two primer sources to get, to say the least, a glimpse of the extent of these changes.The official Changes in D3 4.0 documentation and a 103 skimmable slides from Irene Ros, just as a start.\nThis post is a first collection of tips from  real world examples to survive the transition easily, based on personal experience and after acknowledged the mentioned references.\nTransitions\nBasic transition set up is pretty similar in v4.This is a tipical transition in a d3.js selection that works both on v3 and v4 as well:\nsvg.select('circle')        \n    .attr('r', 40)\n    .transition()\n    .duration(2000)\n    .attr('r', 20)\n\nEasing\nEasing in transitions got a change since it doesn't accept literal string definition anymore. It needs an object reference of the desired curve that belong to the d3-ease package.The old way to define a easing curve was something like:\n.ease('buonce')\n\nnow the same can be accomplished with:\n.ease(d3.easeBounceInOut)\n\nEnd of transition callback\nIf you want to call a specific function on transition end, this was the line you could add in your chain:\n.each('end', endTransition)\n\nNow the same effect can be done with this slightly syntax change:\n.on('end', endTransition)\n\nDelay per transition in multiple transitions chain\nThis is a new feature, long awaited. Adding a delay on the latter transition would break the code in version 3.\nsvg.select('rect')\n        .attr('width', 100)\n        .attr('height', 0)\n\n    .transition()\n        .duration(1000)\n        .delay(500)\n        .style('fill', 'orange')\n        .attr('height', 100)\n\n    .transition()\n        .delay(500)\n        .attr('width', 200)\n        .style('fill', 'red')\n        .style('opacity', .5)\n\nNow, in version 4, delay per transition will be take into account properly.\nRemember that you can use the end transition callback for each transition in a single chain like:\nsvg.select('rect')\n        .attr('width', 100)\n        .attr('height', 0)\n\n    .transition()\n        .duration(1000)\n         .delay(500)\n        .style('fill', 'orange')\n    .on('end', endTransition1)\n\n    .transition()\n          .delay(500)\n         .style('fill', 'red')\n    .on('end', endTransition2)\n\nScales\nScale is one the most common object you may find in D3.js code.It's very common because it's very useful and ease to use.Due to the modularity nature of version 4, scale objects need to be used with a different name:\nLinear scale\nSetting up a scale object require usually this kind of code:\nvar scale = d3.scale.linear()\n  .domain([0, data.length-1])\n  .range([0, 100])\n\nNow you need to refer to the new object name:\nvar scale = d3.scaleLinear()\n  .domain([0, data.length-1])\n  .range([0, 100])\n\nColor scale\nWe used to use the built-in color scale for easy exploration when defining different categories in visual elements.This is the typical code:\nvar colors = d3.scale.category20()\n\nThis need to be changed a bit in version 4 as:\nvar colors = d3.scaleOrdinal( d3.schemeCategory20 )\n\nAxis\nThe axis object got small syntax changes as well. Assuming that scale and format variables are properly set:\nvar axis = d3.svg.axis()\n    .scale(scale)\n    .orient('right')\n    .ticks(5)\n    .tickSize(1)\n    .tickFormat(format)\n\nLike other objects, you need to refer to the new object name and no need anymore of the .orient() call since it's implicit in the object name:\nvar axis = d3.axisRight( scale )\n    .ticks(5)\n    .tickSize(1)\n    .tickFormat(format)\n\nPath generators\nGenerally, the svg generators have lost the svg package name path so instead of this syntax:\nvar arc = d3.svg.arc()\n    ...\n\nvar line = d3.svg.line()\n    ...\n\nvar area = d3.svg.area()\n    ...\n\nwe need to refer to each generator directly:\nvar arc = d3.arc()\n    ...\n\nvar line = d3.line()\n    ...\n\nvar area = d3.area()\n    ...\n\nthe additional setting method are usually the same of version 3.\nThat's all for now. \nThis is the first round of tips to take into account when writing d3.js code for version 4.\nPlease feel free to contact me if you have any questions, suggestions or follow me to get notified about next updates.\nHave a nice day.\n","frontmatter":"title: D3.js toward v4 - first round\ndate: 2017-03-03 14:00:00 +0100\nsubtitle: 3rd March, 2017\nstyle: blue\nHN:\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, d3js, bigdive, tips]"},{"attributes":{"title":"Leading a happy team","date":"2017-03-04 14:00:00 +0100","subtitle":"4th March, 2017","style":"red","categories":"Opinions","tags":["opinion","general","thoughts","team"]},"body":"A personal reminder\nThis is something to keep always in mind on daily basis, with no particular order, to lead a happy group of people that is supposed to do great things:\n\nTalk\nListen (carefully)\nInteract with them as a team\nGive feedback individually\nBe honest\nEngage them\nGive them independence and initiative\n\n","frontmatter":"title: Leading a happy team\ndate: 2017-03-04 14:00:00 +0100\nsubtitle: 4th March, 2017\nstyle: red\ncategories: Opinions\ntags: [opinion, general, thoughts, team]"},{"attributes":{"title":"Boost your d3.js learning kickoff","date":"2017-03-07 14:00:00 +0100","subtitle":"7th March, 2017","style":"red","cover":"cover.png","categories":"Tutorials","tags":["tutorial","d3js","bigdive","svg","tip"]},"body":"\nI've been involved in teaching d3.js and data visualisation in several classes since more than five years.Every time it's like the first time.It's always a challenge because every class is diverse and every student is unique. It's an ever learning process that is rewarding for this reason.\nSince the coming of the 6th edition of Bigdive, I've started to think about how to improve the learning experience of the dataviz track I'm going to provide in class. It's something I try to do every year.I've already penned some words related to some updates that are in the pipeline.\nThis time I'm going to focus on something more fundamental.\nIn any disciplines the hardest part is the beginning, the kick-off, the phase related to understand the basics.Out of my teaching experience, I've started to see patterns related to the difficulties the students usually face with.\nIt's like there was a missing step between the zero knowledge and the first line of code.Indeed, it's the lack of the DOM understanding.\nD3.js is a layer on top of the DOM technology. You cannot really understand the library without a good understanding of its foundations.\nThe DOM looks like a toy for experienced programmers and maybe this is the reason why it's common to find d3.js tutorials that take the DOM for granted. It shouldn't be like that. \nWhat I've seen in my experience is that the more the students have an understanding of HTML/SVG and CSS selection the faster is the route to be proficient with d3.js.This is why I do usually teach the basics of DOM during the first lesson.\nHaving said that, the best advice I can give to people wishing to learn d3.js is pretty straight:\n\nLearn the DOM first.\n\nThat means, start learning the foundation of the web platform and its technologies such as:\n\nHow the HTML works\nHow the SVG tag works, the primitive elements, the coordinate system, the scene graph\nHow CSS selection works\n\nEven with a brief understanding of the above topics, approaching the basic of D3.js become way easier by an order of magnitude.\nHappy learning!\n","frontmatter":"title: Boost your d3.js learning kickoff\ndate: 2017-03-07 14:00:00 +0100\nsubtitle: 7th March, 2017\nstyle: red\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, d3js, bigdive, svg, tip]"},{"attributes":{"title":"Scraping data in the kitchen","date":"2017-04-09 14:00:00 +0100","subtitle":"9th April, 2017","cover":"image_0.jpg","style":"purple","categories":"Projects","tags":["project","dataviz","d3js","scraping"]},"body":"TL;DR: A little journey on scraping nutrition data for visualization purpose.\n\nI like cooking.\nI can even humbly to say I’m pretty good at it. I like to be creative when in front of stove and pots, I usually try to experiment a lot using the combination of two of my senses as the main driver.\n\nUnfortunately, I’m not very educated in nutrition. I’m usually not spending my free time reading/browsing technical papers about it. I would like, though.\nI feel myself much more confident on working with data trying to understand it in order to transform into something visible, hopefully helping other people get something meaningful from.\nThis is why I was pretty excited the day I’ve stumbled upon on this Italian website, a collection of popular food items alongside details and percentages of main and secondary nutrient elements.\nI remember the first instinct I had that was to immediately take the data and start tinkering with it. I would have had the possibility to play with interesting data that it would have provided me some basic knowledge on the topic, a starting point for further elaborations.\nSadly, it’s a traditional website that exposes a database with a list of links, detail pages and relations with categories. It’s a website for human beings, machines were not taken into account. Indeed, there isn’t any public API available.\nI have to admit: later on, I would have discovered the original source (http://ndb.nal.usda.gov/) which is much more up-to-date, extensive and, most importantly, does provide an open and public API to interact with. Discovering that, it would have to avoid me to do what I did and this post wouldn’t have never existed.\nSince at that time I didn’t check the information page which would lead me to the original source, I went to the hard way:\n\nI want that data and I want it now so let’s scrape it.\n\nWeb scraping\nAccording to Wikipedia, web scraping is a computer software technique of extracting information from websites with a focus on the transformation of unstructured information, present on the web, into structured data that can be read by machines.\nWeb scraping is a subset of the more generic field data scraping, from its definition I would highlight this lovely sentence:\n\n“An ad hoc, inelegant technique, often used only as a last resort when no other mechanism for data interchange is available.”\n\nWriting code for the sole purpose of scraping usually means writing quick, ugly and inefficient code, code that is disposable by design.\nI’ve always been fascinated by this odd activity since it’s like it has given to us a special power to inspect any public source of information in order to rearrange them for further purposes.\nIn some way, it forces us to understand the underlying structure of the information that is in front of us.\nWeb scraping can be performed with a variety of tools and techniques. In my humble opinion, the best tool that suite this activity is the same that is used to gather and display the information: the browser.\nModern browsers allow to interact with web pages with powerful tools, the same tools that usually are used by developers.\nOf course, there are other, less technical, options out there that can be used to collect information into structured forms (import.io, webscraper.io to mention a few). I’m not here advocating any particular one, indeed, I’m suggesting to try the custom way, and the reasons why are:\n\nIt’s easier and faster (once you’re confident on writing simple javascript code)\nRely on a generic technical knowledge instead to a specific tool skill\nIt’s abstract (you are the designer of the system rules)\nIt’s scalable (you can use the browser for quick scrape or run a server for massive activities)\nYou’ll learn every time something new (that you could use in other situations)\nIt’s fun (or it could be)\n\nHands On!\nHere I’m just showing you the quickest way to set up a scraping session since everything you need is a browser (I bet you have one but I would suggest using Google Chrome), a bit of javascript understanding and the right amount of curiosity.\nFor a more in-depth, still basic, tutorial with a more structured system setup I would suggest reading this article from \"The Data Journalism Handbook\".\nSo, assuming you are using Google Chrome, this is what you need to do:\n\nopen in a new tab this URL which is our starting page\nopen the Chrome DevTool and the Console tab (Opt+⌘+I or Ctrl+Shift+I)\nopen in another tab this link in order to grab (copy into the clipboard) the full source of jQuery, then close it\nback to the first tab, paste the full code into the Console panel and hit ENTER\n\nNow that we have injected jQuery into the original page, we can exploit it for our purposes (yes, we could avoid jQuery at all by writing vanilla javascript but it’s easier and faster with it).\n\nFrom that page, we have the complete list of food items, each of them with its proper link to the details page.\nThe following tiny code snippet will be responsible for transforming that list into a structured javascript array with 1736 objects:\nLook the relation between the readable information and the data object\nNow with the complete list in memory, we can fetch the details page for each item in order to decorate each object with all the available properties.\nTo complete the tutorial check this repository out on Github, a better place to store stuff like that.\nThe same data object has been decorated with additional properties\nThis is a quick demonstration to show how to scrape any public website using few lines of javascript. I really hope I have given, at least, a bit of curiosity to try to scrape with your hands.\nIt was worth nothing whether I wouldn’t, at least, try to use that data for a potential visualization and see what might be come up.\nIt’s interesting to see that there is already something (may I call them insights?) that can potentially lead to some direction.\nExperience and enjoy the visualization\n\n","frontmatter":"title: Scraping data in the kitchen\ndate: 2017-04-09 14:00:00 +0100\nsubtitle: 9th April, 2017\ncover: image_0.jpg\nstyle: purple\ncategories: Projects\ntags: [project, dataviz, d3js, scraping]"},{"attributes":{"title":"Light a wood fire","date":"2017-04-11 14:00:00 +0100","subtitle":"11th April, 2017","style":"red","HN":null,"cover":"cover.jpg","categories":"Opinions","tags":["opinion","culture","thoughts"]},"body":"Imagine you in a forest.It's dark and getting colder.You're cold. You definitely need a fire.\n\nFirst thing, you have to find the right place where to set the fire, a safe place protected from the wind.\nThen, you need to walk and collect different size of pieces of wooden, sticks, twigs and dry leaves.\nYou have to accurately lay down, layer by layer, the leaves and a bit of paper, then the sticks and twigs, only at the end some bits of wooden.\nNow you can give the light at the very bottom in order to foster the flames.\nThis is the most important part of the process.You need to take care of it, continuouslyThe fire on that stage is very weak.It's helpless, like a child.\nThe fire is now stable and vivid.\nYou know that you need to feed from time to time otherwise it won't last.\nNow, and only now, the fire is warming you, it's rewarding you.\nMaking and maintaining a fire takes time, hard work and commitment.\nThe same happens with your project idea. It takes time and a lot of work, it takes passion and commitment. You'll get some rewards only after a while, after some investments, after some pains.\nAnd you know what?If you don't keep on your commitment continuously, the fire will definitely fade away at some point.\nOf course, there might be the possibility of some wet wood, nobody can tell 100% it will work, but most of the time you'll succeed if you don't give up.\nThe next time you got an idea for a project, think about lighting a fire in a wood. \nKeep it alive.\nImage courtesy: unsplash.com/@yabbath\n","frontmatter":"title: Light a wood fire\ndate: 2017-04-11 14:00:00 +0100\nsubtitle: 11th April, 2017\nstyle: red\nHN:\ncover: cover.jpg\ncategories: Opinions\ntags: [opinion, culture, thoughts]"},{"attributes":{"title":"Brute force layout","date":"2017-04-12 14:00:00 +0100","subtitle":"12th April, 2017","cover":"cover.jpg","style":"purple","categories":"Projects","tags":["project","grid","creative","coding","javascript"]},"body":"TL;DR: A visual exploration on grid system with creative coding\n\nI’ve been fascinated by complex structures since always and grid systems don’t make an exception.\nIn graphic design, a grid is a visual structure that usually serves as a framework on which a designer can organize graphic elements in a rational way.\n\nIt’s a tool, a functional tool with a technical purpose, invisible to the final user/reader, without any pretense to be aesthetic.\nThis might be the reason why one day I’ve started questioning myself on few different trajectories:\n\nWhat if we try to visualize it?\nCan it be aesthetically meaningful?\nHow can we conduct a visual exploration on complexity considering the rigidness nature of a grid system?\n\nA beautiful grid\nIt was a day in 2011; I was probably thinking about grid systems, beauty, complexity and the intersections in between. That day a tiny exploration has been born.\nThe seed was simple:\n\nlet’s try to generate a visual grid using a system of rules trying to explore complex visualizations within the graphic design field.\n\nOut of it, a simple set of tasks were outlined, defined as the follows:\n\nGiven a list of rectangles on canvas, pick one up randomly\nDivide it in 4 halved rectangles\nRepeat\nSometimes remove a rect picked up randomly\n\n\nThese simple rules can be manually executed producing simple results. The same simple rules are able to produce complex outcomes if iterated multiple times properly.\nThis ended up to be a good opportunity to exploit some computational strategies by means of software and code.\nProcessing to the rescue\nIn 2011 Processing was still my Swiss Army knife to solve creative and visual problems. The sketch is quite small and doesn’t rely on any other library.\nFull disclosure: the code has been written fast with the sole purpose of visual exploration. For that reason, it may appear rough and inelegant.\nYou can take a look at the whole sketch here.\n\nThe sketch was able to generate infinite permutations of the visual structure but I’ve saved only four variations eventually becoming the following manually fine-tuned graphic posters:\n\n\n\n\n\n\n\nI was pretty happy with the outcome and, at that time, the thing was done there.\nResuming in 2017\nNowadays my tool of choice for almost any kind of visual exploration relies on the web platform. For that reason, I’ve spent a bit of time porting the Processing sketch into plain javascript/jQuery code.\nAnd no, I didn’t use processing.js/p5.js on purpose, for several reasons that I’m not mentioning here.\nThe new sketch runs using an empty SVG as canvas and here you can see it in action:\n\n\nYou can tweak with this version on Codepen.\nIteration\nOne the best thing when you have a source code in front of you is the possibility to tweak it over and over getting different and unexpected results fast.\nIterating with code is a truly creative process that might be also very fun.\nActually, the algorithm runs by itself without any way to influence its process. Every iteration does initiate another iteration.\nChanging that part of the process might be interesting in terms of exploration possibilities; let’s do it using the mouse movement and position as driver:\n\n\nWe know that every single rect can be manipulated further. What about adding a further variation on a specific property? Here the next iteration adding one line of code to change the opacity, randomly:\n\n\nThe color is an important property to deal with. Again, assigning different fill color for each rectangle might be interesting in terms of creative outcome.\nInstead of putting a random color value which might end up to something not very pleasant, here a popular technique to get both a consistent color palette and proper assignment borrowing this information out of a picture:\n\n\nSo far, the rectangle has been the shape of choice but what about trying another one? Let's try with a circle alongside a bit of animation:\n\n\nAs you might start noticing, each variation is nothing more than an answer to a \"what if?\" asked to the previous sketch.\nI could continue forever but I’m stopping here.\nOr I could export these artworks onto Illustrator (or similar vector editors) in order to integrate them with other compositions.\n\nBonus tip: Export is just a matter of copying the generated source SVG code (copy element) and put it into an empty .svg file:\n\n\nDo you want to tweak and continue the exploration by your own? Check or download the source code from this repository and let me know if you reach something else.\nOpportunity\nI truly believe in the potential of software in aesthetic contexts. Writing quick code scripts to foster the creative process should be taught in every design schools.\nThere is a huge debate about whether designers should be able to code or not. My point is simple: learning how to code doesn’t hurt unless you’re pretending to become a developer in a short period of time.\nIt’s all about the purpose: start learning how to write a simple chunk of code today. Don’t judge it too soon. Worst case scenario? You’ve learned something new, something that is going to expand your way of thinking.\n\nThanks for reading and please share!\nFor quick feedbacks or see what’s next, follow me on Twitter. You can write me also via email.\nHave a nice day!\n\nThanks to Greta and Luca for reading drafts of this.\n","frontmatter":"title: Brute force layout\ndate: 2017-04-12 14:00:00 +0100\nsubtitle: 12th April, 2017\ncover: cover.jpg\nstyle: purple\ncategories: Projects\ntags: [project, grid, creative, coding, javascript]"},{"attributes":{"title":"Runkit is great","date":"2017-04-13 14:00:00 +0100","subtitle":"13th April, 2017","style":"blue","cover":"cover.jpg","categories":"Tutorials","tags":["tutorial","runkit","tips"]},"body":"\nSome friends and followers already know I'm a keen advocate of scraping online information especially when that information are not easily available in a machine readable format.   \nTo me, the default openness of the information, which is at the heart of the web, is the most important feature that allowed the internet to grow in an organic and unpredictable way.\nScraping information can be achieved with a lot of technologies across different difficult levels.I've already shown one of these ways in this article where the DevTool of the browser was the main tool.\nRunkit\nThis time I'm going to explore a tool I'd have liked to use time ago when it was named Tonicdev.\nI'm talking about Runkit, a node-based online notebook useful to test new ideas without setting up any server component.  \nThe novelty of Runkit comes from the Node.js ecosystem and this is one of the reasons why Node.js is awesome.\nOne of the possibilities of Runkit is that it allows exposing any javascript functions as public API endpoints writing something like:\nexports.endpoint = function(request, response) {\n    response.end(\"Hello world!\");\n}\n\nTherefore, this url will respond accordingly. Can you see the awesomeness?\nIn this experiment, I have to mention also a great library to manipulate the DOM. Cheerio.js, a fast, flexible, and lean implementation of core jQuery designed specifically for the server. A very good alternative to jsdom.\nMy Twitter feed\nHere my first experiment.\nI've exposed my Twitter feed scraped from the public website as a readable JSON response without dealing with the Twitter API (policy, limits, auth) at all. \nYou can see the live result by fetching this url.\nRunkit is great\nRunkit notebooks are public by default. You can fork other notebooks with ease.I suspect they'll build their business model at some point like NPM and similar services did in the past, giving paid private features, which is fine with me.\nRunkit is great not only for personal experiments but also in educational context as well.Indeed, it's an interesting tool for documentation and demonstration purposes.\nI'll continue to poke around it maybe developing some d3.js modules for it, which is quite accessible as you can see by this example.\n","frontmatter":"title: Runkit is great\ndate: 2017-04-13 14:00:00 +0100\nsubtitle: 13th April, 2017\nstyle: blue\ncover: cover.jpg\ncategories: Tutorials\ntags: [tutorial, runkit, tips]"},{"attributes":{"title":"So, still using jQuery?","date":"2017-04-14 14:00:00 +0100","subtitle":"14th April, 2017","style":"blue","cover":"cover.jpg","categories":"Opinions","tags":["opinion","jquery","thoughts"]},"body":"\nOne upon a time\nWhile some time ago I thought I'd never use jQuery anymore, right now I'm definitely suggesting to consider it for your projects. I do for mine.\nVanilla\nI know that the current browser DOM Api adoption can be considered pretty solid and widespread. \nI agree also with the public voices out there that teaches us about preferring vanilla javascript over bloating libraries.\nI know those libraries like jQuery, among the other things, try to keep legacy browsers into the game while it would be better for all to let them out.\nNo matter all those true facts are, there are some good reasons to continue to use jQuery for your final web stuff.\nIt depends\nLet's be clear. It depends on the project type.\nIf you are building a library then maybe you should try to avoid other libraries as much as possible. Avoiding them means to get rid of dependencies and future uncertainty about its functionality.\nIt also means you are not forcing your users to include thirty party code, not to mention the risk of conflicts between versions of the same library (the browser is still a huge global scope eventually).\nBut if you are building some user interface object like a website of something, well, I think you could afford about 29Kb of code to write less and cleaner code, introducing less potential bugs and issues, don't you?\njQuery is dead. Long live to jQuery\nTo be fair, the whole point about avoiding jQuery because its size is totally absurd, to say the least.\nHaving said that, my all present and next projects will include jQuery because of its benefits.\nI suggest doing the same. jQuery is still a live project with a vibrant community behind it. It's not going to fade away anytime soon.\nAnd you? Are you still using jQuery?\n","frontmatter":"title: So, still using jQuery?\ndate: 2017-04-14 14:00:00 +0100\nsubtitle: 14th April, 2017\nstyle: blue\ncover: cover.jpg\ncategories: Opinions\ntags: [opinion, jquery, thoughts]"},{"attributes":{"title":"Flex-ible Pattern Generator","date":"2017-04-22 14:00:00 +0100","subtitle":"22nd April, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","css","flex","layout","javascript"]},"body":"CSS looks easy at first glance but it's not.Mastering CSS requires a lot of practice.\nOne of the best ways to improve the tech skills is by pushing some pieces of them to some limits.Limits don't have to be hard nor complex.\nThis is an example of how to reach some interesting outcome trying to push a little piece of technology out of its usual context.\n\nCSS is the web technology used to style contents.Lately, CSS has become powerful enough to built complex layouts and animation effects.\n\nIndeed, the browser is pretty smart at computing complex layouts these days. \n\nSpeaking of which, we cannot avoid mentioning the CSS Flexbox module.\nPlaying with Flexbox and Javascript\nFlex specification contains multiple properties to allow defining precisely how each element has to behave within its parent and alongside its siblings.\nIn this case, it's all about exploiting the flex-grow property that is responsible for weight the size of each element based on the total weight of all siblings, a weight that will be converted in pixel dimension according to the available space of the parent container.\nWith the help of javascript, it's possible to play with it in order to generate a bunch of elements at run-time giving to each an arbitrary flex-grow value:\n\n\nYou can play with the source code in this pen.\nSource files on Github repo.\nHave a nice day.\n","frontmatter":"title: Flex-ible Pattern Generator\ndate: 2017-04-22 14:00:00 +0100\nsubtitle: 22nd April, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, css, flex, layout, javascript]"},{"attributes":{"title":"A-Frame + D3.js first steps","date":"2017-04-26 14:00:00 +0100","subtitle":"26th April, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","aframe","d3js","tips","vr"]},"body":"A-Frame, the javascript framework for building VR experiences using HTML custom tags, is intriguing, to say the least.It's actively supported by Mozilla and it promises to be easy to use and accessible even for non-experienced programmers.It's built on top of Three.js and other cool web technologies.\nVR is actually a big thing and it's something I wanted to put my hands on in quite some time. I'm also interested in exploring the potential integration with D3.js for data visualization purposes in VR experiences.  \nThus, here my first steps.\nThe 3D space\nEven though the minimal hello world example can be considered straightforward, we need to learn some fundamental concepts first in order to not getting lost quite early. Let's consider this chunk of HTML markup:\n<a-scene>\n    <a-box color=\"red\" width=\"2\" height=\"2\" position=\"0 2 -5\"></a-box>\n</a-scene>\n\nThe above code actually renders a box in the 3d scene.The key detail here is the position attribute which is responsible for positioning the box in three-dimensional space according to the XYZ axis.\nIf would happen to leave the default position (which is \"0 0 0\") you'll end up not seeing anything in the scene. That's because the position of the box coincides with the position of the user's eyes (as if you're within the box).\nNow, you might wonder: how to fill that attribute properly?\n\n\nThe position of each object follows the right-hand coordinate system.  \n\nMoving the box far from the user's eyes involves the Z axis using negative values, so \"0 0 -5\". We need also to move the box through the Y axis in order to take it off the ground.Here the visible (and draggable) box:\n\n\nRemember: when you get lost on positioning object in 3D space, use your right hand! It works.\nInteractivity\nA-Frame comes with an extra tag to support basic interaction events, the same events we currently use with mouse-driven applications.\nAdding the following tags within the main a-scene it will add an interactive pointer we can use for selection purposes:\n<a-camera>\n    <a-cursor></a-cursor>\n</a-camera>\n\nIt's our responsibility defining what should happen when the cursor 'touches' an object, using regular javascript event listeners:\nvar box = document.querySelector('a-box')\n\nbox.addEventListener('mouseenter', function () {\n    box.setAttribute('scale', {x: 2, y: 2, z: 2})\n})\n\nbox.addEventListener('mouseleave', function () {\n    box.setAttribute('scale', {x: 1, y: 1, z: 1})\n})\n\nDrag to move the camera view:\n\n\nAnimations\n3D objects can be animated using the Aframe animation engine that is controllable through the markup tag a-animation.\nEach a-animation tag is responsible for animating properties relative to its parent tag:\n<a-box width=\"2\" height=\"2\" rotation=\"0 0 0\" position=\"0 2 -5\">\n    <a-animation direction=\"alternate\" attribute=\"rotation\" to=\"0 360 360\" dur=\"4000\" repeat=\"5\" easing=\"linear\"></a-animation>\n</a-box>\n\nJavascript can be used to listen to some useful animation events:\nvar en = document.querySelector('#en')\n\nen.addEventListener('animationstart', function () {\n    console.log('animationstart')\n})\n\nen.addEventListener('animationend', function () {\n    console.log('animationend')\n})\n\n\n\n\n\nWelcome D3.js to the party\nD3.js loves the HTML markup, therefore the A-Frame markup can be manipulated by it.\nLet's try to write a typical D3.js script to bind an array of values to a list of HTML elements, this time using Aframe tags:\nd3.select('a-scene')\n    .selectAll('a-box')\n    .data(data)\n    .enter()\n    .append('a-box')\n    .attr('color', 'red')\n      .attr('width', 1)\n      .attr('height', function (d, i) {\n          return d\n    })\n      .attr('depth', 0.5)\n\nIn the following example, you can hover on each box to show (in a rudimentary way) its label. There is also a timid update mechanism with an interval timer:\n\n\nAdding animation at run-time\nI've tried, briefly, adding the a-animation tags at run-time without luck. At first instance, it looks they need to wait for some initialisation callback in order to append animation tags in the scene properly. I'll investigate on it, promise.\nIn the meantime, I found out an alternative contributed (A-Frame have a lot of contributed add-ons) library, aframe-animation-component, that overcome this limitation.\n\n\nWhat's next?\nI have to admit. Even only think about designing data visualizations in VR space is quite a silly exercise.  \n\nIt's a new interaction paradigm and a lot of experiments need to be conducted.\n\nDo you want to be part of this revolution?This summer there'll be an exciting workshop on the topic.Join us to this awesome learning experience in beautiful Lugano:\n\nFull source code here\n","frontmatter":"title: A-Frame + D3.js first steps\ndate: 2017-04-26 14:00:00 +0100\nsubtitle: 26th April, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, aframe, d3js, tips, vr]"},{"attributes":{"title":"3D pie chart, finally!","date":"2017-04-29 14:00:00 +0100","subtitle":"29th April, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","aframe","d3js","tips","vr"]},"body":"\nA promise is a promise.\n\n\nI did it. I've built the unspeakable, the unmentionable and possibly the worst piece of data visualisation ever invented by the human specie. \nMay I present my 3D pie chart in all its glory in VR world:\n\n\nA-Frame makes it ease thanks to the geometry properties of the cylinder. Here the markup to build a single slice:\n<a-entity geometry=\"primitive:cylinder;\n            radius:1;\n            thetaStart:0;\n            thetaLength:90;\n            height:1;\n            openEnded:false;\" \n          material=\"side: double; color:red;\" \n          rotation=\"70 20 0\" position=\"0 2 -4\"></a-entity>\n\nThe key here is the thetaStart and thetaLength allowing to define the start and the end angles of the slice.\nSince startAngle and endAngle are properties of the D3.js Pie layout, I can't help but built the 3D pie using D3.js and some fake data, so here it is ready to be included in your next Powerpoint VR presentation:\n\n\nHere the relevant portion of the script responsible for the task:\nd3.select('a-scene')\n    .selectAll('a-entity')\n    .data( pie(data) )\n    .enter()\n    .append('a-entity')\n    .attr('geometry', function (d, i) {\n      var a = d.startAngle * 180 / Math.PI\n      var b = (d.endAngle - d.startAngle) * 180 / Math.PI\n      return 'primitive:cylinder;radius:1;thetaStart:' + a + ';thetaLength:' + b + 'height:1;openEnded:false'\n    })\n    .attr('material', function (d, i) {\n      return 'side: double; color:' + colors(i) + ';'\n    })\n\nI'm still trying to figure out how to better use this kind of visualization in VR space (joking).\n\n\nI believe I've had enough of pies.If you've had too, join us this summer contributing to this awesome learning experience in Lugano:\n\nAs usual, full source code here\n","frontmatter":"title: 3D pie chart, finally!\ndate: 2017-04-29 14:00:00 +0100\nsubtitle: 29th April, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, aframe, d3js, tips, vr]"},{"attributes":{"title":"I love markdown","date":"2017-05-06 14:00:00 +0100","subtitle":"6th May, 2017","style":"red","cover":"logo.png","categories":"Opinions","tags":["opinion","markdown","thoughts"]},"body":"I really love markdown.\n\nI've started writing in this format long time ago, I suppose around 2010.It wasn't a love at first sight, though, but at that time I felt it was worth giving a try.I was right. Now I write in markdown everything.\nI'm writing in markdown even this piece of text. Indeed this post looks a bit meta.\n\n The question is: why?\n\nOnce you get confidence with it, it becomes very natural writing always in markdown, starting to structure the text since the beginning.\nBut again, why not using a regular notepad or any other software that allows to write and format text?\nHaving all my writing in markdown format basically means having the possibility to move chunks of text across different documents that are meant to be the source for different outputs.\nI'm actually using markdown document for personal notes, blog posts, presentations, github readme, and other stuff.\nIt's an efficient way to handle text contents in order to not be limited to a specific tool/output.The Finder of my Mac OS is the tool to find and organize the documents.Yes, you heard right, I don't rely to specific tools to organize these documents, I'm using the original and obvious software to do that, the Operative System GUI.Do you recall that it allows to create folders, move files, assign labels alongside a full-text search engine built-in?\nSo, happy writing, in markdown, of course.\n","frontmatter":"title: I love markdown\ndate: 2017-05-06 14:00:00 +0100\nsubtitle: 6th May, 2017\nstyle: red\ncover: logo.png\ncategories: Opinions\ntags: [opinion, markdown, thoughts]"},{"attributes":{"title":"Write Code in a jQuery Plugin","date":"2017-05-07 14:00:00 +0100","subtitle":"7th May, 2017","style":"red","cover":"modularity.jpg","categories":"Tutorials","tags":["tutorial","jquery","thoughts","plugin"]},"body":"I think that every developer at some point in his/her career starts wondering how to increase the modularity of his/her own code.It's in the DNA of any developer.Code can be used but most importantly can be re-used\n\nAs mentioned in this post, I do currently use jQuery for all my projects.For that reason I'm very interested in jQuery plugin development since it's a good way to develop chunks of code easy to use, re-use, test and debug.jQuery comes with its own modularity flavour that doesn't differ so much from common best practices of the javascript world.\nAlthough it might take more efforts writing something into a plugin, it worth every single extra minutes, indeed the benefits are big.\nThe bolierplate\nOf course there are tons of tutorials about this topic, I would suggest you to read at least the official one which is here.\nIf you want to grab something to start off right now, this is my minimal empty template to bootstrap a jQuery plugin:\n;(function($){\n\n    function init(){\n        var el = $(e)\n        // your wonderful code here\n    }\n\n    $.fn.newplugin = function(options) {\n\n        var defaults = {};\n        var settings = $.extend( {}, defaults, options );\n\n        return this.each(function(i, e){\n            init(e)\n        });\n    };\n\n})(jQuery)\n\nAs you can see all the internals are private that means they don't pollute the global scope.The only public variable is the plugin name which is attached straight to the jQuery global object.\nThe this.each statement allows to run the code on multiple targets, a common expectation by a jQuery plugin' user.\nConclusion\nEvery time you start to write a bunch of code to manipulate the DOM, please consider to put that code within a plugin, chances are to get benefits in terms of modularity and reliability.It can even happen to have some fun out of it.\n","frontmatter":"title: Write Code in a jQuery Plugin\ndate: 2017-05-07 14:00:00 +0100\nsubtitle: 7th May, 2017\nstyle: red\ncover: modularity.jpg\ncategories: Tutorials\ntags: [tutorial, jquery, thoughts, plugin]"},{"attributes":{"title":"Dump tweets from search","date":"2017-05-08 14:00:00 +0100","subtitle":"8th May, 2017","style":"blue","cover":"tweet.png","categories":"Tutorials","tags":["tutorial","scraping","twitter","nodejs"]},"body":"I do like the #May1Reboot initiative:\n\nThe campaign has been almost completely advertised through Twitter, therefore, I got curious to see some numbers related to people that used it to promote the initiative and their own relaunch as well.\nI've set up a little Node.js script to scrape tweets from a public search. I didn't use the API since the limitation of 7 days you can search back in the past.Instead, I've used the public search in the webapp to overcome this limitation.\nThe script, beside the collecting activity, saves each tweet in a comfortable json file in order to be used later on. \nThe script can also be run multiple times in order to update the json file with new tweets that happen to be included in the same search. This way you can run the script on different days without retrieving all the tweets since the beginning but only the fresh one.\nI'm planning to visualize the #May1Reboot tweets collection in some way in the coming weeks.I just thought this script might be useful to someone who needs to dump tweets based on a public search.\nSource code with instructions on this repo.\n","frontmatter":"title: Dump tweets from search\ndate: 2017-05-08 14:00:00 +0100\nsubtitle: 8th May, 2017\nstyle: blue\ncover: tweet.png\ncategories: Tutorials\ntags: [tutorial, scraping, twitter, nodejs]"},{"attributes":{"title":"D3.js v4 load with dsv and parseDate","date":"2017-05-10 14:00:00 +0100","subtitle":"10th May, 2017","style":"blue","cover":"d3-logo.png","categories":"Tutorials","tags":["tutorial","d3js","tips"]},"body":"The devil is in the details.\nThis is a quick post following the first article about migrating D3.js code from  version 3 to 4 with ease.\nThis time I'm focussing on two very little common functions in visualisation projects.\nLoading CSV with custom delimiter\nWith D3.js v3 this was the usual snippet to achieve this common task:\nvar dsv = d3.dsv(';')\ndsv('datasets.csv', function(error, data){\n    // do whatever you want with data\n})\n\nBy using the d3.dsv object it was possible to specify the custom delimiter then you were able to use it as a function to actually load the csv file with proper parser.\nWith the version 4 we need to set up the things a little bit different.\nThe parser is a standalone object that we have to use explicitly with the raw csv content.This means we need to rely to the more generic d3.text object to load the csv file without apply any default parser:\nd3.text('datasets.csv', function(error, raw){\n    var dsv = d3.dsvFormat(';')\n    var data = dsv.parse(raw)\n    // do whatever you want with data\n})\n\nParse Date and Time\nWith D3.js version 3 this was the tipical code to set up a date/time parser. We've usually relied to the .parse method of the d3.timeFormat object:\nvar parseDate = d3.timeFormat(\"%d.%m.%Y %H:%M\").parse;\ndata.forEach(function(d){\n    d.date = parseDate(d.data)\n})\n\nWith the version 4, the parser is a standalone object, therefore this is the little change you have to make in your code:\nvar parseDate = d3.timeParse(\"%d.%m.%Y %H:%M\");\n...\n\nThat's all for now.Happy coding and see the next time.\n","frontmatter":"title: D3.js v4 load with dsv and parseDate\ndate: 2017-05-10 14:00:00 +0100\nsubtitle: 10th May, 2017\nstyle: blue\ncover: d3-logo.png\ncategories: Tutorials\ntags: [tutorial, d3js, tips]"},{"attributes":{"title":"I know RegEx (just a bit)","date":"2017-05-26 14:00:00 +0100","subtitle":"26th May, 2017","style":"blue","cover":"cover_regex.png","categories":"Tutorials","tags":["tutorial","regex","tips"]},"body":"If you consider the Regular Expression, RegEx to my friends, a language for aliens, well, nice to include you in my company!\n\nMaybe you already know that it basically allows to find sequences of characters by means of pattern rules. \nYou might even know that since everything on our computer can be represented with characters, they can help tons in terms of data manipulation and transformation.  \nNo matter your knowledge level on the topic, you've been always fascinated and curious about how it works and attracted by its potentials as well.\nLearn the shit\nA year ago I've taken action and started to learn the basics of regular expressions.I've used RegExOne, a great resource to learn regex with simple and incremental step by step tutorials with interactive exercises to test out what you've learned.\nI've followed all the lessons alongside all the exercises but, to be fair, I was far to be confident using it in real-world projects.\nDespite that, I've started to use it from time to time going to avoid some spaghetti code to solve little problems in projects.\nI'm still learning it. I'm not confident using it without some helper tool like Regexr, which, by the way, I strongly suggest to try it out.\nWatching a reg-ex still makes me cringe but I can write simple expressions without much troubles.\nRecently, I had to extract valid URLs out of an array of texts and the following snippet fit the task perfectly:\nvar url = mytext.match(/https?:\\/\\/\\S*/g)\n\nIt returns an array with all the valid URL found in a given text source. You can see it in action here.\nThe logic behind that dark piece of string is surprisingly easy to learn and could be outlined as the follows:\n\n\"/\" A regular expression starts always with the reserved char /\n\"http\" find any word that begins with http\n\"s?\" optionally includes words with or without the letter s after the first pattern rule (resulting with http or https) using the special char ?\n\":\" continue to find words that have also a semi-colon after the previous tokens \n\"\\/\\/\" continue to find words that include also a // (since the / is a reserved char, we need to escape them with the back-slash, therefore, \\/\\/ means double slash) after the previous tokens\n\"\\S\" finally, continue to select words that include also any alpha-numeric characters other than spaces (with the specific command *\\S) and continue until the condition won't be met anymore\n\"/g\" close the expression with recursion, that means find multiple occurrence.\n\nIt's hard\nMastering regular expressions require dedication and don't happen quickly.\nI feel you. You are so scared by this just-a-little-bit opaque, but very efficient, tiny language.And yes, you can learn it.\n","frontmatter":"title: I know RegEx (just a bit)\ndate: 2017-05-26 14:00:00 +0100\nsubtitle: 26th May, 2017\nstyle: blue\ncover: cover_regex.png\ncategories: Tutorials\ntags: [tutorial, regex, tips]"},{"attributes":{"title":"Run a design studio these days","date":"2017-06-08 14:00:00 +0100","subtitle":"8th June, 2017","style":"red","cover":"ddd.jpg","categories":"Opinions","tags":["opinion","thoughts","studio","ddd"]},"body":"I was lucky enough to attend the Digital Design Days festival held a few days ago in Milan.We, as TODO, have been invited to give a speech there, together with an incredible line-up of design studios and designers.\n\nGiving a public talk is always, beside disseminating the studio brand, an opportunity to share thoughts trying to inspire people or, at least, to entertain them.\nBut participating in a festival is also an opportunity to listen and learn from others interesting people.DDD is no exception.In this post, I'd like to share briefly what I've learned out of it.\nThe program of the DDD festival, like any similar events, is full of talks and most of them overlap due to the compressed time frame of the programme.I've attended some of them (Epic, Moment Factory, Resn, Unit9 and Losiento, naming the most interesting), nevertheless that, I've seen some patterns and common principles related to running a design studio these days I'd like to share with you:\n\nAgile principles have been overcoming the boundaries, becoming part of the design process\nDesigners and developers work together since the project inception\nClients are included in the design process as much as possible and as early as possible as well\nPeople are people, not resources nor skills\nDigital prototyping is a common practice that is taking the place of static compositions (mockup/wireframe)\nDiversity of the team is key to succeed\nThe happiness of the people is another key of success\n\nThat said, if you are willing to open a design studio or you're running a design studio these days, stop thinking you're innovative by following the mentioned principles. The real truth is:\n\nThose principles are ordinary today\n\nYou heard right. You are not a visionary entrepreneur; you're a regular little business dude that try to make ends meet.\nI don't even want to think whether your studio doesn't follow, or worse doesn't even know, those principles as the foundation for a design studio culture. My condolences for your firm.\nSo, what's the point?If you want to feel innovative as an entrepreneur you have to look for something new, trying different, experimenting with something never seen yet.\nHappy research and all the best for your next innovative design studio!\n","frontmatter":"title: Run a design studio these days\ndate: 2017-06-08 14:00:00 +0100\nsubtitle: 8th June, 2017\nstyle: red\ncover: ddd.jpg\ncategories: Opinions\ntags: [opinion, thoughts, studio, ddd]"},{"attributes":{"title":"Save sequence of canvas frames to disk","date":"2017-06-16 14:00:00 +0100","subtitle":"16th June, 2017","style":"blue","categories":"Tutorials","tags":["tutorial","nodejs","canvas","filesystem"]},"body":"So, you've coded a great animation on a HTML5 canvas with javascript and you need to convert to a movie file?\nA quick and common way is pretty easy. Use a software to grab the display window. There are tons of this kind of tools, even the popular QuickTime player can do this kind of job. The only downside is about the framerate. Depending of your script, dropped frames won't be rendered in your final movie file. The final quality of your video won't be high.\nIf you need to preserve the framerate, perhaps because the final outcome needs to be a high quality movie or because your animation need to be integrated with other video footage, then maybe this script may help you.\nSaveFrame is a Node.js script that wait for a frame buffer in order to save it to disk. Your canvas animation will be saved frame by frame to disk. Then, you'll be able to compose a final movie using the generated file sequence with AfterEffect or even only (again) with QuickTime player.\nI've packed the script into a npm module for an easy setup and integration. \nIn short, to use SaveFrame within your project you have to run:\nnpm install saveframe\n\nthen, include in your main .html file the required libraries:\n<script src=\"node_modules/socket.io-client/dist/socket.io.js\"></script>\n<script src=\"node_modules/saveframe/client.js\"></script>\n\nand somewhere in your script:\n// configure the module\nSaveFrame.init(canvas)\n\n// send the frame to Node.js, do this for each new drawn frame\nSaveFrame.save()\n\nDone this, you need to run the server script specifing the folder you want to save the files:\nnode node_modules/saveframe/server.js <foldername>\n\nand run your main .html file on a local web server and you've done!\nFull documentation here.\nHappy grabbing!\n","frontmatter":"title: Save sequence of canvas frames to disk\ndate: 2017-06-16 14:00:00 +0100\nsubtitle: 16th June, 2017\nstyle: blue\ncategories: Tutorials\ntags: [tutorial, nodejs, canvas, filesystem]"},{"attributes":{"title":"LetterError","date":"2017-06-17 14:00:00 +0100","subtitle":"17th June, 2017","style":"purple","cover":"cover.jpg","categories":"Projects","tags":["project","legacy","creative","coding"]},"body":"During the periodic hard-drive cleaning, I've stumbled upon a tiny project dated back to 2007. \nIt is a python script (most probably a NodeBox script) that produces a generative typography artwork. \nIt's more an exploration than a real project but I'd like to keep in memory somewhere for posterity.\nHere some samples:\n\n\n\n\n\n\n\nand here the full script:\nsize(480, 680)\nbackground(1)\n\nmyString=\"An 'error' is a deviation from accuracy or correctness. A 'mistake' is an error caused by a fault: the fault being misjudgment, carelessness, or forgetfulness. Now, say that I run a stop sign because I was in a hurry, and wasn't concentrating, and the police stop me, that is a mistake. If, however, I try to park in an area with conflicting signs, and I get a ticket because I was incorrect on my interpretation of what the signs meant, that would be an error.\"\n\nfont(\"UniversLTStd-LightCn\")\n\npush()\nfill(0)\nfontsize(10)\nalign(RIGHT)\ntext(myString, 275, 20, width=200)\npop()\n\nalign(JUSTIFY)\nfont(\"UniversLTStd-ThinUltraCn\")\n\nlist = myString.split(\" \")\n\nc=0\n\nfor i in list:\n    c+=1\n    fill(0)\n    #rect(0, random(5, 30), 480, 10)\n    rotate(-.2+random(.4))\n    lineheight(random(5, 30))\n    fontsize(random(7, c/4))\n    text(myString, 0, 0, width=480)\n\n","frontmatter":"title: LetterError\ndate: 2017-06-17 14:00:00 +0100\nsubtitle: 17th June, 2017\nstyle: purple\ncover: cover.jpg\ncategories: Projects\ntags: [project, legacy, creative, coding]"},{"attributes":{"title":"ES6 and D3.js: sweet","date":"2017-07-01 14:00:00 +0100","subtitle":"1st July, 2017","style":"blue","categories":"Tutorials","tags":["tutorial","es6","d3js","tips"]},"body":"I'm learning javascript ES6 in small steps.\nSo far, I'm quite confident writing arrow functions and template strings.\nIn the D3.js world, even those little features bring huge benefits from code readability point of view.\nArrow function\nLet's consider a very common and frequent chunk of code in a D3.js script:\nd3.selectAll('rect')\n    .attr('x', function(d, i){\n        return d.x\n    })\n\nWith ES6 it can be reduced like this:\nd3.selectAll('rect')\n    .attr('x', d => d.x)\n\nCleaner, uh?\nArrow functions are not meant to be a full replacement of the original one. Due the different nature of them, there are situations where you have to use the old fashioned function statement, in particular when you need to use the this keyword, such as:\nd3.select('circle')\n    .on('clic', function(){\n        console.log( this )\n    })\n\nThe same using the arrow function won't work as expected since the scope of this will be different.\nString interpolation\nAnother common operation in D3.js script is the string interpolation, such as:\nd3.selectAll('g')\n    .attr('transform', function(d, i){\n        return 'translate(' + mapX(i) + ', 0)')\n    })\n\nAgain, with ES6 things get compact and readable:\nd3.selectAll('g')\n    .attr('transform', function(d, i){\n        return `translate(${mapX(i)}, 0)`\n    })\n\nAnd even better with the arrow function:\nd3.selectAll('g')\n    .attr('transform', (d, i) => `translate(${mapX(i)}, 0)`)\n\nES6 is great and it deserves some time to embrace it in the daily work.To be honest, I'm still using var to declare a variable instead of let or const, though.I guess I need to commit myself more on it.\n","frontmatter":"title: \"ES6 and D3.js: sweet\"\ndate: 2017-07-01 14:00:00 +0100\nsubtitle: 1st July, 2017\nstyle: blue\ncategories: Tutorials\ntags: [tutorial, es6, d3js, tips]"},{"attributes":{"title":"Non-constant axis in small multiple charts with D3.js","date":"2017-07-27 14:00:00 +0100","subtitle":"27th July, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","d3js","tips","smallmultiple"]},"body":"\nI like to break the rules sometimes.\n\n\nSmall multiple in data visualization is a way to represent and compare variations of a property in several categories at once by means of an array of small and pretty similar charts that use the same scale and axes.\nThe \"same scale and axes\" is mandatory in this context otherwise the comparison cannot be done.\nIn D3.js context, creating multiple charts out of a single dataset is a matter of using the popular data-join mechanism that is at the heart of the library concept.\nConsidering a dataset structured as an array of objects with each object that contains an array of data points, a small multiple chart like this one:\n\ncan be built using D3.js with this working script:\nvar num = 10\nvar dataset = d3.range(4).map((d, i) => {\n    return {key: i, values:d3.range(num).map(c => Math.random()*(i+1))}\n})\n\nvar groups = d3.select('svg')\n    .selectAll('g')\n    .data(dataset)\n    .enter()\n    .append('g')\n    .attr('transform', (d, i) => `translate(${i*100} ,0)`)\n\nvar mapX = d3.scaleLinear()\n    .domain([0, num-1])\n    .range([0, 80])\n\nvar min = d3.min(dataset, d => d3.min(d.values, c => c))\nvar max = d3.max(dataset, d => d3.max(d.values, c => c))\n\nvar mapY = d3.scaleLinear()\n    .domain([max, min])\n    .range([0, 100])\n\nvar lineGen = d3.line()\n    .x((d, i) => mapX(i))\n    .y(d => mapY(d))\n\ngroups.append('path')\n    .attr('d', d => lineGen(d.values))\n    .style('fill', 'none')\n    .style('stroke', 'red')\n\nvar axis = d3.axisRight(mapY)\n    .ticks(10)\n\ngroups.append('g')\n    .classed('ax', true)\n    .call(axis)\n\nThis is the basic in small multiple representation: an array of little charts, one property' variation, same scale and axes.\nBut, one of the nice thing working with D3.js is that you can do also silly stuff breaking some conventions just because you can and for fun.That's why a few days ago I've questioned myself about how to build a small multiple representation with different axes per single chart.\nI had to figure out a bit the way to go because, looking the above script, the .call(axis) method does pretty all the magic. Instead of using the same scale object and axis object, which is easier, my goal was to compute a different scale (and then a different axis) for each little chart using the data points array of each object.\nBasically, this is what I wanted to achieve (remember, no comparison can be done here):\n\nand this is what I've changed in the previous script related to the path generation, basically, I've moved the scale/line configs within the d attribute setter:\ngroups.append('path')\n    .attr('d', d => {\n        var min = d3.min(d.values, d => d)\n        var max = d3.max(d.values, d => d)\n\n        var mapY = d3.scaleLinear()\n            .domain([max, min])\n            .range([0, 100])\n\n        var lineGen = d3.line()\n            .x((d, i) => mapX(i))\n            .y(d => mapY(d))\n\n        return lineGen(d.values)\n    })\n\nand the part related to the axis, again, I've moved the configs within the .each function in order to initialise an ad-hoc axis object ready to be called at the end of the statement:\ngroups.append('g')\n    .classed('ax', true)\n    .each(function(d, i){\n\n        var min = d3.min(d.values, d => d)\n        var max = d3.max(d.values, d => d)\n\n        var mapY = d3.scaleLinear()\n            .domain([max, min])\n            .range([0, 100])\n\n        var axis = d3.axisRight(mapY)\n            .ticks(10)\n\n        d3.select(this)\n            .call(axis)\n    })\n\nThat's sound silly, uh? \n\nMore twisted code to achieve something that is basically wrong from the design perspective. \n\nThe reward is the learning benefit out of this.I really do not know whether I'll use this little technique in the near future, but I'm happy to be able to handle it.That is the very good part about working with a library such as D3.js that gives you the power to break the rules somethimes.\nHappy coding! \n","frontmatter":"title: Non-constant axis in small multiple charts with D3.js\ndate: 2017-07-27 14:00:00 +0100\nsubtitle: 27th July, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, d3js, tips, smallmultiple]"},{"attributes":{"title":"Big Dive Visualized!","date":"2017-07-31 14:00:00 +0100","subtitle":"31th July, 2017","style":"purple","cover":"cover.png","categories":"Projects","tags":["project","dataviz","d3js","bigdive","process"]},"body":"Big Dive 6, the training program to learn the skills to dive into Big Data, is over. You can read a brief story here.\n\nThis year we've chosen to collect  the participant's information in order to create a small visualisation, an interactive report to have a glimpse of the course through a different angle. I've been in charge to design and develop the visualization with great freedom (thanks to its organizers).I have to say it, I had a good time building it.\nThe Process\nAs usual, the final outcome doesn't look like the initial idea. The design process leads to different paths and the following design choices are quite difficult to outline at the beginning. That's the beauty of the design: you kick-off an idea; you follow a process; you end up with something different.\nTo give a glimpse of what I'm talking about, here a bunch of screenshots I saved during some checkpoint of the process.\nThe initial iterations are usually the most divergent. It's the time to discover the path:\n\n\n\n\n\n\n\nThis second round shows an established path with the beginning of the fine-tuning phase:\n\n\n\n\n\n\n\nThe last iterations show how many little changes can be done. To be fair, I'd go forever, there's no limit to perfection:\n\n\n\n\n\n\n\nThis is why is so important to stop at some point and ship it!\nConclusion\nIs it over? I don't think so. I suspect I'll consider some updates for the next edition of Big Dive. \nNow you can experience the visualization.Source code available here.\n","frontmatter":"title: Big Dive Visualized!\ndate: 2017-07-31 14:00:00 +0100\nsubtitle: 31th July, 2017\nstyle: purple\ncover: cover.png\ncategories: Projects\ntags: [project, dataviz, d3js, bigdive, process]"},{"attributes":{"title":"Going towards reusable D3.js charts","date":"2017-08-02 14:00:00 +0100","subtitle":"2nd August, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","d3js","reusable","proof","boilerplate"]},"body":"\nReusable code in programming field has been always a chimera.\n\nOver the last few days, I've thought quite often about making reusable D3.js components. \nI perfectly know that writing code that should be also reusable basically means ending up to build some yet-another-library.In the D3.js context, that would mean to reach to some yet-another-library built on top of D3.js.\n\nI don't want to build a library. My premises are a little bit different.What I'm thinking is something that is easy to use, easy to extend, easy to combine and all that shit without putting too much complexity in it, simple ah? \nI did some research and studies on some existing thirty part libraries without ending up to any brilliant idea.Then, I've stumbled upon (again, since I've read it a few years ago) this evergreen article from the maintainer of D3.js, Mike Bostock.\nI've enjoyed it as it was the first time but now the last paragraph clicked something in me.Building a reusable component requires making decisions about the level of configuration you want to expose and at the same time the limits the component will force the user to.\nSo, what about building a collection of components ready to be used but at the same time ready to be modified, forgetting the benefit of the incremental improvements a library can provide?.\nA more elaborate statement might be rephrased as: a reusable component is something can be used very fast with few configuration and few functionalities. If I need further features I can modify the source code. That means, no black-box library easy to update but more a boilerplate of components to start with.\nThe mentioned article outline also some good advice to make D3.js plugins using the D3-way.Basically, it's how the d3-axis object works.\nProof Of Concept\nEverything starts with an immediately-invoked-function-expression (IIFE) in order to encapsulate the component in a private context alongside with some of the Mike article tips, more precisely, the selection.each statement to preserve the D3.js selection chain:\n;(function () {\n    window.myViz = function init () {\n\n        // the build/update function, where all the magic should happen\n        function build (selection) {\n            selection.each(function (data, index) {\n                var element = d3.select(this)\n                console.log(data)\n            })\n        }\n\n        return build\n    }\n})()\n\nThis module can be used in common D3.js script such as:\nvar vis = myViz()\n\nvar svg = d3.select('svg')\n    .datum([])\n    .call(vis)    \n\nd3.select('body').on('click', function(){\n    svg.call(vis)\n})\n\nAs you might notice, in the build function we can use both the selection and the data bound to it to handle the chart creation and update as well.\nWhen talking about reusable scripts means also having some configs, therefore, here my version of some default:\n;(function () {\n    window.myViz = function init () {\n        build.width = 300\n         build.height = 200\n    ....\n\nand a way to override them from outside:\nbuild.config = function (options) {\n    for (var k in options) {\n        if (build.hasOwnProperty(k)) {\n            build[k] = options[k]\n        }\n    }\n    return build\n}\n\nIn this way the object can be configured as the following code:\nvar vis = myViz()\n    .config({width:1000})\n\nNow it's time to build something in the build function. Adding the following chunk of code within the function we're able to add a text label to our chart:\nelement.append('text')\n    .text('My chart: ' + build.width + ' ' + data.length)\n    .attr('y', build.height / 2)\n    .attr('x', build.width / 2)\n    .style('text-anchor', 'middle')\n\nThat last code arose immediately an issue. For each build call, a new text element will be generated. This is not our goal. We want to append a text element only during the first function call. The following calls should reuse the same text element updating the content or the position.\nI've spent a bit of time figuring out the best solution, an elegant solution to distinguish the first time call from the following calls.\nInitially, I set a flag, an 'inited' status using a class name in the container. That doesn't ring right to me. I've continued to dig trying to find a better way. Finally, I started to peep in the source code of D3.js, specifically the d3-axis source code trying to find out how it has been implemented a similar scenario.\nIt turned out a clever trick to check if an element is present or not in order to route different business logic. It relies actually on the data-join mechanism of D3.js, what else?\nHere the code:\n// data binding with a fake dataset\nvar label = element.selectAll('.myLabel')\n    .data([null])\n\n// enter selection, only if the element is not present\nvar enterLabel = label.enter()\n    .append('text')\n    .attr('y', build.height / 2)\n    .attr('x', build.width / 2)\n    .style('text-anchor', 'middle')\n    .classed('myLabel', true)\n\n// update\nlabel.merge(enterLabel).text('Your chart: ' + build.width + ' ' + data.length)\n\nKudos to it. A very elegant and pure-D3-way solution to handle the different phase of the component. The above code will work nicely even, for some reason, the element will be removed.\nConclusion\nSo far, I'm quite happy of this proof-of-concept. I'll try to build a real-world component following this principles in order to test, whether or not, it can be a viable solution to develop a collection of components that can be both useable as-is and editable further or even just to learn some technique out of them.\nYou can find the full source code of this proof-of-concept here.\n","frontmatter":"title: Going towards reusable D3.js charts\ndate: 2017-08-02 14:00:00 +0100\nsubtitle: 2nd August, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, d3js, reusable, proof, boilerplate]"},{"attributes":{"title":"Towards a better chart template","date":"2017-08-06 14:00:00 +0100","subtitle":"6th August, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","d3js","reusable","proof","boilerplate"]},"body":"In the last article, I've started the initial proof-of-concept regarding building reusable D3.js components. I've ended up to an empty boilerplate following the suggestions provided by Mike Bostock in his Towards Reusable Charts article.\nI've spent a bit of time trying to use these principles in a real-world component, for instance, a basic line chart. Most of the initial ideas were preserved while some other have not.\nI've abandoned the generic public method config() to override public properties preferring a more explicit method per property to edit every single public setting.\nBasically, instead of:\nvis.config({width:300, height:300})\n\nnow it should be something more D3-way like:\nvis.width(300)\n    .height(300)\n\nusing the implementation of a setter/getter such as:\nbuild.width = function (value) {\n    if (!arguments.length) return width\n    width = value\n    return build\n}\n\nThis way each public config is also a getter method:\nvar h = vis.height()\n\nA padding object has been added to calculate the useful area for the chart that is always required: \nvar padding = {top: 25, bottom: 25, left: 25, right: 25}\n...\n// useful area\nvar innerw = width - padding.left - padding.right\nvar innerh = height - padding.top - padding.bottom\n\nA working example\nI'm quite happy of the implementation so far and here the result of the component using the following initialising code:\n<svg width=\"600\" height=\"300\"></svg>\n<script>\nvar vis = myViz().width(400).height(400)\nvar dataset = d3.range(10).map(d => Math.random())\nvar svg = d3.select('svg')\n    .datum(dataset)\n    .call(vis)\n</script>\n\n\nAs you might notice yourself, this template contains both the Scale and the Axis configurations as well. I'm not totally sure whether it is ok or not.Scales and axis usually need to be configured according to the nature of the dataset but in this template there are some assumptions about them, that is why my doubts.\nI don't want to take any structural decision right now. It'd be too soon. I'm going to continue to evolve this proof-of-concept by means of further real-world components, eventually finding the right solution (hopefully).\nYou can check the complete source code at this stage here.\n","frontmatter":"title: Towards a better chart template\ndate: 2017-08-06 14:00:00 +0100\nsubtitle: 6th August, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, d3js, reusable, proof, boilerplate]"},{"attributes":{"title":"Size matters","date":"2017-08-07 14:00:00 +0100","subtitle":"7th August, 2017","style":"blue","cover":"06.gif","categories":"Tutorials","tags":["tutorial","d3js","reusable","proof","layout","flex","svg"]},"body":"Following the initial exploration on design and build a reusable D3.js chart, some questions arose about having multiple components on the same page and how they can play nicely together.\nThe browser is pretty smart at computing layout these days, therefore, I wanted to exploit it as much as possible instead implementing some logic in order to place and resize element on a given canvas.\nI've conducted a quick test about how to use CSS, Flexbox and SVG element alongside my initial chart template in order to get a fluid container responsible to resize all the components.\nUsing the width and height\nThe first attempt was obvious. Given a quick Flexbox layout, I've put a bunch of SVG tag with proper size dimensions set, such as the following markup:\n<div class=\"row\">\n  <div class=\"one\">\n    <svg width=\"1000\" height=\"200\"></svg>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"one\">\n    <svg width=\"200\" height=\"200\"></svg>\n  </div>\n  <div class=\"two\">\n    <svg width=\"400\" height=\"200\"></svg>\n  </div>\n</div>\n\nThey are all consistent between them but the overall page layout doesn't work:\n\nUsing width:100%\nUsing the same markup but assigning to all the SVG tags the width:100% via CSS can help a bit but with other issues to solve:\n\nAdding the viewBox\nAdding to each SVG tag a proper viewBox attribute:\n<div class=\"row\">\n  <div class=\"one\">\n    <svg width=\"1000\" height=\"200\" viewBox=\"0 0 1000 200\"></svg>\n  </div>\n</div>\n\nIt does mitigate the above issues, still not perfect in some conditions, though:\n\nRemoving the width and height\nRemoving the width/height attributes from the SVG markup leaving only the viewBox seems to solve most of the issues. Now all the components fit the available space, preserving the aspect-ratio of each one. There's still some issue here: all the component' elements get resized in a different way, thus the overall consistency get lost (look at the size of the axis or the padding of each chart). Another problem is the exaggerated size of some elements in some situation (font-size too big of too small) because the SVG get resized proportionally no matter the window size:\n\nCompute the viewBox according to the window size\nSince the different sizes of the chart elements were caused by the different viewBox present on the same page, I've tried to re-compute it based on the window size. This technique solved some issues but still, it does remain difficult to set them properly without spending a lot of time making this calculation precise, not to mention that any layout change does invalidate all the mentioned setting.\nThis is the code to re-calculate the viewBox. I've used a custom HTML attribute, ratio, to keep the reference of the desired aspect-ration of each SVG element:\n<div class=\"row\">\n  <div class=\"one\">\n    <svg ratio=\"5 1\"></svg>\n  </div>\n</div>\n\nwhere ratio=\"5 1\" means that width should be five times more that height, and here the code to read the ratio to compute the viewBox on each widow resize event:\nd3.select(window).on('resize', () => {\n  onResize()\n}).dispatch('resize')\n\nfunction onResize(){\n  var multiplier = window.innerWidth / 2 // arbitrary calculation here\n  d3.selectAll('svg').each(function() {\n    var wh = d3.select(this).attr('ratio').split(' ')\n    var w = parseInt(wh[0] * multiplier)\n    var h = parseInt(wh[1] * multiplier)\n    d3.select(this).attr('viewBox', '0 0 ' + w + ' ' + h)\n  })\n  svg.each(function() {\n    var wh = d3.select(this).attr('viewBox').split(' ')\n    var w = wh[2]\n    var h = wh[3]\n    d3.select(this).call(vis.width(w).height(h))\n  })\n}\n\nHere you can see the internal elements size are constant (font-size, padding) no matter the size of the SVG tag. The proportions are preserved. Still, it's difficult to have a consistent element size across different components (same font-size and padding between different SVG charts):\n\nFinally, the solution\nThe working solution has been to use the ratio together with the width of the computed wrapper that contains the SVG tag. This way we are able to calculate a proper viewBox for each SVG tag according to the given ratio without having to do hard math in order to have consistency across different components and, most importantly, it works out of the box:\n\nThe new markup changed a bit:\n<div class=\"row\">\n  <div class=\"one\">\n    <svg fit ratio=\"5 1\"></svg>\n  </div>\n</div>\n\nand here the script that will make all the calculation automatically:\nd3.select(window).on('resize', () => {\n  onResize()\n}).dispatch('resize')\n\nfunction onResize(){\n  d3.selectAll('[fit]').each(function() {\n    var ratio = d3.select(this).attr('ratio')\n    var factor = (ratio) ? (ratio.split(' ')[1] / ratio.split(' ')[0]) : 1\n    var computedW = parseInt(window.getComputedStyle(this).width.split('px')[0])\n    var attrH = d3.select(this).attr('height')\n    var calcH = (attrH) ? attrH : parseInt( computedW * factor )\n    d3.select(this)\n      .attr('viewBox', '0 0 ' + parseInt(computedW) + ' ' + parseInt(calcH))\n      .call(vis.width(computedW).height(calcH))\n  }) \n}\n\nBonus track\nWhat about having a component that resizes well only on one direction (let's say the width) while keeping the height with some fixed specific value?\nBy setting the attribute height instead the ratio, we can accomplish such functionality quite easily:\n<div class=\"row\">\n  <div class=\"one\">\n    <svg fit height=\"100\"></svg>\n  </div>\n</div>\n\nThis feature can be seen in the last screencast, the first component actually preserves a fixed height.\nAs usual, the full source code of this exploration can be found on this repo.\nHappy coding!\n","frontmatter":"title: Size matters\ndate: 2017-08-07 14:00:00 +0100\nsubtitle: 7th August, 2017\nstyle: blue\ncover: 06.gif\ncategories: Tutorials\ntags: [tutorial, d3js, reusable, proof, layout, flex, svg]"},{"attributes":{"title":"Efficient tooltip positioning in D3.js chart","date":"2017-08-08 14:00:00 +0100","subtitle":"8th August, 2017","style":"blue","cover":"screen.gif","categories":"Tutorials","tags":["tutorial","tooltip","d3js","positioning","proof","technique"]},"body":"I was just scribbling on paper without a specific goal. Suddenly, a little ah-ha moment brought me in a little exploration. \n\nThe proof-of-concept\nApparently, I'm all about Proof-Of-Concept these days. \nThis time is about positioning a graphic element (let's say, a tooltip) next to the mouse but using the most efficient area in a given canvas in order to avoid the element to be cut by the boundary of the canvas.\nDisclaimer\nI didn't make any research on the topic, I bet I wouldn't be astonished if there were, at least, a couple of Ph.D. out there on efficient tooltips positioning algorithms.I don't know whether this technique has been already used somewhere. In this case, I would love to hear more about them.\nThe rules\nThey are simple and can be outlined as the following:\n\nconstruct four lines between the canvas edge corners and the mouse position\nfind the longest one\nfind a point along the longest line that is far enough from the mouse\nuse that position to move the centroid of the element we want to position efficiently\n\nA very efficient way to show how it works and what's going on behind the scene might be this progressive visualization:\n\nHere the relevant javascript code that uses a couple of essential native functions to accomplish this feature. It was extrapolated by a D3.js script but it can be adapted to other contexts quite easily. This script requires to be within a mousemove listener:\n// finding the longest line\nvar maxL\nvar maxV = 0\nlines.each(function (d, i) {\n  if (d.l >= maxV) {\n    maxL = this\n    maxV = d.l\n  }\n})\n\n// get the final point\nvar l = maxL.getTotalLength()\nvar p = maxL.getPointAtLength(l - 60)\n\n// position the element\nlegend.attr('transform', `translate(${p.x}, ${p.y})`)\n\nHere the interactive version (click to toggle the chart visibility and... desktop only):\n\n\nConclusion\nI don't know whether I'm going to use this technique in the future. Nevertheless, it's always good to figure out what's going on behind the curtain, it can't hurt.\nPS: I've also learned something on SVG 2; the getTotalLength() function  will be deprecated on some SVG element (i.e. line, text), this is why my implementation uses path instead line elements.\nSource code here.\n","frontmatter":"title: Efficient tooltip positioning in D3.js chart\ndate: 2017-08-08 14:00:00 +0100\nsubtitle: 8th August, 2017\nstyle: blue\ncover: screen.gif\ncategories: Tutorials\ntags: [tutorial, tooltip, d3js, positioning, proof, technique]"},{"attributes":{"title":"Bending-Dancing","date":"2017-08-09 14:00:00 +0100","subtitle":"9th August, 2017","style":"purple","cover":"cover.gif","categories":"Projects","tags":["project","svg","d3js","animation","lines","bend","smooth"]},"body":"A few years ago, a little trick opened up a new trend on animations on the web. I'm talking about the Animated Line Drawing technique in SVG path discovered and documented back in 2013  by Jake Archibald here.CSS-Tricks wrote about it extensively here.\nBriefly, it relies on changing two props belonging to the SVG path, stroke-dasharray and stroke-dashoffset.They can be set with values between 0 and the path length using the native function getTotalLength().\n\nD3.js transition can animate those attributes out of the box, therefore, I can't help but playing a bit with them is just a matter of these line of code:\npath.transition()\n    .attr('stroke-dasharray', function () {\n        var length = this.getTotalLength()\n        return Math.random() * length\n    })\n      .attr('stroke-dashoffset', function () {\n        var length = this.getTotalLength()\n        return Math.random() * length\n    })\n\nI got curious about exploiting the technique to build animated structures using different shapes and pattern.\nHere with horizontal lines (click to change):\n\n\nHere with the border of a rect (click to change):\n\n\nThe border of circles (click to change):\n\n\nTha same as above with different stroke width (click to change):\n\n\nNow you can experience the final exploration.\nIf you are interested, you can find the source code here.\n","frontmatter":"title: Bending-Dancing\ndate: 2017-08-09 14:00:00 +0100\nsubtitle: 9th August, 2017\nstyle: purple\ncover: cover.gif\ncategories: Projects\ntags: [project, svg, d3js, animation, lines, bend, smooth]"},{"attributes":{"title":"Har Abstractor","date":"2017-08-24 14:00:00 +0100","subtitle":"24th August, 2017","style":"purple","cover":"cover.gif","categories":"Projects","tags":["project","d3js","graphic","art","poster","abstract"]},"body":"Back in 2013, I made a little visualization project using HAR as data source.\n\nThe purpose was about experimenting with graphic art using some data as input material. At that time I liked the idea to use a kind of fingerprint for web pages in order to build some retro-style graphic compositions.\nThese are some saved images related to popular home pages: \n\n\n\n\n\n\n\nHere the working D3.js script (click to loop through different data sources):\n\n\n\nYou can experience it in full window here. and you can find the source code here.\n","frontmatter":"title: Har Abstractor\ndate: 2017-08-24 14:00:00 +0100\nsubtitle: 24th August, 2017\nstyle: purple\ncover: cover.gif\ncategories: Projects\ntags: [project, d3js, graphic, art, poster, abstract]"},{"attributes":{"title":"The Design Sprint","date":"2017-08-27 14:00:00 +0100","subtitle":"27th August, 2017","style":"red","cover":"sprint.png","categories":"Opinions","tags":["opinion","thoughts","agile","sprint"]},"body":"I've been interested in the Google Design Sprint method over the last year.I've conducted, successfully, some sprints in our studio, so far. I'm quite happy with the results even though a degree of personalization is required.\n\nBut, what is a Design Sprint?\n\nThe Google Design Sprint is a loosely based Agile method to design and validate quickly a business idea.\n\nIt's a structured process with a tight deadline and a fixed and well-encoded time-frame.\nEverything has to happen in a full working week, five full-time days.\nThe team should be composed of a maximum of 6-8 persons and it should be diverse and multidisciplinary because different skills are required in order to cover all the tasks the sprint requires.\nAccording to its proponents, it is an efficient and affordable way to validate a product or service idea before going to invest big money on implementation.\nHere a brief outline of the sprint week, one phase per day:\nUnderstanding\nIt's the day where the team gets the brief and the context of the project in order to set the mind on the proper track.\nIt's mostly based on talk and people interactions about content and purpose strategy.\nOne of the tools that can be used to foster design thinking is the HMW (acronym of How Might We) tool to encode every design opportunities into questions in order to ease the collecting and choice activity. A key person to lead the process is mandatory.\nIdeas\nIn this day it's all about sketching ideas with a precise schedule of activities, personal and team wise, with review and discussions. It's the diverging day where all the crazy ideas can be put on the table.\nDecision\nIn this day all the good ideas outlined and discussed the day before need to be condensed into a single one which will be the main path to follow in the next phases.\nEveryone votes each single good idea and a new project draft will be outlined by the whole team. \nThe new project idea has to be storyboarded within the end of the day.\nPrototype\nBased on the detailed sketch of the final idea the team has to prototype it in some realistic form in order to be able to test it with real people.\nThe tools can be anything as long as they allow to achieve a working artifact useful to test and validate the relevant functions, planned for the next day.\nTest\nThe last day is dedicated to testing the prototype with real people.\nThis means you need to find people who are willing to give a bit of their time to you. This is why you need to give them something back as a gift.\nThe test is a mix of interviews and observation method and should follow this process:\n\nwelcome and introduction to this activity\na brief talk to break the ice asking something personal and easy to the user (your working day, your hobbies, etc)\nintroduction to the project and the prototype and how you are going to assist him/her\nuse the prototype by means of specific tasks outlined ahead\nlittle debrief, opinions and considerations, then a big thank you alongside the gift\n\nConclusion\nAs in every strategy, there's something good to take away and something that needs to be changed. The Design Sprint from Google is no exception.\nThe good part is the focus of the process, that need to be conducted without external distraction. Also, the idea to put together different people in order to create a diverse team is a very useful approach.\nI wouldn't be strict about the details (the crazy eight, the HMW, the voting system, etc) since it really depends on the project.\nBased on my experience managing few sprints so far, the most important thing is about to book a focussed time frame with a diverse team. The schedule of the Design Sprint is a good starting point but you don't have to adhere strictly. It's much better to follow the path the team is drafting over time because if it happens it means it's required and it's good for the final outcome.\n","frontmatter":"title: The Design Sprint\ndate: 2017-08-27 14:00:00 +0100\nsubtitle: 27th August, 2017\nstyle: red\ncover: sprint.png\ncategories: Opinions\ntags: [opinion, thoughts, agile, sprint]"},{"attributes":{"title":"The Getting Things Done issue","date":"2017-08-28 14:00:00 +0100","subtitle":"28th August, 2017","style":"red","cover":"cover.png","categories":"Opinions","tags":["opinion","thoughts","gtd","growth"]},"body":"Everybody, at some point in time, will stumble upon the GTD issue. \n\nGetting Things Done is the art of keeping organized and efficient the list of tasks we've been asking to accomplish in our everyday life, both personal and professional as well.\nIn theory, it's straightforward.The process of capture, clarify, organize, reflect and engage, resonates right to me.\nCapture is something given these days. The tools we regularly use such as email, chat, pm tools and social networks bring to us the raw information we need to process.\nClarify is meant to be the process for each new piece of information that comes up in front of us in order to give it the right place in our brain, based on several properties.\nOrganize is the activity to keep in order our list of tasks considering the new comers and the changes that might occour.\nReflect is the frequent review of the organized corpus of tasks in order to quickly update and refine it.\nEngage is the final action related to what we have to do based on what we have collected, processed and synthesized in the previous phases.\nThe real world\nThe problem is the real world. The amount and the diversity of the daily information are huge and applying that process is far from being easy.\nTake the email. How many of you struggle with it? The email is the primary source of that complexity.\n\nA friend of mine told me the email is like a public to do list, in the sense that everybody can add tasks for you without asking permission for.\n\nTools\nI see a parallel with the Agile wagon. On one side, few principles easy to grasp that are meant to guide us to handle our life efficiently, on the other side tons of tools, books, experts, workshops that are meant to help us to undestand those principles but that they are far from being efficient.\nThere is countless number of tools out there that allegedly try to convince us they can solve our day-to-day problems. Eventually, they are all to-do lists. \nIndeed, thousand of to-do apps/services are just waiting for us for a test drive. \nOver the years I tried a lot of them, giving up every single time.  \nSingle Point Of Truth\nI do believe in the Single Point Of Truth (SSOT theory).  \nAt some point, I've started to use Evernote for my annotations. At some point, I've ended up to a single note to manage day-to-day tasks, adding, updating and deleting chunks of texts there.\nIn 2016 I got rid of Evernote using a single .txt file, always open on my computer. \nThat file is my single point of truth. It's the place where I can put words/sentences/notes/lists regarding both my personal and professional reminders. I can highlight them with colors, size, font-variance, bullet-list etc; I can give different priorities moving up and down chunks of text. I can quickly annotate over specific sentences whether it needs.I religiously edit it every day adding what's new, removing what's obsolete or useless, updating what has been changed.  \nSo far, this little file is the best tool I found out that help me to keep my life organized.No muss, no fuss, it just works.\n","frontmatter":"title: The Getting Things Done issue\ndate: 2017-08-28 14:00:00 +0100\nsubtitle: 28th August, 2017\nstyle: red\ncover: cover.png\ncategories: Opinions\ntags: [opinion, thoughts, gtd, growth]"},{"attributes":{"title":"Vue.js: nice to meet you!","date":"2017-08-30 14:00:00 +0100","subtitle":"30th August, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","vue","svg","basic"]},"body":"Vue.js caught my attention since its first public release mainly for its simplicity. Unfortunately, I've never had the opportunity to put my hands on it. Finally, that time has come.\n\nOver the past few years, I had some experience with Angular 1.x. I remember I've stumbled upon it back in 2012.I remember quite clearly my excitement about how I was able to transform a static web-page in a reactive web-app using a couple of magic custom HTML tags. \nFor some reason, I've skipped totally the React/Angular(2/4) battle in the last couple of years. There was something that blocked me doing it. I hadn't test them yet.\nThe mentioned experience with Angular 1.x helped a lot my confidence with Vue.js.I've immediately felt at home with it. \nI like Vue.js because it tries to stay lightweight by design, borrowing the best parts of both React and Angular as well.\nI like it also because it doesn't try to add new language flavours (TypeScript and JSX, I'm looking at you!). I used to be careful with opinionated language extensions. I'm happy with my decision to not embrace Sass and CoffeeScript when they still were a thing. I do prefer W3C standards.\nI've conducted a getting started time with the library, trying to discover some peculiarities, learning a couple of useful bits. I'm going to outline this first experience for sharing purpose and future reference.\nBootstrapping an App\nImport the library, use this HTML fragment:\n{% raw %}<h1 id=\"app\">{{ message }}</h1>{% endraw %}\n\nand this js code:\nnew Vue({\n    el: '#app',\n    data: {message:'Hey'}\n})\n\nComponents\nCreating a reusable component:\n{% raw %}Vue.component('my-comp', {\n    template: '<h1>{{ mydata.message }}</h1>',\n    props: ['mydata']\n}){% endraw %}\n\nuse it in your document specifying the data bind:\n<div id=\"app\">\n    <my-comp v-bind:mydata=\"item\"></my-comp>\n</div>\n\nbootstrap it with this:\nnew Vue({\n    el: '#app',\n    data: {\n        item:{\n            message:'my long sentence'\n        }\n    }\n})\n\nPopulate a list\nUsing the directive v-for:\n{% raw %}<div id=\"app\">\n  <ul>\n    <li v-for=\"item in items\">{{ item }}</li>\n  </ul>\n</div>{% endraw %}\n\nVue.js will render it according to the passed array:\nnew Vue({\n    el: '#app',\n    data: {\n        items:['a', 'b', 'c']\n    }\n})\n\nTwo-way binding\nThe v-model directive allows for two-way binding:\n{% raw %}<div id=\"app\">\n  <textarea v-model=\"message\"></textarea>\n  <p>{{ message }}</p>\n</div>{% endraw %}\n\nNow the textarea value will update the p tag everytime we type in it:\nnew Vue({\n    el: '#app',\n    data: {\n        message: 'This is a good place to type things.'\n    }\n})\n\nConditionals\nThe v-if directive allows for simple conditionals:\n{% raw %}<div id=\"app\">\n  <ul>\n    <li v-for=\"item in items\" v-if=\"item.show\">{{ item.label }}</li>\n  </ul>\n</div>{% endraw %}\n\nIn this case, a property in data object will be responsible for the list item visibility:\nnew Vue({\n    el: '#app',\n    data: {\n        items:[\n            {label:'a', show:true},\n            {label:'b', show:true},\n            {label:'c', show:false},\n            {label:'d', show:true}\n        ]\n    }\n})\n\nInteractivity\nThe v-on:click directive allows to add click event on HTML elements:\n{% raw %}<div id=\"app\">\n  <ul>\n    <li \n        v-for=\"item in items\" \n        v-if=\"item.show\"\n        v-on:click=\"hide\">{{ item.label }}</li>\n  </ul>\n</div>{% endraw %}\n\nIf you want to pass the data object to the event handler function, you need to specify, explicitly, the arguments as the following:\n\n\n{% raw %}<div id=\"app\">\n  <ul>\n    <li v-for=\"item in items\" \n        v-if=\"item.show\"\n        v-on:click=\"hide(item, $event)\">{{ item.label }}</li>\n  </ul>\n</div>{% endraw %}\n\nThe javascript part looks like:\nvar vm = new Vue({\n    el: '#app',\n    data: {\n        items:[\n            {label:'a', show:true},\n            {label:'b', show:true},\n            {label:'c', show:false},\n            {label:'d', show:true}\n        ]\n    },\n    methods:{\n        hide: function(item, event){\n            item.show = false\n        }\n    }\n})\n\nFrom App to Component\nWe can transform the above code as reusable component with:\n{% raw %}Vue.component('list', {\n    template: '<ul><li v-for=\"item in items\" v-if=\"item.show\" v-on:click=\"hide(item, $event)\">{{item.label}}</li></ul>',\n    props: ['items'],\n    methods:{\n        hide: function(item, event){\n            item.show = false\n        }\n    }\n}){% endraw %}\n\nand using the new tag in our document:\n<div id=\"app\">\n  <list class=\"foo\" v-bind:items=\"mydata\"></list>\n</div>\n\nand bootstrapping it with this code:\nnew Vue({\n    el: '#app',\n    data: {\n        mydata:[\n            {label:'a', show:true},\n            {label:'b', show:true},\n            {label:'c', show:false},\n            {label:'d', show:true}\n        ]\n    }\n})\n\nSVG is markup as well\nWe can use Vue.js with the SVG tag just like any other HTML tag. Suppose the following custom tag:\n<div id=\"app\">\n  <mychart v-bind:dataset=\"mydata\"></mychart>\n</div>\n\nand the component definition:\nVue.component('mychart', {\n    template: '<svg><rect v-for=\"(item, index) in dataset\" width=\"20\" :x=\"index*21\" :height=\"item.v\" :y=\"50-item.v\"></rect></svg>',\n    props: ['dataset']\n})\n\nand the bootstrap code to get a little chart driven by Vue.js:\nnew Vue({\n    el: '#app',\n    data: {\n        mydata: [\n            {v:20},\n            {v:40},\n            {v:10},\n            {v:26}\n        ]\n    }\n})\n\nNote how to compute an attribute value with an expression. We need to use this special notation, :x instead the regular x \nNow, editing the array (adding, deleting, updating an object or property) will be reflected in the view automatically thanks to the reactive system of Vue.js.\nConclusion\nNot a true conclusion.I really hope to go deeper with Vue.js. I like it.\nAs usual, source file here for those who are interested.\n","frontmatter":"title: \"Vue.js: nice to meet you!\"\ndate: 2017-08-30 14:00:00 +0100\nsubtitle: 30th August, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, vue, svg, basic]"},{"attributes":{"title":"Shell Trick: Alias for common commands","date":"2017-08-31 14:00:00 +0100","subtitle":"31th August, 2017","style":"blue","categories":"Tutorials","tags":["tutorial","shell","terminal","tip"]},"body":"I use the shell (the Terminal on Mac Os X) every day. If you work with Git or Node.js like me, you cannot avoid it. It's simply part of the development stack. For that reason I've started to find a way to make shortcuts for some common shell commands I use every day.\nAt first, I've started with the weird way, using AppleScript to create an Applet just to invoke the Terminal application, filling and run a command for me, such as:\ntell application \"Terminal\"\n    activate\n    do script \"cd /Users/me/Projects/Repositories\"\nend tell\n\nActually It works but I've felt that was not the right way to do.\nAfter a bit of research I've learned the right one. The shell (bash) has the alias function that does precisely this sort of things.\nCreating an alias is straightforward, type this in the terminal:\nalias myshort=\"cd /Users/me/Projects/Repositories\"\n\nthen, invoke it with myshort hitting return. myshort can be anything you like.\nThis will work only on the current terminal window. Once you close it, the alias will be lost.To save the alias in a permanent way, you need to do a little bit more.\nYou need to edit an invisible file with the shell with this command:\nnano ~/.bash_profile\n\nWith nano you need to move with the arrows and reach the bottom of the file then paste the same line we used before to set up the alias. Use CTRL+O and CTRL+X to save and close nano.\nNow you should be able to use the alias on every terminal panels.\nSource here.\n","frontmatter":"title: \"Shell Trick: Alias for common commands\"\ndate: 2017-08-31 14:00:00 +0100\nsubtitle: 31th August, 2017\nstyle: blue\ncategories: Tutorials\ntags: [tutorial, shell, terminal, tip]"},{"attributes":{"title":"Vue.js: welcome CLI","date":"2017-09-05 14:00:00 +0100","subtitle":"5th September, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","vue","cli","basic","nuxt"]},"body":"In this article, I've documented my experience on getting started with Vue.js.\nThis time, I wanted to start using the official suggested setup, which supports the .vue file format and other very interesting features.\nThe setup configuration is quite complex, however, with the vue-cli (the Vue Command Line Interface) it's a no brainer task.\nAll you have to do is to install it on your system using node and npm with:\nnpm install -g vue-cli\n\nOnce you have the CLI installed, you can run vue commands (from the Terminal/Shell) in order to bootstrap empty projects ready to start with alongside powerful features such as ES6 transpiler, hot reloading, CSS scoped, just to mention a few.\nYou can choose between different scaffolding projects, based on complexity and thoroughness, my choice has been (with a proper projectName):\nvue init webpack-simple <projectName>\n\nAfter that, you need to install the modules and run the development session:\ncd <projectName>\nnpm install\nnpm run dev\n\nYour browser should run with a sample Vue app. If you edit some files you should see the change almost in real time.\nWith this setup, the src folder is the place for the source files. A minimal Vue app needs the following files in order to compile correctly:\n\nAn index.html in root folder (the default one is ok)\nA src/main.js file to bootstrap the application loading the components you want to use\nOne or more .vue files representing the Vue components.\n\nEach .vue file is a component that means:\n<template></template>\n\n<script></script>\n\n<style></style>\nA markup fragment, a script for business logic, a local style definition. That's all soo right.\nI've always struggled with the css and js folders full of files of the same type but not related in any ways to each other. The component structure resonates much more clear to me.\nCreating a component\nCreate and save a new .vue file (let's say MyComponent.vue) within the src folder. Add the three parts belonging to a component (at least the template, optionally with script and style):\n<template>\n  <div>\n    <h1>Thi is a component title</h1>\n  </div>\n</template>\nand use it from within any other .vue file with this code:\n<template>\n  <div>\n    <mycom />\n  </div>\n</template>\n\n\n<script>\nimport mycom from './MyComponent.vue'\n\nexport default {\n  components: {\n    mycom\n  }\n}\n</script>\nThis way the markup, the style and the logic will be rendered within the above main component.\nEven better\nSo far, Vue.js is very promising to me. Everything is crystal clear and I really love the way it can be learned incrementally. Then, by chance, I've discovered Nuxt. \nI've spent a lot of time over the last few years trying to figure out a way to develop front-end apps with happiness. I've even developed and released a couple of libraries (static-player and grunt-static-player) to develop web apps using dynamic injections with the possibility to bake it as static web app (for SEO and performance purposes). We currently use them for our web projects but, for the first time, I'm seriously considering to dismiss them in favor of Vue.js+Nuxt.\nAfter a first check, I do believe they are awesome and they will be a game changer. Try it with:\nvue init nuxt-community/starter-template <projectName>\n\nand follow the well-done documentation here.\nMore to come...\n","frontmatter":"title: \"Vue.js: welcome CLI\"\ndate: 2017-09-05 14:00:00 +0100\nsubtitle: 5th September, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, vue, cli, basic, nuxt]"},{"attributes":{"title":"Nuxt: getting started with it","date":"2017-09-06 14:00:00 +0100","subtitle":"6th September, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","nuxt","vue","basic","start"]},"body":"I'm very excited about Nuxt.I can't help but try it as soon as possible, so here I am.\nThis time, instead of using some magic command to start with a scaffolding, I went to a different route, starting from scratch setting up and working on a project with an empty folder as the starting point. \nSurprisingly, everything went smooth and clear to me.\nSo, let's have this journey together to create a universal Vue app with Nuxt. \nRun the Terminal and type:\nmkdir testProject\ncd testProject\n\nThen, set up a npm project with (filling the required fields):\nnpm init\n\nThen, install Nuxt:\nnpm install nuxt --save\n\nWe need to add the first script alias within the package.json file:\n\"scripts\": {\n    \"dev\": \"nuxt\"\n}\n\nNow we can run it to start a development session. Before it, we need to create a required folder: the pages folder within the project. Now run the command npm run dev and go with your browser to http://localhost:3000\nPages\nTo see something on screen, we need to create our first Vue component (such as index.vue) within the pages folder using this minimal template:\n<template>\n  <h1>Title</h1>\n</template>\n\nNow it's time to create a couple of components for our website, let's say a header and a footer so we can potentially reuse them on different pages.\nComponents\nLet's create a new folder named components placing in it a couple of Vue components, header.vue and footer.vue:\n<template>\n  <header>This is the header</header>\n</template>\n\n<style scoped>\n  header{\n    background-color: #ccc;\n  }\n</style>\n\nThis is an example for the header component. Now it's time to use them in out page:\n<template>\n  <div>\n    <Head />\n    <h1>Index</h1>\n  </div>\n</template>\n\n<script>\nimport Head from '~/components/header.vue'\n\nexport default{\n  components:{\n    Head\n  }\n}\n</script>\n\nAs you might notice, I've changed a bit in the markup because a single wrapper is required in a Vue template, thus a generic div has been added to wrap both the new component and the h1 tag as well.\nIn the javascript portion, you can see how to import a component in order to use it in the template markup.\nLayouts\nUsually, it's better to have some master layout that can be used by several pages. Nuxt allows defining different layouts in a layouts folder.\nA layout in Nuxt is a regular Vue component with the special tag nuxt. This is, for example, the default layout (default.vue):\n<template>\n  <div>\n    <nuxt />\n  </div>\n</template>\n\nYou can modify it as your convenience, adding style and logic to it. All the pages will get updated accordingly. The nuxt tag will be replaced with the page content (PS: sometimes the hot reloading doesn't work properly, just refresh the browser to see the updates).\nOn each page you can define which layout should be used with the property layout:\n<template>\n  <div>\n    <Head />\n    <h1>About</h1>\n  </div>\n</template>\n\n<script>\nexport default{\n  layout: 'other'\n}\n</script>\n\nStatic website\nSo far, we created a very simple website Vue-driven. This means a SPA (Single Page Application) that usually doesn't play nice with SEO, search engines, social crawlers, etc.\nTherefore, this is the main reason why I'm so excited about Nuxt. The ability to bake the whole web app as static website is terrific. You only need to use the command nuxt generate to do that. Remember to update the package.json with the new command:\n\"scripts\": {\n    \"dev\": \"nuxt\",\n    \"generate\": \"nuxt generate\"\n},\n\nnow you can run npm run generate in a new Terminal window (keep the dev process active).\nThis process will generate for each page a static version of it preserving all the logic and the functionalities of the SPA version. Neat, isn't it? \nSource files here.\n","frontmatter":"title: \"Nuxt: getting started with it\"\ndate: 2017-09-06 14:00:00 +0100\nsubtitle: 6th September, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, nuxt, vue, basic, start]"},{"attributes":{"title":"HTML import is dead","date":"2017-09-07 14:00:00 +0100","subtitle":"7th September, 2017","style":"red","cover":"cover.jpg","categories":"Opinions","tags":["opinion","thoughts","html","import","rip"]},"body":"Apparently, HTML import is dead. This is what I've learned from ShopTalkShow today.\nI've always been confident and happy about it because it has always been the promise to solve so many struggles in front-end development.\nI was wrong. It's not going to be a thing.\nThe browser support speaks by itself. Only Google Chrome natively support it. The other main vendors need a polyfill to work with.\n\nThis will affect also the Polymer Project, no doubt.\nWe need modularization\nModularization is the (only) way to survive in the complexity of the front end development world.\nI got that years ago, this is why I've built something to overcome this necessity here and here.\nRight now, I see in the .vue single-file-component mechanism the best scenario and this is why I'm so excited about. I know, it's not standard but I hope to see similar (or better) strategies by the W3C in the near future.\nIn the meantime, give me the time polishing my next Vue.js exploration.\n","frontmatter":"title: HTML import is dead\ndate: 2017-09-07 14:00:00 +0100\nsubtitle: 7th September, 2017\nstyle: red\ncover: cover.jpg\ncategories: Opinions\ntags: [opinion, thoughts, html, import, rip]"},{"attributes":{"title":"Safari is the new IE","date":"2017-09-08 14:00:00 +0100","subtitle":"8th September, 2017","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","css","scroll","safari","issue","tip"]},"body":"Working with CSS these days is way better than few years ago thanks to the new specs as well as the commitment towards W3C standards from browser vendors.\nUnfortunately, it's not perfect. Indeed, we're far from living in a perfect world.\nI can feel a pattern everytime I work with CSS and layout: Safari is the last step, the \"give me a break, eventually, I'll fix Safari issues\".\nHere an example of what I'm talking about. A simple layout with a scrollable container and a bunch of children that expand their height 100% the container size.\nOn Chrome and Firefox this works like a charm, but not on Safari (because it fails to calculate the height of the children elements according to the container size):\nSee the Pen Child height in flex parent by Fabio Franchino (@abusedmedia) on CodePen.\n\n\nSince it will be fixed at some point, here a screenshot taken with Safari 10.1.2 desktop version:\n\nAnd here a modified version to make it Safari compatible. You can see I had to add an additional wrapper and change the CSS making it less maintainable:\nSee the Pen Child height in flex parent Safari compatible by Fabio Franchino (@abusedmedia) on CodePen.\n\n\nAs it happened in the old days, testing against the less compliant browser is key to avoid big headaches during CSS development. You've been warned.\nUpdate: actually, using 100vh instead 100% as height value makes it to work as expected. Good to know, however, this doesn't change my feeling on Safari. Actually, 100vh is not a solution since Safari on iOS ignores its bottom-bar to calculate the height resulting in a wrong value.\nUpdate 2: apparently, the upcoming Safari 11 fixed the mentioned issue.\n","frontmatter":"title: Safari is the new IE\ndate: 2017-09-08 14:00:00 +0100\nsubtitle: 8th September, 2017\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, css, scroll, safari, issue, tip]"},{"attributes":{"title":"CSS Scroll Behavior","date":"2017-09-11 14:00:00 +0100","subtitle":"11th September, 2017","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","css","scroll","behavior","tip"]},"body":"Last day I've been notified by Google Chrome about its version update (61.x). I've quickly checked the release notes discovering the introduction of the CSS property scroll-behavior, a property I didn't know about.\nI've got interested and I've conducted a quick search about it.\nIt's a neat property that allows to smoothly animate the scroll position in a scollable box, instead of a straight jump, when using anchor links to target different position of the viewport.\nAdding transitions to state changes is not a cosmetic feature. The ability to let the user know what's going on in front of her after an action is key in usability realm.\nThe web is full of this kind of effect thanks to javascript that allows to add any kind of behavior to our interfaces. For that reason, the CSS scroll-behavior property is not going to impress anyone.\nWhat is amazing here (that is typically of the CSS in general) is the simplicity as well as the backward compatibility about adding this behavior.We don't have to reinvent the wheel with some library to incorporate a smooth scrolling behavior in our scollable panel, not anymore. And we don't have to worry about backward compatibility. If a browser doesn't support it, it will be ignored, making the page working without transition.\nSo far, it's compatible with the latest version of Chrome (61.x) and Firefox (55.x). Here a quick sketch that works on every browsers, with or without animation according to browser compatility.\nFeel free to click on the header sections, the next/prev and don't forget to try the last section as well:\nSee the Pen CSS Scroll Behavior by Fabio Franchino (@abusedmedia) on CodePen.\n\n\nTip: if you set the scrollable wrapper both with overflow:hidden; and scroll-behavior:smooth; you'll get and interesting effect. The user scroll is disabled (and so the scrollbars are hidden) but the behavior is still working as expected using the anchor links, even in browsers that don't support scroll-behavior property.\n","frontmatter":"title: CSS Scroll Behavior\ndate: 2017-09-11 14:00:00 +0100\nsubtitle: 11th September, 2017\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, css, scroll, behavior, tip]"},{"attributes":{"title":"How to run Node.js before Jekyll build","date":"2017-09-11 14:00:00 +0100","subtitle":"11th September, 2017","style":"blue","cover":"cover.jpg","categories":"Tutorials","tags":["tutorial","jekyll","nodejs","ruby","builder"]},"body":"I've recently added a tiny feature on my main website. In a section, it shows the number of words written and published on this blog. A fancy way to suggest that there is also a blog you can use to know more about me.\nThat number is growing on every article I publish but I don't want to build and update my website everytime a new article come out.\nTo solve this issue, I've added a tiny ajax request towards a little json file that is updated everytime the blog gets updated. I've built a little Node.js script that read all my blog posts generating the correct number, dumping a little json file ready to be committed.\nThe problem was that I have to run the Node script by hand and sometimes (read: always) I forgot to run it after a new post.\nMy blog is Jekyll-driven, I'm quite happy with it but I'm not a rubyist and this is why I've writter that script in Node.js. I'm much more confortable with it.\nAfter a bit of research, I found out a way to integrate the two with a Jekyll plugin that calls a Node.js script everytime I build my blog for local testing (I usually do it before publishing a new article).\nThe Jekyll plugin is something like:\nmodule RunNodeBefore\n  def self.process(site, payload)\n    return if @processed\n    system \"node build_index.js\" \n    @processed = true\n  end\nend\n\nJekyll::Hooks.register :site, :pre_render do |site, payload|\n  RunNodeBefore.process(site, payload)\nend\n\nThe relevant line is:\nsystem \"node build_index.js\"\n\nYuo need to put that file within the folder _plugins in your Jekyll root folder in order to call it automatically.\nAs I said, I'm not a rubyist, therefore, I've just copy/paste/adapted something I found somewhere. \nThe important thing is that it just work and I'm pretty sure I won't forget to update my words.json file anymore.\n","frontmatter":"title: How to run Node.js before Jekyll build\ndate: 2017-09-11 14:00:00 +0100\nsubtitle: 11th September, 2017\nstyle: blue\ncover: cover.jpg\ncategories: Tutorials\ntags: [tutorial, jekyll, nodejs, ruby, builder]"},{"attributes":{"title":"D3.js dispatch custom event with parameter","date":"2017-09-12 14:00:00 +0100","subtitle":"12th September, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","d3js","custom","event","dispatch","tip"]},"body":"This post just to remember me how something apparently easy might turn out so damn time consumer.\n\nMy goal: dispatch a custom event from a selection passing a custom parameter.\n\nLet's assume you have a selection:\nvar circles = d3.selectAll('circle')\n\nAnd you want to listen for a custom event:\ncircles.on('myevt', function(d, i){\n  console.log('myevt')\n})\n\nNow you want to dispatch that custom event, therefore, all the elements listening for it will be notified:\nd3.selectAll('circle').dispatch('myevt')\n\nThe console.log will print myevt as expected.\nNow the quest: how to pass a custom parameter?\nFirst, you have to learn how to catch the event parameter:\ncircles.on('myevt', function(d, i){\n  var evt = d3.event\n})\n\nThis will get you the event object with its standards properties.\nThen, you need to learn how to properly set the parameter in the dispatch function:\nd3.selectAll('circle').dispatch('myevt', {detail: {myCustomObject:'bla bla bla'} })\n\nPlease note that detail is not there by chance.It's the required field that can be populated with your custom object, therefore you can access to it with:\ncircles.on('myevt', function(d, i){\n  var myParams = d3.event.detail\n})\n\nFiuu… another little detail learned today.\nHere the working snippet if you're interested.\n","frontmatter":"title: D3.js dispatch custom event with parameter\ndate: 2017-09-12 14:00:00 +0100\nsubtitle: 12th September, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, d3js, custom, event, dispatch, tip]"},{"attributes":{"title":"Clear DNS cache","date":"2017-09-17 14:00:00 +0100","subtitle":"17th September, 2017","style":"blue","categories":"Tutorials","tags":["tutorial","dns","cache","resource"]},"body":"This might be a newbie tip.If you need to reach a website, by means of a domain name, and that domain has changed (or you modified) its DNS settings recently, you might be in trouble to reach that website with your browser.\nThis is because your computer is caching the DNS information, therefore, the browser is, most likely, trying to contact the wrong server.\nThe DNS is a server that converts the domain name you want to visit with an IP (Internet Protocol) which is a number, like a telephone number.\n\nTo fix that situation, you need to clear the DNS computer cache.\n\nThere is this thorough article that outlines precisely how to clear DNS cache of your computer, no matter the system you're running with.\nIn my case, OS X 10.10.x, I had to run this command from the terminal:\nsudo dscacheutil -flushcache\n\nNow I'm able to reach the right server again.\n","frontmatter":"title: Clear DNS cache\ndate: 2017-09-17 14:00:00 +0100\nsubtitle: 17th September, 2017\nstyle: blue\ncategories: Tutorials\ntags: [tutorial, dns, cache, resource]"},{"attributes":{"title":"Hexo, my new hero?","date":"2017-09-20 14:00:00 +0100","subtitle":"20th September, 2017","style":"blue","categories":"Tutorials","tags":["tutorial","static","site","generator","nodejs","hexo","jekyll"]},"body":"I've been interested in static site generators since a while.\nThe idea to get rid of wome server side scripting to \nMy blog is in Jekyll. It's a solid project and maybe the first popular generator. It does the job well, nevertheless, it shows its ages, I suppose. Developing a theme is not a nice experience. I think that in this context Jekyll shows its age, because you should develop a HTML/CSS theme and then split it in partials adding templating logic. That works quite well if the process stick to it, but the reality is different. A theme\nI gave a test on Vue, which is great, dead easy to setup, but too many magics, sometimes I feel to get lost in control. It's a good solution that might be interesting in some scenario, but it's not the general purpose solution I'm looking for.\nRecently, I've had the chance to test Hexo, a Node.js static site generator. It doesn't add anything special from functionality point of view but includes some interesting features that complete somewhat my requirements in order to develop with happiness, requirements outlined here:\n\npartial includes\ntemplating\ndata store (markdown and json)\npostprocess (minification, babel)\nextendible (with plugin)\nlive reload\n\nWhile almost all of those requirements are present in many static generators, Jekyll included, the last one is\nAside for blog development, Hexo is a good candidate for website development in general with \nHexo bonus points:\n\ntemplate engine agnostic\nsolid plugin architecture\nscripts features\nfast enough to make front-end development the right way\n\n","frontmatter":"title: Hexo, my new hero?\ndate: 2017-09-20 14:00:00 +0100\nsubtitle: 20th September, 2017\nstyle: blue\ncategories: Tutorials\ntags: [tutorial, static, site, generator, nodejs, hexo, jekyll]"},{"attributes":{"title":"Simple blog with Nuxt","date":"2017-09-20 14:00:00 +0100","subtitle":"20th September, 2017","style":"blue","cover":"cover.jpg","categories":"Tutorials","tags":["tutorial","vue","nuxt","spa","static","site","generator"]},"body":"Following my enthusiasm about Nuxt.js and Vue.js here another step.\nIn this post I'm going to outline the steps to build a simple blog using Nuxt.\nThis is a very basic blog with an index template and a post template using a json array as data source.\nThe notable differences from the previous tutorial are essentially two.\nLoading data\nThe index page is a template that will be populated by an array of objects that comes from an ajax request, and this is the Nuxt way to do that:\n<template>\n  <article>\n    <h1>Index</h1>\n    <div class=\"grid\">\n      <ul>\n        <li v-for=\"article in articles\" class=\"item\">\n          <nuxt-link :to=\"'/article/' + article.id\">{{ article.title }}</nuxt-link>\n        </li>\n      </ul>\n    </div>\n  </article>\n</template>\n\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  title: 'Hey there',\n  async asyncData () {\n    const {data} = await axios.get('https://jsonplaceholder.typicode.com/posts')\n    return {articles:data}\n  }\n}\n\n</script>\n\nYou can see the template will iterate over the article array to build the titles list.\nDynamic page\nSo far, every page we want to publish need to be created as .vue component in pages folder. In our case, we need to deal with an array of objects where each object should become an article. Nuxt provides a way to setup a .vue component that acts as master to generate multiple pages out of it.\nInside the pages folder, create another folder named article (or choose your own) and within it put a .vue component named _id.vue with the following source:\n<template>\n  <article>\n    <h1>{{title}}</h1>\n    <p>{{body}}</p>\n    <nuxt-link :to=\"'/'\">Back</nuxt-link>\n  </article>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  validate ({ params }) {\n    return !isNaN(+params.id)\n  },\n  async asyncData({params, error}){\n    const {data} = await axios.get(`https://jsonplaceholder.typicode.com/posts/${+params.id}`)\n    return data\n  }\n}\n\n</script>\n\nTest the shit\nUsing the usual npm run dev command, you can check in browser your progress. You can check the source on github and navigate the prototype here.\nGenerate the static pages\nTo generate the pages we need to run the command npm run generate. Before to run it we need to add the last detail in order to make it work properly. Nuxt needs a way to know which are the dynamic pages in order to create static files for them, also providing a way to define the filename for each.\nIn the nuxt.config.js file there'e the generate property that serves for that purpose:\ngenerate: {\n    routes () {\n      return axios.get('https://jsonplaceholder.typicode.com/posts')\n        .then((res) => {\n          var rts = []\n          res.data.forEach((d) => {\n            rts.push('/article/' + d.id)\n          })\n          return rts\n        })\n    }\n}\n\nIn this case, the id will be used for the filename but you are free to implement different logic.\nConclusion\nKeep in mind that this is a SPA (Single Page Application) with SEO (Search Engine Optimization) capability. Isn't that awesome?\nFurthermore, this is a POC (Proof Of Concept) just to learn Nuxt.js. There is also a Nuxt blog module for those who want something more thoroughful.\n","frontmatter":"title: Simple blog with Nuxt\ndate: 2017-09-20 14:00:00 +0100\nsubtitle: 20th September, 2017\nstyle: blue\ncover: cover.jpg\ncategories: Tutorials\ntags: [tutorial, vue, nuxt, spa, static, site, generator]"}]}