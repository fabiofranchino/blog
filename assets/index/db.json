{"posts":[{"attributes":{"title":"A hello world post","date":"2017-01-29 09:00:00 +0100","subtitle":"29th January, 2017","HN":13513098,"style":"red","categories":"Opinions","tags":["opinion","general","thoughts"]},"body":"First off, a confession.I've been always an internet lurker with some timid public contributions.   \nMost of what I've learned over my career is thanks to the web, a place where, among other things, people use their personal time to organize and share pieces of knowledge, often for free.\nI've always felt a bit guilty. That particular feeling in the gut when you owe something to someone.\nTo mitigate that feeling I did some attempts in the past, in the spirit of giving back, but nothing worth to mention.\nI've always told myself a lot of shit in order to keep the things as is.\nThe most common? That it's too late to begin, that it's something I should have done years ago.\nBullshit. You know what?\n\nIt's never too late to start something.\n\nLast year I thought, more than usual, about this issue and I've decided to take action.\nI've committed myself to write more.\nWriting is a wonderful tool to both organize thoughts and foster new perspectives.But writing alone is not enough. Publish is also an important aspect.\nSo, here's my Hello World (a blog is not a blog without a hello world post)\n\nYes, I'm starting a blog (and you should too).  \n\nI'm not sure which kind of blog is going to be.I suspect I'll write mostly about my professional life and things I'm interested in like design, computation, data and user experience alongside all the possible intersections in between.  \nIf this happens to be useful for someone, that's great.\nThe easiest part done! Now, let's keep the commitment up.\n","frontmatter":"title:  A hello world post\ndate:   2017-01-29 09:00:00 +0100\nsubtitle: 29th January, 2017\nHN: 13513098\nstyle: red\ncategories: Opinions\ntags: [opinion, general, thoughts]"},{"attributes":{"title":"Node.js, Canvas, d3.js: first date","date":"2017-02-12 09:00:00 +0100","subtitle":"12th February, 2017","HN":13627495,"style":"purple","categories":"Projects","tags":["project","nodejs","canvas","d3js"]},"body":"Last week I've released a silly product.  \nA tiny digital toy to peep my mouse in real time.As I said, a silly thing.\nIt's based on a little daemon that watches my computer cursor advertising online its current properties.The step to collect and archive all these information was very close, though.\nThe original daemon has been built using Node.js.It was a matter of a couple of hours forking it in order to save every single data-point on a CSV file.\nJust to be clear, I'm not a Node.js ninja.  \nI use it sometimes for quick data transformation or as a communication middleware.Maybe this is why a little voice at some point told me something weird. It sounded like:\n\nHey, dude! What about creating a bot or a daemon that fetch data somewhere producing automatically outcomes (i.e. visualizations)? Wouldn't it be amazing?\n\nThat intrigues me a ton.\nDaemon number two\nSince the 6th of February, a little daemon sits on my computer collecting all the mouse information available on daily basis. Coordinates, pixel color underneath it and timestamp. A data point for each recorded mouse position on a specific time.In total, we are talking about from 10k to 30k data points per day, give or take.\nI've waited one week before actively considering to visualise this data.\nUsually, d3.js in the browser would be the first choice for that kind of task. \nThis time that little voice continued to push me. \n\nI've realized I should have done differently, learning something new just to make something old.\n\nHello d3.js, I'm Node\nNode.js doesn't know anything about the browser DOM. The canvas or svg element are simply undefined objects in Node context.\nLuckily enough there's a canvas implementation for Node.js made by Automattic. It's pretty solid and powerful. There is also a DOM implementation but that is for another post.\nSo, after a bunch of hours I've set up a dirty .js script including d3.js, the Automattic canvas and some built-in node' libraries to handle file system operations.\nNow I have a (cleaner) script that can generate zillion of plot visualisations gathering datasets from a specific folder. Neat!\nNow, show time:\n\n\n\n\n\n\n\nIt's not easy to extract meaningful insights out of them. You might notice the unusual dots concentration on the left side. \nI do use Mac OS X and my dock is left-centered positioned.\nThe next iteration includes histograms related to quantitative occurrences on specific coordinate positions. The red one is the quantity of data points in the x-axis, the blue one in the y-axis:\n\n\n\n\n\n\n\nSo, what's the point?\nSticking always to something you know very well is not a good thing.Sometimes it's necessary to try out different stuff getting outside the comfort zone.\nIt's javascript after all, nevertheless I had to figure out a couple of things I wasn't aware.I could have built those visualisations in a more comfortable way.I'm happy I didn't do it.The time spent on learning new details, even though the actual basic results, has been rewarding.\nDo something new today, you'll feel better.\n","frontmatter":"title: \"Node.js, Canvas, d3.js: first date\"\ndate: 2017-02-12 09:00:00 +0100\nsubtitle: 12th February, 2017\nHN: 13627495\nstyle: purple\ncategories: Projects\ntags: [project, nodejs, canvas, d3js]"},{"attributes":{"title":"Scrub The Mouse","date":"2017-02-26 14:00:00 +0100","subtitle":"26th February, 2017","HN":13731477,"style":"purple","cover":"cover.gif","categories":"Projects","tags":["project","silly","selfinitiated","d3js","ui","webtoy"]},"body":"TL;DR: Go straight to the toy to explore my mouse activity.\n\nPreviously on...\nI've started this thing about first advertising and then collecting my mouse activity just for fun.To be fair, everything started only to be able to say:\n\nHey! I've demonized my computer!\n\nThis is going to continue for some weird reason, indeed this is another exploration step in the category of silly projects.\nWhat is about?\nIt's a simple interactive exploration tool for the sample data I'm referring above.Remember, we're in the silly land, therefore a silly tool is in order.\nThis web-ui-toy let you explore, visually and interactively, my mouse activity over time.It begins picking up a random day' dataset starting to show its whole journey.You can scrub the playhead to move back and forth like a vintage tape recorder, this is why the ui has this little touch of retro style.\nThere's an issue\nI need to explain the way how the samples are shown during the animation.The playhead is driven by the index position of the dataset array instead of the value of the current sample time.  \nThis is a stretch.  \nThe design decision is totally related to the time constraint I've set up for this project (few hours).  \nThis is definitely not an accurate representation because the time difference between samples is not honored from the visual point of view. If the mouse has not been used for a while, you won't see a stationary cursor for the same duration.\nd3.js to the rescue\nWhile it doesn't look like a typical d3.js outcome, it's almost fully based on it.  \nThis was intentional.  \nIt was the opportunity to test d3.js on a (tiny) digital project that is far from the usual representation models of the library. Achievement unlocked!\n\nd3.js is great for UI digital product as well.\n\nExperience the toy if you haven't already done.\nAnd tell me what you think (on @fabiofranchino) about. Very curious.\nHave a nice day!\n","frontmatter":"title: \"Scrub The Mouse\"\ndate: 2017-02-26 14:00:00 +0100\nsubtitle: 26th February, 2017\nHN: 13731477\nstyle: purple\ncover: cover.gif\ncategories: Projects\ntags: [project, silly, selfinitiated, d3js, ui, webtoy]"},{"attributes":{"title":"Browser-sync with Electron like a charm","date":"2017-03-02 14:00:00 +0100","subtitle":"2nd March, 2017","style":"blue","HN":13781142,"cover":"cover.png","categories":"Tutorials","tags":["tutorial","tips","electron","browsersync"]},"body":"I'm going to introduce a new post type in this blog.It's about little tips discovered after a bit of research and test with the aim to find them again, more easily, the next time.It might also be useful for others, though.\nTL;RL: To use Browser-sync with Electron use the recent localOnly option. It works like a charm.\n\n\n\nBrowser-sync\nIf you work in web design and development fields you already know how the process works:\n\nedit a chunk of HTML/CSS/JS\nsave the file\nreload the browser to see the effect\nrepeat\n\nYou should also know that those edits gonna be thousands in a project.  \nIf you already know that issue, there is a big chance you already know Browser-sync.\nBrowser-sync is a super-mega time saver tool that simply refreshes the browser for you any time you edit a file during a development session.Even only considering half of a second for each edit to reload manually the browser, we are talking about days of time wasted in a long time project.\n\nLet's shine the computer on repetitive tasks like that one\n\nIf you don't know Browser-sync yet, I can't stress enough, check it right now.\nElectron\nIf you're able to design and develop a web app for the browser you're able to release it as native app too.Electron makes that easy by removing all the hassles that don't belong to the web development field.\nBrowser-sync works beautifully with the browsers but not when using Electron.\nThe solution\nThere was an interesting discussion about the issue that brought to a new option specifically to work with Electron or similar environment.The localOnly flag allows supporting environments where dynamic hostnames are not required (ie: Electron)It was added in the 2.14.0 version of Browser-sync and can be used in the CLI like this:\nbrowser-sync start --localOnly --files './app'\nDon't forget to put the snippet of code provided by the shell into the .html files you're editing. The snippet is something like:\n<script async id=\"__bs_script__\" \nsrc=\"http://localhost:3000/\nbrowser-sync/\nbrowser-sync-client.js?v=2.18.8 \">\n</script>\nWith this setup, I can edit and see instant refresh of the Electron app on each little change. I can dev lightning fast on Electron projects too.\nCheers and carry a faster development on.\n","frontmatter":"title: Browser-sync with Electron like a charm\ndate: 2017-03-02 14:00:00 +0100\nsubtitle: 2nd March, 2017\nstyle: blue\nHN: 13781142\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, tips, electron, browsersync]"},{"attributes":{"title":"D3.js toward v4 - first round","date":"2017-03-03 14:00:00 +0100","subtitle":"3rd March, 2017","style":"blue","HN":null,"cover":"cover.png","categories":"Tutorials","tags":["tutorial","d3js","bigdive","tips"]},"body":"Bigdive, the training program to boost the technical skills to dive into the Big Data universe, turned to 6th edition and is coming very soon.Therefore, some updates are required in order to provide the most up-to-date and relevant learning experience to the next brave students.  \n\n\nIndeed, the Bigdive visualization track will adopt the latest version of D3.js, saying goodbye to the v3.\n\nD3.js, the popular javascript library that allows to represent data in graphical forms, got a major update, with the version 4, early the last summer.\nA major update usually means breaking changes in the API therefore a bit of learning is required in order to embrace it in your projects.\nThanks to a pretty solid API model, most of the version 3 syntax is perfectly compatible with version 4 of the library.\nMost which means that some won't work anymore due to library API changes.Some are subtle since they rely only on simple object renames.Addressing these changes are often a no-brainer but at the same time it takes time to internalize and learn them properly.\nBefore to start, it might be a good idea reading official resources that may introduce to the transition.There are two primer sources to get, to say the least, a glimpse of the extent of these changes.The official Changes in D3 4.0 documentation and a 103 skimmable slides from Irene Ros, just as a start.\nThis post is a first collection of tips from  real world examples to survive the transition easily, based on personal experience and after acknowledged the mentioned references.\nTransitions\nBasic transition set up is pretty similar in v4.This is a tipical transition in a d3.js selection that works both on v3 and v4 as well:\nsvg.select('circle')        \n    .attr('r', 40)\n    .transition()\n    .duration(2000)\n    .attr('r', 20)\nEasing\nEasing in transitions got a change since it doesn't accept literal string definition anymore. It needs an object reference of the desired curve that belong to the d3-ease package.The old way to define a easing curve was something like:\n.ease('buonce') \nnow the same can be accomplished with:\n.ease(d3.easeBounceInOut) \nEnd of transition callback\nIf you want to call a specific function on transition end, this was the line you could add in your chain:\n.each('end', endTransition)\nNow the same effect can be done with this slightly syntax change:\n.on('end', endTransition)\nDelay per transition in multiple transitions chain\nThis is a new feature, long awaited. Adding a delay on the latter transition would break the code in version 3.\nsvg.select('rect')\n        .attr('width', 100)\n        .attr('height', 0)\n\n    .transition()\n        .duration(1000)\n        .delay(500)\n        .style('fill', 'orange')\n        .attr('height', 100)\n\n    .transition()\n        .delay(500)\n        .attr('width', 200)\n        .style('fill', 'red')\n        .style('opacity', .5)\nNow, in version 4, delay per transition will be take into account properly.\nRemember that you can use the end transition callback for each transition in a single chain like:\nsvg.select('rect')\n        .attr('width', 100)\n        .attr('height', 0)\n\n    .transition()\n        .duration(1000)\n         .delay(500)\n        .style('fill', 'orange')\n    .on('end', endTransition1)\n\n    .transition()\n          .delay(500)\n         .style('fill', 'red')\n    .on('end', endTransition2)\nScales\nScale is one the most common object you may find in D3.js code.It's very common because it's very useful and ease to use.Due to the modularity nature of version 4, scale objects need to be used with a different name:\nLinear scale\nSetting up a scale object require usually this kind of code:\nvar scale = d3.scale.linear()\n  .domain([0, data.length-1])\n  .range([0, 100])\nNow you need to refer to the new object name:\nvar scale = d3.scaleLinear()\n  .domain([0, data.length-1])\n  .range([0, 100])\nColor scale\nWe used to use the built-in color scale for easy exploration when defining different categories in visual elements.This is the typical code:\nvar colors = d3.scale.category20()\nThis need to be changed a bit in version 4 as:\nvar colors = d3.scaleOrdinal( d3.schemeCategory20 )\nAxis\nThe axis object got small syntax changes as well. Assuming that scale and format variables are properly set:\nvar axis = d3.svg.axis()\n    .scale(scale)\n    .orient('right')\n    .ticks(5)\n    .tickSize(1)\n    .tickFormat(format)\nLike other objects, you need to refer to the new object name and no need anymore of the .orient() call since it's implicit in the object name:\nvar axis = d3.axisRight( scale )\n    .ticks(5)\n    .tickSize(1)\n    .tickFormat(format)\nPath generators\nGenerally, the svg generators have lost the svg package name path so instead of this syntax:\nvar arc = d3.svg.arc()\n    ...\n\nvar line = d3.svg.line()\n    ...\n\nvar area = d3.svg.area()\n    ...\nwe need to refer to each generator directly:\nvar arc = d3.arc()\n    ...\n\nvar line = d3.line()\n    ...\n\nvar area = d3.area()\n    ...\nthe additional setting method are usually the same of version 3.\nThat's all for now. \nThis is the first round of tips to take into account when writing d3.js code for version 4.\nPlease feel free to contact me if you have any questions, suggestions or follow me to get notified about next updates.\nHave a nice day.\n","frontmatter":"title: D3.js toward v4 - first round\ndate: 2017-03-03 14:00:00 +0100\nsubtitle: 3rd March, 2017\nstyle: blue\nHN:\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, d3js, bigdive, tips]"},{"attributes":{"title":"Leading a happy team","date":"2017-03-04 14:00:00 +0100","subtitle":"4th March, 2017","style":"red","categories":"Opinions","tags":["opinion","general","thoughts","team"]},"body":"A personal reminder\nThis is something to keep always in mind on daily basis, with no particular order, to lead a happy group of people that is supposed to do great things:\n\nTalk\nListen (carefully)\nInteract with them as a team\nGive feedback individually\nBe honest\nEngage them\nGive them independence and initiative\n\n","frontmatter":"title: Leading a happy team\ndate: 2017-03-04 14:00:00 +0100\nsubtitle: 4th March, 2017\nstyle: red\ncategories: Opinions\ntags: [opinion, general, thoughts, team]"},{"attributes":{"title":"Boost your d3.js learning kickoff","date":"2017-03-07 14:00:00 +0100","subtitle":"7th March, 2017","style":"red","cover":"cover.png","categories":"Tutorials","tags":["tutorial","d3js","bigdive","svg","tip"]},"body":"\nI've been involved in teaching d3.js and data visualisation in several classes since more than five years.Every time it's like the first time.It's always a challenge because every class is diverse and every student is unique. It's an ever learning process that is rewarding for this reason.\nSince the coming of the 6th edition of Bigdive, I've started to think about how to improve the learning experience of the dataviz track I'm going to provide in class. It's something I try to do every year.I've already penned [some words]({% post_url 2017-03-03-d3js_toward_v4 %}) related to some updates that are in the pipeline.\nThis time I'm going to focus on something more fundamental.\nIn any disciplines the hardest part is the beginning, the kick-off, the phase related to understand the basics.Out of my teaching experience, I've started to see patterns related to the difficulties the students usually face with.\nIt's like there was a missing step between the zero knowledge and the first line of code.Indeed, it's the lack of the DOM understanding.\nD3.js is a layer on top of the DOM technology. You cannot really understand the library without a good understanding of its foundations.\nThe DOM looks like a toy for experienced programmers and maybe this is the reason why it's common to find d3.js tutorials that take the DOM for granted. It shouldn't be like that. \nWhat I've seen in my experience is that the more the students have an understanding of HTML/SVG and CSS selection the faster is the route to be proficient with d3.js.This is why I do usually teach the basics of DOM during the first lesson.\nHaving said that, the best advice I can give to people wishing to learn d3.js is pretty straight:\n\nLearn the DOM first.\n\nThat means, start learning the foundation of the web platform and its technologies such as:\n\nHow the HTML works\nHow the SVG tag works, the primitive elements, the coordinate system, the scene graph\nHow CSS selection works\n\nEven with a brief understanding of the above topics, approaching the basic of D3.js become way easier by an order of magnitude.\nHappy learning!\n","frontmatter":"title: Boost your d3.js learning kickoff\ndate: 2017-03-07 14:00:00 +0100\nsubtitle: 7th March, 2017\nstyle: red\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, d3js, bigdive, svg, tip]"},{"attributes":{"title":"Scraping data in the kitchen","date":"2017-04-09 14:00:00 +0100","subtitle":"9th April, 2017","cover":"image_0.jpg","style":"purple","categories":"Projects","tags":["project","dataviz","d3js","scraping"]},"body":"TL;DR: A little journey on scraping nutrition data for visualization purpose.\n\nI like cooking.\nI can even humbly to say I’m pretty good at it. I like to be creative when in front of stove and pots, I usually try to experiment a lot using the combination of two of my senses as the main driver.\n\nUnfortunately, I’m not very educated in nutrition. I’m usually not spending my free time reading/browsing technical papers about it. I would like, though.\nI feel myself much more confident on working with data trying to understand it in order to transform into something visible, hopefully helping other people get something meaningful from.\nThis is why I was pretty excited the day I’ve stumbled upon on this Italian website, a collection of popular food items alongside details and percentages of main and secondary nutrient elements.\nI remember the first instinct I had that was to immediately take the data and start tinkering with it. I would have had the possibility to play with interesting data that it would have provided me some basic knowledge on the topic, a starting point for further elaborations.\nSadly, it’s a traditional website that exposes a database with a list of links, detail pages and relations with categories. It’s a website for human beings, machines were not taken into account. Indeed, there isn’t any public API available.\nI have to admit: later on, I would have discovered the original source (http://ndb.nal.usda.gov/) which is much more up-to-date, extensive and, most importantly, does provide an open and public API to interact with. Discovering that, it would have to avoid me to do what I did and this post wouldn’t have never existed.\nSince at that time I didn’t check the information page which would lead me to the original source, I went to the hard way:\n\nI want that data and I want it now so let’s scrape it.\n\nWeb scraping\nAccording to Wikipedia, web scraping is a computer software technique of extracting information from websites with a focus on the transformation of unstructured information, present on the web, into structured data that can be read by machines.\nWeb scraping is a subset of the more generic field data scraping, from its definition I would highlight this lovely sentence:\n\n“An ad hoc, inelegant technique, often used only as a last resort when no other mechanism for data interchange is available.”\n\nWriting code for the sole purpose of scraping usually means writing quick, ugly and inefficient code, code that is disposable by design.\nI’ve always been fascinated by this odd activity since it’s like it has given to us a special power to inspect any public source of information in order to rearrange them for further purposes.\nIn some way, it forces us to understand the underlying structure of the information that is in front of us.\nWeb scraping can be performed with a variety of tools and techniques. In my humble opinion, the best tool that suite this activity is the same that is used to gather and display the information: the browser.\nModern browsers allow to interact with web pages with powerful tools, the same tools that usually are used by developers.\nOf course, there are other, less technical, options out there that can be used to collect information into structured forms (import.io, webscraper.io to mention a few). I’m not here advocating any particular one, indeed, I’m suggesting to try the custom way, and the reasons why are:\n\nIt’s easier and faster (once you’re confident on writing simple javascript code)\nRely on a generic technical knowledge instead to a specific tool skill\nIt’s abstract (you are the designer of the system rules)\nIt’s scalable (you can use the browser for quick scrape or run a server for massive activities)\nYou’ll learn every time something new (that you could use in other situations)\nIt’s fun (or it could be)\n\nHands On!\nHere I’m just showing you the quickest way to set up a scraping session since everything you need is a browser (I bet you have one but I would suggest using Google Chrome), a bit of javascript understanding and the right amount of curiosity.\nFor a more in-depth, still basic, tutorial with a more structured system setup I would suggest reading this article from \"The Data Journalism Handbook\".\nSo, assuming you are using Google Chrome, this is what you need to do:\n\nopen in a new tab this URL which is our starting page\nopen the Chrome DevTool and the Console tab (Opt+⌘+I or Ctrl+Shift+I)\nopen in another tab this link in order to grab (copy into the clipboard) the full source of jQuery, then close it\nback to the first tab, paste the full code into the Console panel and hit ENTER\n\nNow that we have injected jQuery into the original page, we can exploit it for our purposes (yes, we could avoid jQuery at all by writing vanilla javascript but it’s easier and faster with it).\n\nFrom that page, we have the complete list of food items, each of them with its proper link to the details page.\nThe following tiny code snippet will be responsible for transforming that list into a structured javascript array with 1736 objects:\nLook the relation between the readable information and the data object\nNow with the complete list in memory, we can fetch the details page for each item in order to decorate each object with all the available properties.\nTo complete the tutorial check this repository out on Github, a better place to store stuff like that.\nThe same data object has been decorated with additional properties\nThis is a quick demonstration to show how to scrape any public website using few lines of javascript. I really hope I have given, at least, a bit of curiosity to try to scrape with your hands.\nIt was worth nothing whether I wouldn’t, at least, try to use that data for a potential visualization and see what might be come up.\nIt’s interesting to see that there is already something (may I call them insights?) that can potentially lead to some direction.\nExperience and enjoy the visualization\n\n","frontmatter":"title: Scraping data in the kitchen\ndate: 2017-04-09 14:00:00 +0100\nsubtitle: 9th April, 2017\ncover: image_0.jpg\nstyle: purple\ncategories: Projects\ntags: [project, dataviz, d3js, scraping]"},{"attributes":{"title":"Light a wood fire","date":"2017-04-11 14:00:00 +0100","subtitle":"11th April, 2017","style":"red","HN":null,"cover":"cover.jpg","categories":"Opinions","tags":["opinion","culture","thoughts"]},"body":"Imagine you in a forest.It's dark and getting colder.You're cold. You definitely need a fire.\n\nFirst thing, you have to find the right place where to set the fire, a safe place protected from the wind.\nThen, you need to walk and collect different size of pieces of wooden, sticks, twigs and dry leaves.\nYou have to accurately lay down, layer by layer, the leaves and a bit of paper, then the sticks and twigs, only at the end some bits of wooden.\nNow you can give the light at the very bottom in order to foster the flames.\nThis is the most important part of the process.You need to take care of it, continuouslyThe fire on that stage is very weak.It's helpless, like a child.\nThe fire is now stable and vivid.\nYou know that you need to feed from time to time otherwise it won't last.\nNow, and only now, the fire is warming you, it's rewarding you.\nMaking and maintaining a fire takes time, hard work and commitment.\nThe same happens with your project idea. It takes time and a lot of work, it takes passion and commitment. You'll get some rewards only after a while, after some investments, after some pains.\nAnd you know what?If you don't keep on your commitment continuously, the fire will definitely fade away at some point.\nOf course, there might be the possibility of some wet wood, nobody can tell 100% it will work, but most of the time you'll succeed if you don't give up.\nThe next time you got an idea for a project, think about lighting a fire in a wood. \nKeep it alive.\nImage courtesy: unsplash.com/@yabbath\n","frontmatter":"title: Light a wood fire\ndate: 2017-04-11 14:00:00 +0100\nsubtitle: 11th April, 2017\nstyle: red\nHN:\ncover: cover.jpg\ncategories: Opinions\ntags: [opinion, culture, thoughts]"},{"attributes":{"title":"Brute force layout","date":"2017-04-12 14:00:00 +0100","subtitle":"12th April, 2017","cover":"cover.jpg","style":"purple","categories":"Projects","tags":["project","grid","creative","coding","javascript"]},"body":"TL;DR: A visual exploration on grid system with creative coding\n\nI’ve been fascinated by complex structures since always and grid systems don’t make an exception.\nIn graphic design, a grid is a visual structure that usually serves as a framework on which a designer can organize graphic elements in a rational way.\n\nIt’s a tool, a functional tool with a technical purpose, invisible to the final user/reader, without any pretense to be aesthetic.\nThis might be the reason why one day I’ve started questioning myself on few different trajectories:\n\nWhat if we try to visualize it?\nCan it be aesthetically meaningful?\nHow can we conduct a visual exploration on complexity considering the rigidness nature of a grid system?\n\nA beautiful grid\nIt was a day in 2011; I was probably thinking about grid systems, beauty, complexity and the intersections in between. That day a tiny exploration has been born.\nThe seed was simple:\n\nlet’s try to generate a visual grid using a system of rules trying to explore complex visualizations within the graphic design field.\n\nOut of it, a simple set of tasks were outlined, defined as the follows:\n\nGiven a list of rectangles on canvas, pick one up randomly\nDivide it in 4 halved rectangles\nRepeat\nSometimes remove a rect picked up randomly\n\n\nThese simple rules can be manually executed producing simple results. The same simple rules are able to produce complex outcomes if iterated multiple times properly.\nThis ended up to be a good opportunity to exploit some computational strategies by means of software and code.\nProcessing to the rescue\nIn 2011 Processing was still my Swiss Army knife to solve creative and visual problems. The sketch is quite small and doesn’t rely on any other library.\nFull disclosure: the code has been written fast with the sole purpose of visual exploration. For that reason, it may appear rough and inelegant.\nYou can take a look at the whole sketch here.\n\nThe sketch was able to generate infinite permutations of the visual structure but I’ve saved only four variations eventually becoming the following manually fine-tuned graphic posters:\n\n\n\n\n\n\n\nI was pretty happy with the outcome and, at that time, the thing was done there.\nResuming in 2017\nNowadays my tool of choice for almost any kind of visual exploration relies on the web platform. For that reason, I’ve spent a bit of time porting the Processing sketch into plain javascript/jQuery code.\nAnd no, I didn’t use processing.js/p5.js on purpose, for several reasons that I’m not mentioning here.\nThe new sketch runs using an empty SVG as canvas and here you can see it in action:\n\n\nYou can tweak with this version on Codepen.\nIteration\nOne the best thing when you have a source code in front of you is the possibility to tweak it over and over getting different and unexpected results fast.\nIterating with code is a truly creative process that might be also very fun.\nActually, the algorithm runs by itself without any way to influence its process. Every iteration does initiate another iteration.\nChanging that part of the process might be interesting in terms of exploration possibilities; let’s do it using the mouse movement and position as driver:\n\n\nWe know that every single rect can be manipulated further. What about adding a further variation on a specific property? Here the next iteration adding one line of code to change the opacity, randomly:\n\n\nThe color is an important property to deal with. Again, assigning different fill color for each rectangle might be interesting in terms of creative outcome.\nInstead of putting a random color value which might end up to something not very pleasant, here a popular technique to get both a consistent color palette and proper assignment borrowing this information out of a picture:\n\n\nSo far, the rectangle has been the shape of choice but what about trying another one? Let's try with a circle alongside a bit of animation:\n\n\nAs you might start noticing, each variation is nothing more than an answer to a *\"what if?\"* asked to the previous sketch.\nI could continue forever but I’m stopping here.\nOr I could export these artworks onto Illustrator (or similar vector editors) in order to integrate them with other compositions.\n\nBonus tip: Export is just a matter of copying the generated source SVG code (copy element) and put it into an empty .svg file:\n\n\nDo you want to tweak and continue the exploration by your own? Check or download the source code from this repository and let me know if you reach something else.\nOpportunity\nI truly believe in the potential of software in aesthetic contexts. Writing quick code scripts to foster the creative process should be taught in every design schools.\nThere is a huge debate about whether designers should be able to code or not. My point is simple: learning how to code doesn’t hurt unless you’re pretending to become a developer in a short period of time.\nIt’s all about the purpose: start learning how to write a simple chunk of code today. Don’t judge it too soon. Worst case scenario? You’ve learned something new, something that is going to expand your way of thinking.\n\nThanks for reading and please share!\nFor quick feedbacks or see what’s next, follow me on Twitter. You can write me also via email.\nHave a nice day!\n\nThanks to Greta and Luca for reading drafts of this.\n","frontmatter":"title: Brute force layout\ndate: 2017-04-12 14:00:00 +0100\nsubtitle: 12th April, 2017\ncover: cover.jpg\nstyle: purple\ncategories: Projects\ntags: [project, grid, creative, coding, javascript]"},{"attributes":{"title":"Runkit is great","date":"2017-04-13 14:00:00 +0100","subtitle":"13th April, 2017","style":"blue","cover":"cover.jpg","categories":"Tutorials","tags":["tutorial","runkit","tips"]},"body":"\nSome friends and followers already know I'm a keen advocate of scraping online information especially when that information are not easily available in a machine readable format.   \nTo me, the default openness of the information, which is at the heart of the web, is the most important feature that allowed the internet to grow in an organic and unpredictable way.\n\n\nScraping information can be achieved with a lot of technologies across different difficult levels.I've already shown one of these ways in this article where the DevTool of the browser was the main tool.\nRunkit\nThis time I'm going to explore a tool I'd have liked to use time ago when it was named Tonicdev.\nI'm talking about Runkit, a node-based online notebook useful to test new ideas without setting up any server component.  \nThe novelty of Runkit comes from the Node.js ecosystem and this is one of the reasons why Node.js is awesome.\nOne of the possibilities of Runkit is that it allows exposing any javascript functions as public API endpoints writing something like:\nexports.endpoint = function(request, response) {\n    response.end(\"Hello world!\");\n}\nTherefore, this url will respond accordingly. Can you see the awesomeness?\nIn this experiment, I have to mention also a great library to manipulate the DOM. Cheerio.js, a fast, flexible, and lean implementation of core jQuery designed specifically for the server. A very good alternative to jsdom.\nMy Twitter feed\nHere my first experiment.\nI've exposed my Twitter feed scraped from the public website as a readable JSON response without dealing with the Twitter API (policy, limits, auth) at all. \nYou can see the live result by fetching this url.\nRunkit is great\nRunkit notebooks are public by default. You can fork other notebooks with ease.I suspect they'll build their business model at some point like NPM and similar services did in the past, giving paid private features, which is fine with me.\nRunkit is great not only for personal experiments but also in educational context as well.Indeed, it's an interesting tool for documentation and demonstration purposes.\nI'll continue to poke around it maybe developing some d3.js modules for it, which is quite accessible as you can see by this example.\n","frontmatter":"title: Runkit is great\ndate: 2017-04-13 14:00:00 +0100\nsubtitle: 13th April, 2017\nstyle: blue\ncover: cover.jpg\ncategories: Tutorials\ntags: [tutorial, runkit, tips]"},{"attributes":{"title":"So, still using jQuery?","date":"2017-04-14 14:00:00 +0100","subtitle":"14th April, 2017","style":"blue","cover":"cover.jpg","categories":"Opinions","tags":["opinion","jquery","thoughts"]},"body":"\nOne upon a time\nWhile some time ago I thought I'd never use jQuery anymore, right now I'm definitely suggesting to consider it for your projects. I do for mine.\nVanilla\nI know that the current browser DOM Api adoption can be considered pretty solid and widespread. \nI agree also with the public voices out there that teaches us about preferring vanilla javascript over bloating libraries.\nI know those libraries like jQuery, among the other things, try to keep legacy browsers into the game while it would be better for all to let them out.\nNo matter all those true facts are, there are some good reasons to continue to use jQuery for your final web stuff.\nIt depends\nLet's be clear. It depends on the project type.\nIf you are building a library then maybe you should try to avoid other libraries as much as possible. Avoiding them means to get rid of dependencies and future uncertainty about its functionality.\nIt also means you are not forcing your users to include thirty party code, not to mention the risk of conflicts between versions of the same library (the browser is still a huge global scope eventually).\nBut if you are building some user interface object like a website of something, well, I think you could afford about 29Kb of code to write less and cleaner code, introducing less potential bugs and issues, don't you?\njQuery is dead. Long live to jQuery\nTo be fair, the whole point about avoiding jQuery because its size is totally absurd, to say the least.\nHaving said that, my all present and next projects will include jQuery because of its benefits.\nI suggest doing the same. jQuery is still a live project with a vibrant community behind it. It's not going to fade away anytime soon.\nAnd you? Are you still using jQuery?\n","frontmatter":"title: So, still using jQuery?\ndate: 2017-04-14 14:00:00 +0100\nsubtitle: 14th April, 2017\nstyle: blue\ncover: cover.jpg\ncategories: Opinions\ntags: [opinion, jquery, thoughts]"},{"attributes":{"title":"Flex-ible Pattern Generator","date":"2017-04-22 14:00:00 +0100","subtitle":"22nd April, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","css","flex","layout","javascript"]},"body":"CSS looks easy at first glance but it's not.Mastering CSS requires a lot of practice.\nOne of the best ways to improve the tech skills is by pushing some pieces of them to some limits.Limits don't have to be hard nor complex.\nThis is an example of how to reach some interesting outcome trying to push a little piece of technology out of its usual context.\n\nCSS is the web technology used to style contents.Lately, CSS has become powerful enough to built complex layouts and animation effects.\n\nIndeed, the browser is pretty smart at computing complex layouts these days. \n\nSpeaking of which, we cannot avoid mentioning the CSS Flexbox module.\nPlaying with Flexbox and Javascript\nFlex specification contains multiple properties to allow defining precisely how each element has to behave within its parent and alongside its siblings.\nIn this case, it's all about exploiting the flex-grow property that is responsible for weight the size of each element based on the total weight of all siblings, a weight that will be converted in pixel dimension according to the available space of the parent container.\nWith the help of javascript, it's possible to play with it in order to generate a bunch of elements at run-time giving to each an arbitrary flex-grow value:\n\n\nYou can play with the source code in this pen.\nSource files on Github repo.\nHave a nice day.\n","frontmatter":"title: Flex-ible Pattern Generator\ndate: 2017-04-22 14:00:00 +0100\nsubtitle: 22nd April, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, css, flex, layout, javascript]"},{"attributes":{"title":"A-Frame + D3.js first steps","date":"2017-04-26 14:00:00 +0100","subtitle":"26th April, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","aframe","d3js","tips","vr"]},"body":"A-Frame, the javascript framework for building VR experiences using HTML custom tags, is intriguing, to say the least.It's actively supported by Mozilla and it promises to be easy to use and accessible even for non-experienced programmers.It's built on top of Three.js and other cool web technologies.\n\n\nVR is actually a big thing and it's something I wanted to put my hands on in quite some time. I'm also interested in exploring the potential integration with D3.js for data visualization purposes in VR experiences.  \nThus, here my first steps.\nThe 3D space\nEven though the minimal hello world example can be considered straightforward, we need to learn some fundamental concepts first in order to not getting lost quite early. Let's consider this chunk of HTML markup:\n<a-scene>\n    <a-box color=\"red\" width=\"2\" height=\"2\" position=\"0 2 -5\"></a-box>\n</a-scene>\nThe above code actually renders a box in the 3d scene.The key detail here is the position attribute which is responsible for positioning the box in three-dimensional space according to the XYZ axis.\nIf would happen to leave the default position (which is \"0 0 0\") you'll end up not seeing anything in the scene. That's because the position of the box coincides with the position of the user's eyes (as if you're within the box).\nNow, you might wonder: how to fill that attribute properly?\n\n\nThe position of each object follows the right-hand coordinate system.  \n\nMoving the box far from the user's eyes involves the Z axis using negative values, so \"0 0 -5\". We need also to move the box through the Y axis in order to take it off the ground.Here the visible (and draggable) box:\n\n\nRemember: when you get lost on positioning object in 3D space, use your right hand! It works.\nInteractivity\nA-Frame comes with an extra tag to support basic interaction events, the same events we currently use with mouse-driven applications.\nAdding the following tags within the main a-scene it will add an interactive pointer we can use for selection purposes:\n<a-camera>\n    <a-cursor></a-cursor>\n</a-camera>\nIt's our responsibility defining what should happen when the cursor 'touches' an object, using regular javascript event listeners:\nvar box = document.querySelector('a-box')\n\nbox.addEventListener('mouseenter', function () {\n    box.setAttribute('scale', {x: 2, y: 2, z: 2})\n})\n\nbox.addEventListener('mouseleave', function () {\n    box.setAttribute('scale', {x: 1, y: 1, z: 1})\n})\nDrag to move the camera view:\n\n\nAnimations\n3D objects can be animated using the Aframe animation engine that is controllable through the markup tag a-animation.\nEach a-animation tag is responsible for animating properties relative to its parent tag:\n<a-box width=\"2\" height=\"2\" rotation=\"0 0 0\" position=\"0 2 -5\">\n    <a-animation direction=\"alternate\" attribute=\"rotation\" to=\"0 360 360\" dur=\"4000\" repeat=\"5\" easing=\"linear\"></a-animation>\n</a-box>\nJavascript can be used to listen to some useful animation events:\nvar en = document.querySelector('#en')\n\nen.addEventListener('animationstart', function () {\n    console.log('animationstart')\n})\n\nen.addEventListener('animationend', function () {\n    console.log('animationend')\n})\n\n\n\n\nWelcome D3.js to the party\nD3.js loves the HTML markup, therefore the A-Frame markup can be manipulated by it.\nLet's try to write a typical D3.js script to bind an array of values to a list of HTML elements, this time using Aframe tags:\nd3.select('a-scene')\n    .selectAll('a-box')\n    .data(data)\n    .enter()\n    .append('a-box')\n    .attr('color', 'red')\n      .attr('width', 1)\n      .attr('height', function (d, i) {\n          return d\n    })\n      .attr('depth', 0.5)\nIn the following example, you can hover on each box to show (in a rudimentary way) its label. There is also a timid update mechanism with an interval timer:\n\n\nAdding animation at run-time\nI've tried, briefly, adding the a-animation tags at run-time without luck. At first instance, it looks they need to wait for some initialisation callback in order to append animation tags in the scene properly. I'll investigate on it, promise.\nIn the meantime, I found out an alternative contributed (A-Frame have a lot of contributed add-ons) library, aframe-animation-component, that overcome this limitation.\n\n\nWhat's next?\nI have to admit. Even only think about designing data visualizations in VR space is quite a silly exercise.  \n\nIt's a new interaction paradigm and a lot of experiments need to be conducted.\n\nDo you want to be part of this revolution?This summer there'll be an exciting workshop on the topic.Join us to this awesome learning experience in beautiful Lugano:\n\nFull source code here\n","frontmatter":"title: A-Frame + D3.js first steps\ndate: 2017-04-26 14:00:00 +0100\nsubtitle: 26th April, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, aframe, d3js, tips, vr]"},{"attributes":{"title":"3D pie chart, finally!","date":"2017-04-29 14:00:00 +0100","subtitle":"29th April, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","aframe","d3js","tips","vr"]},"body":"\nA promise is a promise.\n\n\nI did it. I've built the unspeakable, the unmentionable and possibly the worst piece of data visualisation ever invented by the human specie. \nMay I present my 3D pie chart in all its glory in VR world:\n\n\nA-Frame makes it ease thanks to the geometry properties of the cylinder. Here the markup to build a single slice:\n<a-entity geometry=\"primitive:cylinder;\n            radius:1;\n            thetaStart:0;\n            thetaLength:90;\n            height:1;\n            openEnded:false;\" \n          material=\"side: double; color:red;\" \n          rotation=\"70 20 0\" position=\"0 2 -4\"></a-entity>\nThe key here is the thetaStart and thetaLength allowing to define the start and the end angles of the slice.\nSince startAngle and endAngle are properties of the D3.js Pie layout, I can't help but built the 3D pie using D3.js and some fake data, so here it is ready to be included in your next Powerpoint VR presentation:\n\n\nHere the relevant portion of the script responsible for the task:\nd3.select('a-scene')\n    .selectAll('a-entity')\n    .data( pie(data) )\n    .enter()\n    .append('a-entity')\n    .attr('geometry', function (d, i) {\n      var a = d.startAngle * 180 / Math.PI\n      var b = (d.endAngle - d.startAngle) * 180 / Math.PI\n      return 'primitive:cylinder;radius:1;thetaStart:' + a + ';thetaLength:' + b + 'height:1;openEnded:false'\n    })\n    .attr('material', function (d, i) {\n      return 'side: double; color:' + colors(i) + ';'\n    })\nI'm still trying to figure out how to better use this kind of visualization in VR space (joking).\n\n\nI believe I've had enough of pies.If you've had too, join us this summer contributing to this awesome learning experience in Lugano:\n\nAs usual, full source code here\n","frontmatter":"title: 3D pie chart, finally!\ndate: 2017-04-29 14:00:00 +0100\nsubtitle: 29th April, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, aframe, d3js, tips, vr]"},{"attributes":{"title":"I love markdown","date":"2017-05-06 14:00:00 +0100","subtitle":"6th May, 2017","style":"red","cover":"logo.png","categories":"Opinions","tags":["opinion","markdown","thoughts"]},"body":"I really love markdown.\n\nI've started writing in this format long time ago, I suppose around 2010.It wasn't a love at first sight, though, but at that time I felt it was worth giving a try.I was right. Now I write in markdown everything.\nI'm writing in markdown even this piece of text. Indeed this post looks a bit meta.\n\n The question is: why?\n\nOnce you get confidence with it, it becomes very natural writing always in markdown, starting to structure the text since the beginning.\nBut again, why not using a regular notepad or any other software that allows to write and format text?\nHaving all my writing in markdown format basically means having the possibility to move chunks of text across different documents that are meant to be the source for different outputs.\nI'm actually using markdown document for personal notes, blog posts, presentations, github readme, and other stuff.\nIt's an efficient way to handle text contents in order to not be limited to a specific tool/output.The Finder of my Mac OS is the tool to find and organize the documents.Yes, you heard right, I don't rely to specific tools to organize these documents, I'm using the original and obvious software to do that, the Operative System GUI.Do you recall that it allows to create folders, move files, assign labels alongside a full-text search engine built-in?\nSo, happy writing, in markdown, of course.\n","frontmatter":"title: I love markdown\ndate: 2017-05-06 14:00:00 +0100\nsubtitle: 6th May, 2017\nstyle: red\ncover: logo.png\ncategories: Opinions\ntags: [opinion, markdown, thoughts]"},{"attributes":{"title":"Write Code in a jQuery Plugin","date":"2017-05-07 14:00:00 +0100","subtitle":"7th May, 2017","style":"red","cover":"modularity.jpg","categories":"Tutorials","tags":["tutorial","jquery","thoughts","plugin"]},"body":"I think that every developer at some point in his/her career starts wondering how to increase the modularity of his/her own code.It's in the DNA of any developer.Code can be used but most importantly can be re-used\n\nAs mentioned in this post, I do currently use jQuery for all my projects.For that reason I'm very interested in jQuery plugin development since it's a good way to develop chunks of code easy to use, re-use, test and debug.jQuery comes with its own modularity flavour that doesn't differ so much from common best practices of the javascript world.\nAlthough it might take more efforts writing something into a plugin, it worth every single extra minutes, indeed the benefits are big.\nThe bolierplate\nOf course there are tons of tutorials about this topic, I would suggest you to read at least the official one which is here.\nIf you want to grab something to start off right now, this is my minimal empty template to bootstrap a jQuery plugin:\n;(function($){\n\n    function init(){\n        var el = $(e)\n        // your wonderful code here\n    }\n\n    $.fn.newplugin = function(options) {\n\n        var defaults = {};\n        var settings = $.extend( {}, defaults, options );\n\n        return this.each(function(i, e){\n            init(e)\n        });\n    };\n\n})(jQuery)\nAs you can see all the internals are private that means they don't pollute the global scope.The only public variable is the plugin name which is attached straight to the jQuery global object.\nThe this.each statement allows to run the code on multiple targets, a common expectation by a jQuery plugin' user.\nConclusion\nEvery time you start to write a bunch of code to manipulate the DOM, please consider to put that code within a plugin, chances are to get benefits in terms of modularity and reliability.It can even happen to have some fun out of it.\n","frontmatter":"title: Write Code in a jQuery Plugin\ndate: 2017-05-07 14:00:00 +0100\nsubtitle: 7th May, 2017\nstyle: red\ncover: modularity.jpg\ncategories: Tutorials\ntags: [tutorial, jquery, thoughts, plugin]"},{"attributes":{"title":"Dump tweets from search","date":"2017-05-08 14:00:00 +0100","subtitle":"8th May, 2017","style":"blue","cover":"tweet.png","categories":"Tutorials","tags":["tutorial","scraping","twitter","nodejs"]},"body":"I do like the #May1Reboot initiative:\n\nThe campaign has been almost completely advertised through Twitter, therefore, I got curious to see some numbers related to people that used it to promote the initiative and their own relaunch as well.\nI've set up a little Node.js script to scrape tweets from a public search. I didn't use the API since the limitation of 7 days you can search back in the past.Instead, I've used the public search in the webapp to overcome this limitation.\nThe script, beside the collecting activity, saves each tweet in a comfortable json file in order to be used later on. \nThe script can also be run multiple times in order to update the json file with new tweets that happen to be included in the same search. This way you can run the script on different days without retrieving all the tweets since the beginning but only the fresh one.\nI'm planning to visualize the #May1Reboot tweets collection in some way in the coming weeks.I just thought this script might be useful to someone who needs to dump tweets based on a public search.\nSource code with instructions on this repo.\n","frontmatter":"title: Dump tweets from search\ndate: 2017-05-08 14:00:00 +0100\nsubtitle: 8th May, 2017\nstyle: blue\ncover: tweet.png\ncategories: Tutorials\ntags: [tutorial, scraping, twitter, nodejs]"},{"attributes":{"title":"D3.js v4 load with dsv and parseDate","date":"2017-05-10 14:00:00 +0100","subtitle":"10th May, 2017","style":"blue","cover":"d3-logo.png","categories":"Tutorials","tags":["tutorial","d3js","tips"]},"body":"The devil is in the details.\nThis is a quick post following the first article about migrating D3.js code from  version 3 to 4 with ease.\nThis time I'm focussing on two very little common functions in visualisation projects.\n\n\nLoading CSV with custom delimiter\nWith D3.js v3 this was the usual snippet to achieve this common task:\nvar dsv = d3.dsv(';')\ndsv('datasets.csv', function(error, data){\n    // do whatever you want with data\n})\nBy using the d3.dsv object it was possible to specify the custom delimiter then you were able to use it as a function to actually load the csv file with proper parser.\nWith the version 4 we need to set up the things a little bit different.\nThe parser is a standalone object that we have to use explicitly with the raw csv content.This means we need to rely to the more generic d3.text object to load the csv file without apply any default parser:\nd3.text('datasets.csv', function(error, raw){\n    var dsv = d3.dsvFormat(';')\n    var data = dsv.parse(raw)\n    // do whatever you want with data\n})\nParse Date and Time\nWith D3.js version 3 this was the tipical code to set up a date/time parser. We've usually relied to the .parse method of the d3.timeFormat object:\nvar parseDate = d3.timeFormat(\"%d.%m.%Y %H:%M\").parse;\ndata.forEach(function(d){\n    d.date = parseDate(d.data)\n})\nWith the version 4, the parser is a standalone object, therefore this is the little change you have to make in your code:\nvar parseDate = d3.timeParse(\"%d.%m.%Y %H:%M\");\n...\nThat's all for now.Happy coding and see the next time.\n","frontmatter":"title: D3.js v4 load with dsv and parseDate\ndate: 2017-05-10 14:00:00 +0100\nsubtitle: 10th May, 2017\nstyle: blue\ncover: d3-logo.png\ncategories: Tutorials\ntags: [tutorial, d3js, tips]"},{"attributes":{"title":"Runkit and D3.express","date":"2017-05-21 14:00:00 +0100","subtitle":"21th May, 2017","style":"orange","categories":"Review","tags":["review","tools","runkit","prototyping"]},"body":"On April 2017 at OpenVisConf Mike Bostock revealed D3.express, an online tool to make data exploration easier using D3.js or any other javascript libraries.\nD3.express is a notebook in the cloud built upon the following principles:\n\nReactivity\nVisibility\nReusability\nPortability\n\nSince D3.express is still in closed beta, I spent a bit of time trying to figure out whether Runkit can actually behave like D3.express or not.\nI'm not sure how D3.express has been implemented but the similarities with Runkit are obvious.\nI've started to dig more on Runkit in order to figure out how to create modules in order to ease composition within Runkit.\nThe first thing I've learned is how to import a Runkit notebook from another notebook:\nRunkit provides a proper internal path to refer to any notebook and it follows this pattern:\nvar myElement = require(\"@runkit/username/notebookname/branches/master\")\n\n// alternatively using the published version number\nvar myElement = require(\"@runkit/username/notebookname/1.0.0\")\nAnd this is how is possible to render HTML below a cell\nmodule.exports = function(text)\n{\n    return  \"<h1>\"+text+\"</h1>\";\n}\nI can't wait to put my hands on D3.express.\n","frontmatter":"title: Runkit and D3.express\ndate: 2017-05-21 14:00:00 +0100\nsubtitle: 21th May, 2017\nstyle: orange\ncategories: Review\ntags: [review, tools, runkit, prototyping]"},{"attributes":{"title":"I know RegEx (just a bit)","date":"2017-05-26 14:00:00 +0100","subtitle":"26th May, 2017","style":"blue","cover":"cover_regex.png","categories":"Tutorials","tags":["tutorial","regex","tips"]},"body":"If you consider the Regular Expression, RegEx to my friends, a language for aliens, well, nice to include you in my company!\n\nMaybe you already know that it basically allows to find sequences of characters by means of pattern rules. \nYou might even know that since everything on our computer can be represented with characters, they can help tons in terms of data manipulation and transformation.  \nNo matter your knowledge level on the topic, you've been always fascinated and curious about how it works and attracted by its potentials as well.\nLearn the shit\nA year ago I've taken action and started to learn the basics of regular expressions.I've used RegExOne, a great resource to learn regex with simple and incremental step by step tutorials with interactive exercises to test out what you've learned.\nI've followed all the lessons alongside all the exercises but, to be fair, I was far to be confident using it in real-world projects.\nDespite that, I've started to use it from time to time going to avoid some spaghetti code to solve little problems in projects.\nI'm still learning it. I'm not confident using it without some helper tool like Regexr, which, by the way, I strongly suggest to try it out.\nWatching a reg-ex still makes me cringe but I can write simple expressions without much troubles.\nRecently, I had to extract valid URLs out of an array of texts and the following snippet fit the task perfectly:\nvar url = mytext.match(/https?:\\/\\/\\S*/g)\nIt returns an array with all the valid URL found in a given text source. You can see it in action here.\nThe logic behind that dark piece of string is surprisingly easy to learn and could be outlined as the follows:\n\n\"/\" A regular expression starts always with the reserved char /\n\"http\" find any word that begins with http\n\"s?\" optionally includes words with or without the letter s after the first pattern rule (resulting with http or https) using the special char ?\n\":\" continue to find words that have also a semi-colon after the previous tokens \n\"//\" continue to find words that include also a // (since the / is a reserved char, we need to escape them with the back-slash, therefore, // means double slash) after the previous tokens\n\"\\S*\" finally, continue to select words that include also any alpha-numeric characters other than spaces (with the specific command \\S) and continue until the condition won't be met anymore\n\"/g\" close the expression with recursion, that means find multiple occurrence.\n\nIt's hard\nMastering regular expressions require dedication and don't happen quickly.\nI feel you. You are so scared by this just-a-little-bit opaque, but very efficient, tiny language.And yes, you can learn it.\n","frontmatter":"title: I know RegEx (just a bit)\ndate: 2017-05-26 14:00:00 +0100\nsubtitle: 26th May, 2017\nstyle: blue\ncover: cover_regex.png\ncategories: Tutorials\ntags: [tutorial, regex, tips]"},{"attributes":{"title":"Run a design studio these days","date":"2017-06-08 14:00:00 +0100","subtitle":"8th June, 2017","style":"red","cover":"ddd.jpg","categories":"Opinions","tags":["opinion","thoughts","studio","ddd"]},"body":"I was lucky enough to attend the Digital Design Days festival held a few days ago in Milan.We, as TODO, have been invited to give a speech there, together with an incredible line-up of design studios and designers.\n\nGiving a public talk is always, beside disseminating the studio brand, an opportunity to share thoughts trying to inspire people or, at least, to entertain them.\nBut participating in a festival is also an opportunity to listen and learn from others interesting people.DDD is no exception.In this post, I'd like to share briefly what I've learned out of it.\nThe program of the DDD festival, like any similar events, is full of talks and most of them overlap due to the compressed time frame of the programme.I've attended some of them (Epic, Moment Factory, Resn, Unit9 and Losiento, naming the most interesting), nevertheless that, I've seen some patterns and common principles related to running a design studio these days I'd like to share with you:\n\nAgile principles have been overcoming the boundaries, becoming part of the design process\nDesigners and developers work together since the project inception\nClients are included in the design process as much as possible and as early as possible as well\nPeople are people, not resources nor skills\nDigital prototyping is a common practice that is taking the place of static compositions (mockup/wireframe)\nDiversity of the team is key to succeed\nThe happiness of the people is another key of success\n\nThat said, if you are willing to open a design studio or you're running a design studio these days, stop thinking you're innovative by following the mentioned principles. The real truth is:\n\nThose principles are ordinary today\n\nYou heard right. You are not a visionary entrepreneur; you're a regular little business dude that try to make ends meet.\nI don't even want to think whether your studio doesn't follow, or worse doesn't even know, those principles as the foundation for a design studio culture. My condolences for your firm.\nSo, what's the point?If you want to feel innovative as an entrepreneur you have to look for something new, trying different, experimenting with something never seen yet.\nHappy research and all the best for your next innovative design studio!\n","frontmatter":"title: Run a design studio these days\ndate: 2017-06-08 14:00:00 +0100\nsubtitle: 8th June, 2017\nstyle: red\ncover: ddd.jpg\ncategories: Opinions\ntags: [opinion, thoughts, studio, ddd]"},{"attributes":{"title":"Save sequence of canvas frames to disk","date":"2017-06-16 14:00:00 +0100","subtitle":"16th June, 2017","style":"blue","categories":"Tutorials","tags":["tutorial","nodejs","canvas","filesystem"]},"body":"So, you've coded a great animation on a HTML5 canvas with javascript and you need to convert to a movie file?\nA quick and common way is pretty easy. Use a software to grab the display window. There are tons of this kind of tools, even the popular QuickTime player can do this kind of job. The only downside is about the framerate. Depending of your script, dropped frames won't be rendered in your final movie file. The final quality of your video won't be high.\nIf you need to preserve the framerate, perhaps because the final outcome needs to be a high quality movie or because your animation need to be integrated with other video footage, then maybe this script may help you.\nSaveFrame is a Node.js script that wait for a frame buffer in order to save it to disk. Your canvas animation will be saved frame by frame to disk. Then, you'll be able to compose a final movie using the generated file sequence with AfterEffect or even only (again) with QuickTime player.\nI've packed the script into a npm module for an easy setup and integration. \nIn short, to use SaveFrame within your project you have to run:\nnpm install saveframe\nthen, include in your main .html file the required libraries:\n<script src=\"node_modules/socket.io-client/dist/socket.io.js\"></script>\n<script src=\"node_modules/saveframe/client.js\"></script>\nand somewhere in your script:\n// configure the module\nSaveFrame.init(canvas)\n\n// send the frame to Node.js, do this for each new drawn frame\nSaveFrame.save()\nDone this, you need to run the server script specifing the folder you want to save the files:\nnode node_modules/saveframe/server.js <foldername>\nand run your main .html file on a local web server and you've done!\nFull documentation here.\nHappy grabbing!\n","frontmatter":"title: Save sequence of canvas frames to disk\ndate: 2017-06-16 14:00:00 +0100\nsubtitle: 16th June, 2017\nstyle: blue\ncategories: Tutorials\ntags: [tutorial, nodejs, canvas, filesystem]"},{"attributes":{"title":"LetterError","date":"2017-06-17 14:00:00 +0100","subtitle":"17th June, 2017","style":"purple","cover":"cover.jpg","categories":"Projects","tags":["project","legacy","creative","coding"]},"body":"During the periodic hard-drive cleaning, I've stumbled upon a tiny project dated back to 2007. \nIt is a python script (most probably a NodeBox script) that produces a generative typography artwork. \nIt's more an exploration than a real project but I'd like to keep in memory somewhere for posterity.\nHere some samples:\n\n\n\n\n\n\n\nand here the full script:\nsize(480, 680)\nbackground(1)\n\nmyString=\"An 'error' is a deviation from accuracy or correctness. A 'mistake' is an error caused by a fault: the fault being misjudgment, carelessness, or forgetfulness. Now, say that I run a stop sign because I was in a hurry, and wasn't concentrating, and the police stop me, that is a mistake. If, however, I try to park in an area with conflicting signs, and I get a ticket because I was incorrect on my interpretation of what the signs meant, that would be an error.\"\n\nfont(\"UniversLTStd-LightCn\")\n\npush()\nfill(0)\nfontsize(10)\nalign(RIGHT)\ntext(myString, 275, 20, width=200)\npop()\n\nalign(JUSTIFY)\nfont(\"UniversLTStd-ThinUltraCn\")\n\nlist = myString.split(\" \")\n\nc=0\n\nfor i in list:\n    c+=1\n    fill(0)\n    #rect(0, random(5, 30), 480, 10)\n    rotate(-.2+random(.4))\n    lineheight(random(5, 30))\n    fontsize(random(7, c/4))\n    text(myString, 0, 0, width=480)\n","frontmatter":"title: LetterError\ndate: 2017-06-17 14:00:00 +0100\nsubtitle: 17th June, 2017\nstyle: purple\ncover: cover.jpg\ncategories: Projects\ntags: [project, legacy, creative, coding]"},{"attributes":{"title":"ES6 and D3.js: sweet","date":"2017-07-01 14:00:00 +0100","subtitle":"1st July, 2017","style":"blue","categories":"Tutorials","tags":["tutorial","es6","d3js","tips"]},"body":"I'm learning javascript ES6 in small steps.\nSo far, I'm quite confident writing arrow functions and template strings.\nIn the D3.js world, even those little features bring huge benefits from code readability point of view.\n\n\nArrow function\nLet's consider a very common and frequent chunk of code in a D3.js script:\nd3.selectAll('rect')\n    .attr('x', function(d, i){\n        return d.x\n    })\nWith ES6 it can be reduced like this:\nd3.selectAll('rect')\n    .attr('x', d => d.x)\nCleaner, uh?\nArrow functions are not meant to be a full replacement of the original one. Due the different nature of them, there are situations where you have to use the old fashioned function statement, in particular when you need to use the this keyword, such as:\nd3.select('circle')\n    .on('clic', function(){\n        console.log( this )\n    })\nThe same using the arrow function won't work as expected since the scope of this will be different.\nString interpolation\nAnother common operation in D3.js script is the string interpolation, such as:\nd3.selectAll('g')\n    .attr('transform', function(d, i){\n        return 'translate(' + mapX(i) + ', 0)')\n    })\nAgain, with ES6 things get compact and readable:\nd3.selectAll('g')\n    .attr('transform', function(d, i){\n        return `translate(${mapX(i)}, 0)`\n    })\nAnd even better with the arrow function:\nd3.selectAll('g')\n    .attr('transform', (d, i) => `translate(${mapX(i)}, 0)`)\nES6 is great and it deserves some time to embrace it in the daily work.To be honest, I'm still using var to declare a variable instead of let or const, though.I guess I need to commit myself more on it.\n","frontmatter":"title: \"ES6 and D3.js: sweet\"\ndate: 2017-07-01 14:00:00 +0100\nsubtitle: 1st July, 2017\nstyle: blue\ncategories: Tutorials\ntags: [tutorial, es6, d3js, tips]"},{"attributes":{"title":"Non-constant axis in small multiple charts with D3.js","date":"2017-07-27 14:00:00 +0100","subtitle":"27th July, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","d3js","tips","smallmultiple"]},"body":"\nI like to break the rules sometimes.\n\n\nSmall multiple in data visualization is a way to represent and compare variations of a property in several categories at once by means of an array of small and pretty similar charts that use the same scale and axes.\n\n\nThe *\"same scale and axes\"* is mandatory in this context otherwise the comparison cannot be done.\nIn D3.js context, creating multiple charts out of a single dataset is a matter of using the popular data-join mechanism that is at the heart of the library concept.\nConsidering a dataset structured as an array of objects with each object that contains an array of data points, a small multiple chart like this one:\n\ncan be built using D3.js with this working script:\nvar num = 10\nvar dataset = d3.range(4).map((d, i) => {\n    return {key: i, values:d3.range(num).map(c => Math.random()*(i+1))}\n})\n\nvar groups = d3.select('svg')\n    .selectAll('g')\n    .data(dataset)\n    .enter()\n    .append('g')\n    .attr('transform', (d, i) => `translate(${i*100} ,0)`)\n\nvar mapX = d3.scaleLinear()\n    .domain([0, num-1])\n    .range([0, 80])\n\nvar min = d3.min(dataset, d => d3.min(d.values, c => c))\nvar max = d3.max(dataset, d => d3.max(d.values, c => c))\n\nvar mapY = d3.scaleLinear()\n    .domain([max, min])\n    .range([0, 100])\n\nvar lineGen = d3.line()\n    .x((d, i) => mapX(i))\n    .y(d => mapY(d))\n\ngroups.append('path')\n    .attr('d', d => lineGen(d.values))\n    .style('fill', 'none')\n    .style('stroke', 'red')\n\nvar axis = d3.axisRight(mapY)\n    .ticks(10)\n\ngroups.append('g')\n    .classed('ax', true)\n    .call(axis)\nThis is the basic in small multiple representation: an array of little charts, one property' variation, same scale and axes.\nBut, one of the nice thing working with D3.js is that you can do also silly stuff breaking some conventions just because you can and for fun.That's why a few days ago I've questioned myself about how to build a small multiple representation with different axes per single chart.\nI had to figure out a bit the way to go because, looking the above script, the .call(axis) method does pretty all the magic. Instead of using the same scale object and axis object, which is easier, my goal was to compute a different scale (and then a different axis) for each little chart using the data points array of each object.\nBasically, this is what I wanted to achieve (remember, no comparison can be done here):\n\nand this is what I've changed in the previous script related to the path generation, basically, I've moved the scale/line configs within the d attribute setter:\ngroups.append('path')\n    .attr('d', d => {\n        var min = d3.min(d.values, d => d)\n        var max = d3.max(d.values, d => d)\n\n        var mapY = d3.scaleLinear()\n            .domain([max, min])\n            .range([0, 100])\n\n        var lineGen = d3.line()\n            .x((d, i) => mapX(i))\n            .y(d => mapY(d))\n\n        return lineGen(d.values)\n    })\nand the part related to the axis, again, I've moved the configs within the .each function in order to initialise an ad-hoc axis object ready to be called at the end of the statement:\ngroups.append('g')\n    .classed('ax', true)\n    .each(function(d, i){\n\n        var min = d3.min(d.values, d => d)\n        var max = d3.max(d.values, d => d)\n\n        var mapY = d3.scaleLinear()\n            .domain([max, min])\n            .range([0, 100])\n\n        var axis = d3.axisRight(mapY)\n            .ticks(10)\n\n        d3.select(this)\n            .call(axis)\n    })\nThat's sound silly, uh? \n\nMore twisted code to achieve something that is basically wrong from the design perspective. \n\nThe reward is the learning benefit out of this.I really do not know whether I'll use this little technique in the near future, but I'm happy to be able to handle it.That is the very good part about working with a library such as D3.js that gives you the power to break the rules somethimes.\nHappy coding! \n","frontmatter":"title: Non-constant axis in small multiple charts with D3.js\ndate: 2017-07-27 14:00:00 +0100\nsubtitle: 27th July, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, d3js, tips, smallmultiple]"},{"attributes":{"title":"Big Dive Visualized!","date":"2017-07-31 14:00:00 +0100","subtitle":"31th July, 2017","style":"purple","cover":"cover.png","categories":"Projects","tags":["project","dataviz","d3js","bigdive","process"]},"body":"Big Dive 6, the training program to learn the skills to dive into Big Data, is over. You can read a brief story here.\n\nThis year we've chosen to collect  the participant's information in order to create a small visualisation, an interactive report to have a glimpse of the course through a different angle. I've been in charge to design and develop the visualization with great freedom (thanks to its organizers).I have to say it, I had a good time building it.\nThe Process\nAs usual, the final outcome doesn't look like the initial idea. The design process leads to different paths and the following design choices are quite difficult to outline at the beginning. That's the beauty of the design: you kick-off an idea; you follow a process; you end up with something different.\nTo give a glimpse of what I'm talking about, here a bunch of screenshots I saved during some checkpoint of the process.\nThe initial iterations are usually the most divergent. It's the time to discover the path:\n\n\n\n\n\n\n\nThis second round shows an established path with the beginning of the fine-tuning phase:\n\n\n\n\n\n\n\nThe last iterations show how many little changes can be done. To be fair, I'd go forever, there's no limit to perfection:\n\n\n\n\n\n\n\nThis is why is so important to stop at some point and ship it!\nConclusion\nIs it over? I don't think so. I suspect I'll consider some updates for the next edition of Big Dive. \nNow you can experience the visualization.Source code available here.\n","frontmatter":"title: Big Dive Visualized!\ndate: 2017-07-31 14:00:00 +0100\nsubtitle: 31th July, 2017\nstyle: purple\ncover: cover.png\ncategories: Projects\ntags: [project, dataviz, d3js, bigdive, process]"},{"attributes":{"title":"Going towards reusable D3.js charts","date":"2017-08-02 14:00:00 +0100","subtitle":"2nd August, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","d3js","reusable","proof","boilerplate"]},"body":"\nReusable code in programming field has been always a chimera.\n\nOver the last few days, I've thought quite often about making reusable D3.js components. \nI perfectly know that writing code that should be also reusable basically means ending up to build some yet-another-library.  \nIn the D3.js context, that would mean to reach to some yet-another-library built on top of D3.js.\n\nI don't want to build a library. My premises are a little bit different.What I'm thinking is something that is easy to use, easy to extend, easy to combine and all that shit without putting too much complexity in it, simple ah? \n\n\nI did some research and studies on some existing thirty part libraries without ending up to any brilliant idea.Then, I've stumbled upon (again, since I've read it a few years ago) this evergreen article from the maintainer of D3.js, Mike Bostock.\nI've enjoyed it as it was the first time but now the last paragraph clicked something in me.Building a reusable component requires making decisions about the level of configuration you want to expose and at the same time the limits the component will force the user to.\nSo, what about building a collection of components ready to be used but at the same time ready to be modified, forgetting the benefit of the incremental improvements a library can provide?.\nA more elaborate statement might be rephrased as: a reusable component is something can be used very fast with few configuration and few functionalities. If I need further features I can modify the source code. That means, no black-box library easy to update but more a boilerplate of components to start with.\nThe mentioned article outline also some good advice to make D3.js plugins using the D3-way.Basically, it's how the d3-axis object works.\nProof Of Concept\nEverything starts with an immediately-invoked-function-expression (IIFE) in order to encapsulate the component in a private context alongside with some of the Mike article tips, more precisely, the selection.each statement to preserve the D3.js selection chain:\n;(function () {\n    window.myViz = function init () {\n\n        // the build/update function, where all the magic should happen\n        function build (selection) {\n            selection.each(function (data, index) {\n                var element = d3.select(this)\n                console.log(data)\n            })\n        }\n\n        return build\n    }\n})()\nThis module can be used in common D3.js script such as:\nvar vis = myViz()\n\nvar svg = d3.select('svg')\n    .datum([])\n    .call(vis)    \n\nd3.select('body').on('click', function(){\n    svg.call(vis)\n})\nAs you might notice, in the build function we can use both the selection and the data bound to it to handle the chart creation and update as well.\nWhen talking about reusable scripts means also having some configs, therefore, here my version of some default:\n;(function () {\n    window.myViz = function init () {\n        build.width = 300\n         build.height = 200\n    ....\nand a way to override them from outside:\nbuild.config = function (options) {\n    for (var k in options) {\n        if (build.hasOwnProperty(k)) {\n            build[k] = options[k]\n        }\n    }\n    return build\n}\nIn this way the object can be configured as the following code:\nvar vis = myViz()\n    .config({width:1000})\nNow it's time to build something in the build function. Adding the following chunk of code within the function we're able to add a text label to our chart:\nelement.append('text')\n    .text('My chart: ' + build.width + ' ' + data.length)\n    .attr('y', build.height / 2)\n    .attr('x', build.width / 2)\n    .style('text-anchor', 'middle')\nThat last code arose immediately an issue. For each build call, a new text element will be generated. This is not our goal. We want to append a text element only during the first function call. The following calls should reuse the same text element updating the content or the position.\nI've spent a bit of time figuring out the best solution, an elegant solution to distinguish the first time call from the following calls.\nInitially, I set a flag, an 'inited' status using a class name in the container. That doesn't ring right to me. I've continued to dig trying to find a better way. Finally, I started to peep in the source code of D3.js, specifically the d3-axis source code trying to find out how it has been implemented a similar scenario.\nIt turned out a clever trick to check if an element is present or not in order to route different business logic. It relies actually on the data-join mechanism of D3.js, what else?\nHere the code:\n// data binding with a fake dataset\nvar label = element.selectAll('.myLabel')\n    .data([null])\n\n// enter selection, only if the element is not present\nvar enterLabel = label.enter()\n    .append('text')\n    .attr('y', build.height / 2)\n    .attr('x', build.width / 2)\n    .style('text-anchor', 'middle')\n    .classed('myLabel', true)\n\n// update\nlabel.merge(enterLabel).text('Your chart: ' + build.width + ' ' + data.length)\nKudos to it. A very elegant and pure-D3-way solution to handle the different phase of the component. The above code will work nicely even, for some reason, the element will be removed.\nConclusion\nSo far, I'm quite happy of this proof-of-concept. I'll try to build a real-world component following this principles in order to test, whether or not, it can be a viable solution to develop a collection of components that can be both useable as-is and editable further or even just to learn some technique out of them.\nYou can find the full source code of this proof-of-concept here.\n","frontmatter":"title: Going towards reusable D3.js charts\ndate: 2017-08-02 14:00:00 +0100\nsubtitle: 2nd August, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, d3js, reusable, proof, boilerplate]"},{"attributes":{"title":"Towards a better chart template","date":"2017-08-06 14:00:00 +0100","subtitle":"6th August, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","d3js","reusable","proof","boilerplate"]},"body":"In the last article, I've started the initial proof-of-concept regarding building reusable D3.js components. I've ended up to an empty boilerplate following the suggestions provided by Mike Bostock in his Towards Reusable Charts article.\nI've spent a bit of time trying to use these principles in a real-world component, for instance, a basic line chart. Most of the initial ideas were preserved while some other have not.\nI've abandoned the generic public method config() to override public properties preferring a more explicit method per property to edit every single public setting.\nBasically, instead of:\nvis.config({width:300, height:300})\nnow it should be something more D3-way like:\nvis.width(300)\n    .height(300)\nusing the implementation of a setter/getter such as:\nbuild.width = function (value) {\n    if (!arguments.length) return width\n    width = value\n    return build\n}\nThis way each public config is also a getter method:\nvar h = vis.height()\nA padding object has been added to calculate the useful area for the chart that is always required: \nvar padding = {top: 25, bottom: 25, left: 25, right: 25}\n...\n// useful area\nvar innerw = width - padding.left - padding.right\nvar innerh = height - padding.top - padding.bottom\nA working example\nI'm quite happy of the implementation so far and here the result of the component using the following initialising code:\n<svg width=\"600\" height=\"300\"></svg>\n<script>\nvar vis = myViz().width(400).height(400)\nvar dataset = d3.range(10).map(d => Math.random())\nvar svg = d3.select('svg')\n    .datum(dataset)\n    .call(vis)\n</script>\n\nAs you might notice yourself, this template contains both the Scale and the Axis configurations as well. I'm not totally sure whether it is ok or not.Scales and axis usually need to be configured according to the nature of the dataset but in this template there are some assumptions about them, that is why my doubts.\nI don't want to take any structural decision right now. It'd be too soon. I'm going to continue to evolve this proof-of-concept by means of further real-world components, eventually finding the right solution (hopefully).\nYou can check the complete source code at this stage here.\n","frontmatter":"title: Towards a better chart template\ndate: 2017-08-06 14:00:00 +0100\nsubtitle: 6th August, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, d3js, reusable, proof, boilerplate]"},{"attributes":{"title":"Size matters","date":"2017-08-07 14:00:00 +0100","subtitle":"7th August, 2017","style":"blue","cover":"06.gif","categories":"Tutorials","tags":["tutorial","d3js","reusable","proof","layout","flex","svg"]},"body":"Following the initial exploration on design and build a reusable D3.js chart, some questions arose about having multiple components on the same page and how they can play nicely together.\nThe browser is pretty smart at computing layout these days, therefore, I wanted to exploit it as much as possible instead implementing some logic in order to place and resize element on a given canvas.\nI've conducted a quick test about how to use CSS, Flexbox and SVG element alongside my initial chart template in order to get a fluid container responsible to resize all the components.\nUsing the width and height\nThe first attempt was obvious. Given a quick Flexbox layout, I've put a bunch of SVG tag with proper size dimensions set, such as the following markup:\n<div class=\"row\">\n  <div class=\"one\">\n    <svg width=\"1000\" height=\"200\"></svg>\n  </div>\n</div>\n\n<div class=\"row\">\n  <div class=\"one\">\n    <svg width=\"200\" height=\"200\"></svg>\n  </div>\n  <div class=\"two\">\n    <svg width=\"400\" height=\"200\"></svg>\n  </div>\n</div>\nThey are all consistent between them but the overall page layout doesn't work:\n\nUsing width:100%\nUsing the same markup but assigning to all the SVG tags the width:100% via CSS can help a bit but with other issues to solve:\n\nAdding the viewBox\nAdding to each SVG tag a proper viewBox attribute:\n<div class=\"row\">\n  <div class=\"one\">\n    <svg width=\"1000\" height=\"200\" viewBox=\"0 0 1000 200\"></svg>\n  </div>\n</div>\nIt does mitigate the above issues, still not perfect in some conditions, though:\n\nRemoving the width and height\nRemoving the width/height attributes from the SVG markup leaving only the viewBox seems to solve most of the issues. Now all the components fit the available space, preserving the aspect-ratio of each one. There's still some issue here: all the component' elements get resized in a different way, thus the overall consistency get lost (look at the size of the axis or the padding of each chart). Another problem is the exaggerated size of some elements in some situation (font-size too big of too small) because the SVG get resized proportionally no matter the window size:\n\nCompute the viewBox according to the window size\nSince the different sizes of the chart elements were caused by the different viewBox present on the same page, I've tried to re-compute it based on the window size. This technique solved some issues but still, it does remain difficult to set them properly without spending a lot of time making this calculation precise, not to mention that any layout change does invalidate all the mentioned setting.\nThis is the code to re-calculate the viewBox. I've used a custom HTML attribute, ratio, to keep the reference of the desired aspect-ration of each SVG element:\n<div class=\"row\">\n  <div class=\"one\">\n    <svg ratio=\"5 1\"></svg>\n  </div>\n</div>\nwhere ratio=\"5 1\" means that width should be five times more that height, and here the code to read the ratio to compute the viewBox on each widow resize event:\nd3.select(window).on('resize', () => {\n  onResize()\n}).dispatch('resize')\n\nfunction onResize(){\n  var multiplier = window.innerWidth / 2 // arbitrary calculation here\n  d3.selectAll('svg').each(function() {\n    var wh = d3.select(this).attr('ratio').split(' ')\n    var w = parseInt(wh[0] * multiplier)\n    var h = parseInt(wh[1] * multiplier)\n    d3.select(this).attr('viewBox', '0 0 ' + w + ' ' + h)\n  })\n  svg.each(function() {\n    var wh = d3.select(this).attr('viewBox').split(' ')\n    var w = wh[2]\n    var h = wh[3]\n    d3.select(this).call(vis.width(w).height(h))\n  })\n}\nHere you can see the internal elements size are constant (font-size, padding) no matter the size of the SVG tag. The proportions are preserved. Still, it's difficult to have a consistent element size across different components (same font-size and padding between different SVG charts):\n\nFinally, the solution\nThe working solution has been to use the ratio together with the width of the computed wrapper that contains the SVG tag. This way we are able to calculate a proper viewBox for each SVG tag according to the given ratio without having to do hard math in order to have consistency across different components and, most importantly, it works out of the box:\n\nThe new markup changed a bit:\n<div class=\"row\">\n  <div class=\"one\">\n    <svg fit ratio=\"5 1\"></svg>\n  </div>\n</div>\nand here the script that will make all the calculation automatically:\nd3.select(window).on('resize', () => {\n  onResize()\n}).dispatch('resize')\n\nfunction onResize(){\n  d3.selectAll('[fit]').each(function() {\n    var ratio = d3.select(this).attr('ratio')\n    var factor = (ratio) ? (ratio.split(' ')[1] / ratio.split(' ')[0]) : 1\n    var computedW = parseInt(window.getComputedStyle(this).width.split('px')[0])\n    var attrH = d3.select(this).attr('height')\n    var calcH = (attrH) ? attrH : parseInt( computedW * factor )\n    d3.select(this)\n      .attr('viewBox', '0 0 ' + parseInt(computedW) + ' ' + parseInt(calcH))\n      .call(vis.width(computedW).height(calcH))\n  }) \n}\nBonus track\nWhat about having a component that resizes well only on one direction (let's say the width) while keeping the height with some fixed specific value?\nBy setting the attribute height instead the ratio, we can accomplish such functionality quite easily:\n<div class=\"row\">\n  <div class=\"one\">\n    <svg fit height=\"100\"></svg>\n  </div>\n</div>\nThis feature can be seen in the last screencast, the first component actually preserves a fixed height.\nAs usual, the full source code of this exploration can be found on this repo.\nHappy coding!\n","frontmatter":"title: Size matters\ndate: 2017-08-07 14:00:00 +0100\nsubtitle: 7th August, 2017\nstyle: blue\ncover: 06.gif\ncategories: Tutorials\ntags: [tutorial, d3js, reusable, proof, layout, flex, svg]"},{"attributes":{"title":"Efficient tooltip positioning in D3.js chart","date":"2017-08-08 14:00:00 +0100","subtitle":"8th August, 2017","style":"blue","cover":"screen.gif","categories":"Tutorials","tags":["tutorial","tooltip","d3js","positioning","proof","technique"]},"body":"I was just scribbling on paper without a specific goal. Suddenly, a little ah-ha moment brought me in a little exploration. \n\n\n\nThe proof-of-concept\nApparently, I'm all about Proof-Of-Concept these days. \nThis time is about positioning a graphic element (let's say, a tooltip) next to the mouse but using the most efficient area in a given canvas in order to avoid the element to be cut by the boundary of the canvas.\nDisclaimer\nI didn't make any research on the topic, I bet I wouldn't be astonished if there were, at least, a couple of Ph.D. out there on efficient tooltips positioning algorithms.I don't know whether this technique has been already used somewhere. In this case, I would love to hear more about them.\nThe rules\nThey are simple and can be outlined as the following:\n\nconstruct four lines between the canvas edge corners and the mouse position\nfind the longest one\nfind a point along the longest line that is far enough from the mouse\nuse that position to move the centroid of the element we want to position efficiently\n\nA very efficient way to show how it works and what's going on behind the scene might be this progressive visualization:\n\nHere the relevant javascript code that uses a couple of essential native functions to accomplish this feature. It was extrapolated by a D3.js script but it can be adapted to other contexts quite easily. This script requires to be within a mousemove listener:\n// finding the longest line\nvar maxL\nvar maxV = 0\nlines.each(function (d, i) {\n  if (d.l >= maxV) {\n    maxL = this\n    maxV = d.l\n  }\n})\n\n// get the final point\nvar l = maxL.getTotalLength()\nvar p = maxL.getPointAtLength(l - 60)\n\n// position the element\nlegend.attr('transform', `translate(${p.x}, ${p.y})`)\nHere the interactive version (click to toggle the chart visibility and... desktop only):\n\n\nConclusion\nI don't know whether I'm going to use this technique in the future. Nevertheless, it's always good to figure out what's going on behind the curtain, it can't hurt.\nPS: I've also learned something on SVG 2; the getTotalLength() function  will be deprecated on some SVG element (i.e. line, text), this is why my implementation uses path instead line elements.\nSource code here.\n","frontmatter":"title: Efficient tooltip positioning in D3.js chart\ndate: 2017-08-08 14:00:00 +0100\nsubtitle: 8th August, 2017\nstyle: blue\ncover: screen.gif\ncategories: Tutorials\ntags: [tutorial, tooltip, d3js, positioning, proof, technique]"},{"attributes":{"title":"Bending-Dancing","date":"2017-08-09 14:00:00 +0100","subtitle":"9th August, 2017","style":"purple","cover":"cover.gif","categories":"Projects","tags":["project","svg","d3js","animation","lines","bend","smooth"]},"body":"A few years ago, a little trick opened up a new trend on animations on the web. I'm talking about the Animated Line Drawing technique in SVG path discovered and documented back in 2013  by Jake Archibald here.  \nCSS-Tricks wrote about it extensively here.\nBriefly, it relies on changing two props belonging to the SVG path, stroke-dasharray and stroke-dashoffset.  \nThey can be set with values between 0 and the path length using the native function getTotalLength().\n\nD3.js transition can animate those attributes out of the box, therefore, I can't help but playing a bit with them is just a matter of these line of code:\npath.transition()\n    .attr('stroke-dasharray', function () {\n        var length = this.getTotalLength()\n        return Math.random() * length\n    })\n      .attr('stroke-dashoffset', function () {\n        var length = this.getTotalLength()\n        return Math.random() * length\n    })\nI got curious about exploiting the technique to build animated structures using different shapes and pattern.\nHere with horizontal lines (click to change):\n\n\nHere with the border of a rect (click to change):\n\n\nThe border of circles (click to change):\n\n\nTha same as above with different stroke width (click to change):\n\n\nNow you can experience the final exploration.\nIf you are interested, you can find the source code here.\n","frontmatter":"title: Bending-Dancing\ndate: 2017-08-09 14:00:00 +0100\nsubtitle: 9th August, 2017\nstyle: purple\ncover: cover.gif\ncategories: Projects\ntags: [project, svg, d3js, animation, lines, bend, smooth]"},{"attributes":{"title":"Har Abstractor","date":"2017-08-24 14:00:00 +0100","subtitle":"24th August, 2017","style":"purple","cover":"cover.gif","categories":"Projects","tags":["project","d3js","graphic","art","poster","abstract"]},"body":"Back in 2013, I made a little visualization project using HAR as data source.\n\nThe purpose was about experimenting with graphic art using some data as input material. At that time I liked the idea to use a kind of fingerprint for web pages in order to build some retro-style graphic compositions.\nThese are some saved images related to popular home pages: \n\n\n\n\n\n\n\nHere the working D3.js script (click to loop through different data sources):\n\n\n\nYou can experience it in full window here. and you can find the source code here.\n","frontmatter":"title: Har Abstractor\ndate: 2017-08-24 14:00:00 +0100\nsubtitle: 24th August, 2017\nstyle: purple\ncover: cover.gif\ncategories: Projects\ntags: [project, d3js, graphic, art, poster, abstract]"},{"attributes":{"title":"The Design Sprint","date":"2017-08-27 14:00:00 +0100","subtitle":"27th August, 2017","style":"red","cover":"sprint.png","categories":"Opinions","tags":["opinion","thoughts","agile","sprint"]},"body":"I've been interested in the Google Design Sprint method over the last year.I've conducted, successfully, some sprints in our studio, so far. I'm quite happy with the results even though a degree of personalization is required.\n\nBut, what is a Design Sprint?\n\nThe Google Design Sprint is a loosely based Agile method to design and validate quickly a business idea.\n\nIt's a structured process with a tight deadline and a fixed and well-encoded time-frame.\nEverything has to happen in a full working week, five full-time days.\nThe team should be composed of a maximum of 6-8 persons and it should be diverse and multidisciplinary because different skills are required in order to cover all the tasks the sprint requires.\nAccording to its proponents, it is an efficient and affordable way to validate a product or service idea before going to invest big money on implementation.\nHere a brief outline of the sprint week, one phase per day:\nUnderstanding\nIt's the day where the team gets the brief and the context of the project in order to set the mind on the proper track.\nIt's mostly based on talk and people interactions about content and purpose strategy.\nOne of the tools that can be used to foster design thinking is the HMW (acronym of How Might We) tool to encode every design opportunities into questions in order to ease the collecting and choice activity. A key person to lead the process is mandatory.\nIdeas\nIn this day it's all about sketching ideas with a precise schedule of activities, personal and team wise, with review and discussions. It's the diverging day where all the crazy ideas can be put on the table.\nDecision\nIn this day all the good ideas outlined and discussed the day before need to be condensed into a single one which will be the main path to follow in the next phases.\nEveryone votes each single good idea and a new project draft will be outlined by the whole team. \nThe new project idea has to be storyboarded within the end of the day.\nPrototype\nBased on the detailed sketch of the final idea the team has to prototype it in some realistic form in order to be able to test it with real people.\nThe tools can be anything as long as they allow to achieve a working artifact useful to test and validate the relevant functions, planned for the next day.\nTest\nThe last day is dedicated to testing the prototype with real people.\nThis means you need to find people who are willing to give a bit of their time to you. This is why you need to give them something back as a gift.\nThe test is a mix of interviews and observation method and should follow this process:\n\nwelcome and introduction to this activity\na brief talk to break the ice asking something personal and easy to the user (your working day, your hobbies, etc)\nintroduction to the project and the prototype and how you are going to assist him/her\nuse the prototype by means of specific tasks outlined ahead\nlittle debrief, opinions and considerations, then a big thank you alongside the gift\n\nConclusion\nAs in every strategy, there's something good to take away and something that needs to be changed. The Design Sprint from Google is no exception.\nThe good part is the focus of the process, that need to be conducted without external distraction. Also, the idea to put together different people in order to create a diverse team is a very useful approach.\nI wouldn't be strict about the details (the crazy eight, the HMW, the voting system, etc) since it really depends on the project.\nBased on my experience managing few sprints so far, the most important thing is about to book a focussed time frame with a diverse team. The schedule of the Design Sprint is a good starting point but you don't have to adhere strictly. It's much better to follow the path the team is drafting over time because if it happens it means it's required and it's good for the final outcome.\n","frontmatter":"title: The Design Sprint\ndate: 2017-08-27 14:00:00 +0100\nsubtitle: 27th August, 2017\nstyle: red\ncover: sprint.png\ncategories: Opinions\ntags: [opinion, thoughts, agile, sprint]"},{"attributes":{"title":"The Getting Things Done issue","date":"2017-08-28 14:00:00 +0100","subtitle":"28th August, 2017","style":"red","cover":"cover.png","categories":"Opinions","tags":["opinion","thoughts","gtd","growth"]},"body":"Everybody, at some point in time, will stumble upon the GTD issue. \n\nGetting Things Done is the art of keeping organized and efficient the list of tasks we've been asking to accomplish in our everyday life, both personal and professional as well.\nIn theory, it's straightforward.The process of capture, clarify, organize, reflect and engage, resonates right to me.\nCapture is something given these days. The tools we regularly use such as email, chat, pm tools and social networks bring to us the raw information we need to process.\nClarify is meant to be the process for each new piece of information that comes up in front of us in order to give it the right place in our brain, based on several properties.\nOrganize is the activity to keep in order our list of tasks considering the new comers and the changes that might occour.\nReflect is the frequent review of the organized corpus of tasks in order to quickly update and refine it.\nEngage is the final action related to what we have to do based on what we have collected, processed and synthesized in the previous phases.\nThe real world\nThe problem is the real world. The amount and the diversity of the daily information are huge and applying that process is far from being easy.\nTake the email. How many of you struggle with it? The email is the primary source of that complexity.\n\nA friend of mine told me the email is like a public to do list, in the sense that everybody can add tasks for you without asking permission for.\n\nTools\nI see a parallel with the Agile wagon. On one side, few principles easy to grasp that are meant to guide us to handle our life efficiently, on the other side tons of tools, books, experts, workshops that are meant to help us to undestand those principles but that they are far from being efficient.\nThere is countless number of tools out there that allegedly try to convince us they can solve our day-to-day problems. Eventually, they are all to-do lists. \nIndeed, thousand of to-do apps/services are just waiting for us for a test drive. \nOver the years I tried a lot of them, giving up every single time.  \nSingle Point Of Truth\nI do believe in the Single Point Of Truth (SSOT theory).  \nAt some point, I've started to use Evernote for my annotations. At some point, I've ended up to a single note to manage day-to-day tasks, adding, updating and deleting chunks of texts there.\nIn 2016 I got rid of Evernote using a single .txt file, always open on my computer. \nThat file is my single point of truth. It's the place where I can put words/sentences/notes/lists regarding both my personal and professional reminders. I can highlight them with colors, size, font-variance, bullet-list etc; I can give different priorities moving up and down chunks of text. I can quickly annotate over specific sentences whether it needs.I religiously edit it every day adding what's new, removing what's obsolete or useless, updating what has been changed.  \nSo far, this little file is the best tool I found out that help me to keep my life organized.No muss, no fuss, it just works.\n","frontmatter":"title: The Getting Things Done issue\ndate: 2017-08-28 14:00:00 +0100\nsubtitle: 28th August, 2017\nstyle: red\ncover: cover.png\ncategories: Opinions\ntags: [opinion, thoughts, gtd, growth]"},{"attributes":{"title":"Vue.js: nice to meet you!","date":"2017-08-30 14:00:00 +0100","subtitle":"30th August, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","vue","svg","basic"]},"body":"Vue.js caught my attention since its first public release mainly for its simplicity. Unfortunately, I've never had the opportunity to put my hands on it. Finally, that time has come.\n\nOver the past few years, I had some experience with Angular 1.x. I remember I've stumbled upon it back in 2012.I remember quite clearly my excitement about how I was able to transform a static web-page in a reactive web-app using a couple of magic custom HTML tags. \nFor some reason, I've skipped totally the React/Angular(2/4) battle in the last couple of years. There was something that blocked me doing it. I hadn't test them yet.\nThe mentioned experience with Angular 1.x helped a lot my confidence with Vue.js.I've immediately felt at home with it. \nI like Vue.js because it tries to stay lightweight by design, borrowing the best parts of both React and Angular as well.\nI like it also because it doesn't try to add new language flavours (TypeScript and JSX, I'm looking at you!). I used to be careful with opinionated language extensions. I'm happy with my decision to not embrace Sass and CoffeeScript when they still were a thing. I do prefer W3C standards.\nI've conducted a getting started time with the library, trying to discover some peculiarities, learning a couple of useful bits. I'm going to outline this first experience for sharing purpose and future reference.\nBootstrapping an App\nImport the library, use this HTML fragment:\n{% raw %}<h1 id=\"app\">{{ message }}</h1>{% endraw %}\nand this js code:\nnew Vue({\n    el: '#app',\n    data: {message:'Hey'}\n})\nComponents\nCreating a reusable component:\n{% raw %}Vue.component('my-comp', {\n    template: '<h1>{{ mydata.message }}</h1>',\n    props: ['mydata']\n}){% endraw %}\nuse it in your document specifying the data bind:\n<div id=\"app\">\n    <my-comp v-bind:mydata=\"item\"></my-comp>\n</div>\nbootstrap it with this:\nnew Vue({\n    el: '#app',\n    data: {\n        item:{\n            message:'my long sentence'\n        }\n    }\n})\nPopulate a list\nUsing the directive v-for:\n{% raw %}<div id=\"app\">\n  <ul>\n    <li v-for=\"item in items\">{{ item }}</li>\n  </ul>\n</div>{% endraw %}\nVue.js will render it according to the passed array:\nnew Vue({\n    el: '#app',\n    data: {\n        items:['a', 'b', 'c']\n    }\n})\nTwo-way binding\nThe v-model directive allows for two-way binding:\n{% raw %}<div id=\"app\">\n  <textarea v-model=\"message\"></textarea>\n  <p>{{ message }}</p>\n</div>{% endraw %}\nNow the textarea value will update the p tag everytime we type in it:\nnew Vue({\n    el: '#app',\n    data: {\n        message: 'This is a good place to type things.'\n    }\n})\nConditionals\nThe v-if directive allows for simple conditionals:\n{% raw %}<div id=\"app\">\n  <ul>\n    <li v-for=\"item in items\" v-if=\"item.show\">{{ item.label }}</li>\n  </ul>\n</div>{% endraw %}\nIn this case, a property in data object will be responsible for the list item visibility:\nnew Vue({\n    el: '#app',\n    data: {\n        items:[\n            {label:'a', show:true},\n            {label:'b', show:true},\n            {label:'c', show:false},\n            {label:'d', show:true}\n        ]\n    }\n})\nInteractivity\nThe v-on:click directive allows to add click event on HTML elements:\n{% raw %}<div id=\"app\">\n  <ul>\n    <li \n        v-for=\"item in items\" \n        v-if=\"item.show\"\n        v-on:click=\"hide\">{{ item.label }}</li>\n  </ul>\n</div>{% endraw %}\nIf you want to pass the data object to the event handler function, you need to specify, explicitly, the arguments as the following:\n\n{% raw %}<div id=\"app\">\n  <ul>\n    <li v-for=\"item in items\" \n        v-if=\"item.show\"\n        v-on:click=\"hide(item, $event)\">{{ item.label }}</li>\n  </ul>\n</div>{% endraw %}\nThe javascript part looks like:\nvar vm = new Vue({\n    el: '#app',\n    data: {\n        items:[\n            {label:'a', show:true},\n            {label:'b', show:true},\n            {label:'c', show:false},\n            {label:'d', show:true}\n        ]\n    },\n    methods:{\n        hide: function(item, event){\n            item.show = false\n        }\n    }\n})\nFrom App to Component\nWe can transform the above code as reusable component with:\n{% raw %}Vue.component('list', {\n    template: '<ul><li v-for=\"item in items\" v-if=\"item.show\" v-on:click=\"hide(item, $event)\">{{item.label}}</li></ul>',\n    props: ['items'],\n    methods:{\n        hide: function(item, event){\n            item.show = false\n        }\n    }\n}){% endraw %}\nand using the new tag in our document:\n<div id=\"app\">\n  <list class=\"foo\" v-bind:items=\"mydata\"></list>\n</div>\nand bootstrapping it with this code:\nnew Vue({\n    el: '#app',\n    data: {\n        mydata:[\n            {label:'a', show:true},\n            {label:'b', show:true},\n            {label:'c', show:false},\n            {label:'d', show:true}\n        ]\n    }\n})\nSVG is markup as well\nWe can use Vue.js with the SVG tag just like any other HTML tag. Suppose the following custom tag:\n<div id=\"app\">\n  <mychart v-bind:dataset=\"mydata\"></mychart>\n</div>\nand the component definition:\nVue.component('mychart', {\n    template: '<svg><rect v-for=\"(item, index) in dataset\" width=\"20\" :x=\"index*21\" :height=\"item.v\" :y=\"50-item.v\"></rect></svg>',\n    props: ['dataset']\n})\nand the bootstrap code to get a little chart driven by Vue.js:\nnew Vue({\n    el: '#app',\n    data: {\n        mydata: [\n            {v:20},\n            {v:40},\n            {v:10},\n            {v:26}\n        ]\n    }\n})\nNote how to compute an attribute value with an expression. We need to use this special notation, :x instead the regular x \nNow, editing the array (adding, deleting, updating an object or property) will be reflected in the view automatically thanks to the reactive system of Vue.js.\nConclusion\nNot a true conclusion.I really hope to go deeper with Vue.js. I like it.\nAs usual, source file here for those who are interested.\n","frontmatter":"title: \"Vue.js: nice to meet you!\"\ndate: 2017-08-30 14:00:00 +0100\nsubtitle: 30th August, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, vue, svg, basic]"},{"attributes":{"title":"Shell Trick: Alias for common commands","date":"2017-08-31 14:00:00 +0100","subtitle":"31th August, 2017","style":"blue","categories":"Tutorials","tags":["tutorial","shell","terminal","tip"]},"body":"I use the shell (the Terminal on Mac Os X) every day. If you work with Git or Node.js like me, you cannot avoid it. It's simply part of the development stack. For that reason I've started to find a way to make shortcuts for some common shell commands I use every day.\nAt first, I've started with the weird way, using AppleScript to create an Applet just to invoke the Terminal application, filling and run a command for me, such as:\ntell application \"Terminal\"\n    activate\n    do script \"cd /Users/me/Projects/Repositories\"\nend tell\nActually It works but I've felt that was not the right way to do.\nAfter a bit of research I've learned the right one. The shell (bash) has the alias function that does precisely this sort of things.\nCreating an alias is straightforward, type this in the terminal:\nalias myshort=\"cd /Users/me/Projects/Repositories\"\nthen, invoke it with myshort hitting return. myshort can be anything you like.\nThis will work only on the current terminal window. Once you close it, the alias will be lost.To save the alias in a permanent way, you need to do a little bit more.\nYou need to edit an invisible file with the shell with this command:\nnano ~/.bash_profile\nWith nano you need to move with the arrows and reach the bottom of the file then paste the same line we used before to set up the alias. Use CTRL+O and CTRL+X to save and close nano.\nNow you should be able to use the alias on every terminal panels.\nSource here.\n","frontmatter":"title: \"Shell Trick: Alias for common commands\"\ndate: 2017-08-31 14:00:00 +0100\nsubtitle: 31th August, 2017\nstyle: blue\ncategories: Tutorials\ntags: [tutorial, shell, terminal, tip]"},{"attributes":{"title":"Vue.js: welcome CLI","date":"2017-09-05 14:00:00 +0100","subtitle":"5th September, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","vue","cli","basic","nuxt"]},"body":"In this article, I've documented my experience on getting started with Vue.js.\nThis time, I wanted to start using the official suggested setup, which supports the .vue file format and other very interesting features.\nThe setup configuration is quite complex, however, with the vue-cli (the Vue Command Line Interface) it's a no brainer task.\nAll you have to do is to install it on your system using node and npm with:\nnpm install -g vue-cli\nOnce you have the CLI installed, you can run vue commands (from the Terminal/Shell) in order to bootstrap empty projects ready to start with alongside powerful features such as ES6 transpiler, hot reloading, CSS scoped, just to mention a few.\nYou can choose between different scaffolding projects, based on complexity and thoroughness, my choice has been (with a proper projectName):\nvue init webpack-simple <projectName>\nAfter that, you need to install the modules and run the development session:\ncd <projectName>\nnpm install\nnpm run dev\nYour browser should run with a sample Vue app. If you edit some files you should see the change almost in real time.\nWith this setup, the src folder is the place for the source files. A minimal Vue app needs the following files in order to compile correctly:\n\nAn index.html in root folder (the default one is ok)\nA src/main.js file to bootstrap the application loading the components you want to use\nOne or more .vue files representing the Vue components.\n\nEach .vue file is a component that means:\n<template></template>\n\n<script></script>\n\n<style></style>\nA markup fragment, a script for business logic, a local style definition. That's all soo right.\nI've always struggled with the css and js folders full of files of the same type but not related in any ways to each other. The component structure resonates much more clear to me.\nCreating a component\nCreate and save a new .vue file (let's say MyComponent.vue) within the src folder. Add the three parts belonging to a component (at least the template, optionally with script and style):\n<template>\n  <div>\n    <h1>Thi is a component title</h1>\n  </div>\n</template>\nand use it from within any other .vue file with this code:\n<template>\n  <div>\n    <mycom />\n  </div>\n</template>\n\n\n<script>\nimport mycom from './MyComponent.vue'\n\nexport default {\n  components: {\n    mycom\n  }\n}\n</script>\nThis way the markup, the style and the logic will be rendered within the above main component.\nEven better\nSo far, Vue.js is very promising to me. Everything is crystal clear and I really love the way it can be learned incrementally. Then, by chance, I've discovered Nuxt. \nI've spent a lot of time over the last few years trying to figure out a way to develop front-end apps with happiness. I've even developed and released a couple of libraries (static-player and grunt-static-player) to develop web apps using dynamic injections with the possibility to bake it as static web app (for SEO and performance purposes). We currently use them for our web projects but, for the first time, I'm seriously considering to dismiss them in favor of Vue.js+Nuxt.\nAfter a first check, I do believe they are awesome and they will be a game changer. Try it with:\nvue init nuxt-community/starter-template <projectName>\nand follow the well-done documentation here.\nMore to come...\n","frontmatter":"title: \"Vue.js: welcome CLI\"\ndate: 2017-09-05 14:00:00 +0100\nsubtitle: 5th September, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, vue, cli, basic, nuxt]"},{"attributes":{"title":"Nuxt: getting started with it","date":"2017-09-06 14:00:00 +0100","subtitle":"6th September, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","nuxt","vue","basic","start"]},"body":"I'm very excited about Nuxt.  \nI can't help but try it as soon as possible, so here I am.\nThis time, instead of using some magic command to start with a scaffolding, I went to a different route, starting from scratch setting up and working on a project with an empty folder as the starting point. \n\n\nSurprisingly, everything went smooth and clear to me.\nSo, let's have this journey together to create a universal Vue app with Nuxt. \nRun the Terminal and type:\nmkdir testProject\ncd testProject\nThen, set up a npm project with (filling the required fields):\nnpm init\nThen, install Nuxt:\nnpm install nuxt --save\nWe need to add the first script alias within the package.json file:\n\"scripts\": {\n    \"dev\": \"nuxt\"\n}\nNow we can run it to start a development session. Before it, we need to create a required folder: the pages folder within the project. Now run the command npm run dev and go with your browser to http://localhost:3000\nPages\nTo see something on screen, we need to create our first Vue component (such as index.vue) within the pages folder using this minimal template:\n<template>\n  <h1>Title</h1>\n</template>\nNow it's time to create a couple of components for our website, let's say a header and a footer so we can potentially reuse them on different pages.\nComponents\nLet's create a new folder named components placing in it a couple of Vue components, header.vue and footer.vue:\n<template>\n  <header>This is the header</header>\n</template>\n\n<style scoped>\n  header{\n    background-color: #ccc;\n  }\n</style>\nThis is an example for the header component. Now it's time to use them in out page:\n<template>\n  <div>\n    <Head />\n    <h1>Index</h1>\n  </div>\n</template>\n\n<script>\nimport Head from '~/components/header.vue'\n\nexport default{\n  components:{\n    Head\n  }\n}\n</script>\nAs you might notice, I've changed a bit in the markup because a single wrapper is required in a Vue template, thus a generic div has been added to wrap both the new component and the h1 tag as well.\nIn the javascript portion, you can see how to import a component in order to use it in the template markup.\nLayouts\nUsually, it's better to have some master layout that can be used by several pages. Nuxt allows defining different layouts in a layouts folder.\nA layout in Nuxt is a regular Vue component with the special tag nuxt. This is, for example, the default layout (default.vue):\n<template>\n  <div>\n    <nuxt />\n  </div>\n</template>\nYou can modify it as your convenience, adding style and logic to it. All the pages will get updated accordingly. The nuxt tag will be replaced with the page content (PS: sometimes the hot reloading doesn't work properly, just refresh the browser to see the updates).\nOn each page you can define which layout should be used with the property layout:\n<template>\n  <div>\n    <Head />\n    <h1>About</h1>\n  </div>\n</template>\n\n<script>\nexport default{\n  layout: 'other'\n}\n</script>\nStatic website\nSo far, we created a very simple website Vue-driven. This means a SPA (Single Page Application) that usually doesn't play nice with SEO, search engines, social crawlers, etc.\nTherefore, this is the main reason why I'm so excited about Nuxt. The ability to bake the whole web app as static website is terrific. You only need to use the command nuxt generate to do that. Remember to update the package.json with the new command:\n\"scripts\": {\n    \"dev\": \"nuxt\",\n    \"generate\": \"nuxt generate\"\n},\nnow you can run npm run generate in a new Terminal window (keep the dev process active).\nThis process will generate for each page a static version of it preserving all the logic and the functionalities of the SPA version. Neat, isn't it? \nSource files here.\n","frontmatter":"title: \"Nuxt: getting started with it\"\ndate: 2017-09-06 14:00:00 +0100\nsubtitle: 6th September, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, nuxt, vue, basic, start]"},{"attributes":{"title":"HTML import is dead","date":"2017-09-07 14:00:00 +0100","subtitle":"7th September, 2017","style":"red","cover":"cover.jpg","categories":"Opinions","tags":["opinion","thoughts","html","import","rip"]},"body":"Apparently, HTML import is dead. This is what I've learned from ShopTalkShow today.\nI've always been confident and happy about it because it has always been the promise to solve so many struggles in front-end development.\nI was wrong. It's not going to be a thing.\n\n\nThe browser support speaks by itself. Only Google Chrome natively support it. The other main vendors need a polyfill to work with.\n\nThis will affect also the Polymer Project, no doubt.\nWe need modularization\nModularization is the (only) way to survive in the complexity of the front end development world.\nI got that years ago, this is why I've built something to overcome this necessity here and here.\nRight now, I see in the .vue single-file-component mechanism the best scenario and this is why I'm so excited about. I know, it's not standard but I hope to see similar (or better) strategies by the W3C in the near future.\nIn the meantime, give me the time polishing my next Vue.js exploration.\n","frontmatter":"title: HTML import is dead\ndate: 2017-09-07 14:00:00 +0100\nsubtitle: 7th September, 2017\nstyle: red\ncover: cover.jpg\ncategories: Opinions\ntags: [opinion, thoughts, html, import, rip]"},{"attributes":{"title":"Safari is the new IE","date":"2017-09-08 14:00:00 +0100","subtitle":"8th September, 2017","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","css","scroll","safari","issue","tip"]},"body":"Working with CSS these days is way better than few years ago thanks to the new specs as well as the commitment towards W3C standards from browser vendors.\nUnfortunately, it's not perfect. Indeed, we're far from living in a perfect world.\nI can feel a pattern everytime I work with CSS and layout: Safari is the last step, the \"give me a break, eventually, I'll fix Safari issues\".\n\n\nHere an example of what I'm talking about. A simple layout with a scrollable container and a bunch of children that expand their height 100% the container size.\nOn Chrome and Firefox this works like a charm, but not on Safari (because it fails to calculate the height of the children elements according to the container size):\nSee the Pen Child height in flex parent by Fabio Franchino (@abusedmedia) on CodePen.\n\n\nSince it will be fixed at some point, here a screenshot taken with Safari 10.1.2 desktop version:\n\nAnd here a modified version to make it Safari compatible. You can see I had to add an additional wrapper and change the CSS making it less maintainable:\nSee the Pen Child height in flex parent Safari compatible by Fabio Franchino (@abusedmedia) on CodePen.\n\n\nAs it happened in the old days, testing against the less compliant browser is key to avoid big headaches during CSS development. You've been warned.\nUpdate: actually, using 100vh instead 100% as height value makes it to work as expected. Good to know, however, this doesn't change my feeling on Safari. Actually, 100vh is not a solution since Safari on iOS ignores its bottom-bar to calculate the height resulting in a wrong value.\nUpdate 2: apparently, the upcoming Safari 11 fixed the mentioned issue.\n","frontmatter":"title: Safari is the new IE\ndate: 2017-09-08 14:00:00 +0100\nsubtitle: 8th September, 2017\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, css, scroll, safari, issue, tip]"},{"attributes":{"title":"CSS Scroll Behavior","date":"2017-09-11 14:00:00 +0100","subtitle":"11th September, 2017","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","css","scroll","behavior","tip"]},"body":"Last day I've been notified by Google Chrome about its version update (61.x). I've quickly checked the release notes discovering the introduction of the CSS property scroll-behavior, a property I didn't know about.\nI've got interested and I've conducted a quick search about it.\n\n\nIt's a neat property that allows to smoothly animate the scroll position in a scollable box, instead of a straight jump, when using anchor links to target different position of the viewport.\nAdding transitions to state changes is not a cosmetic feature. The ability to let the user know what's going on in front of her after an action is key in usability realm.\nThe web is full of this kind of effect thanks to javascript that allows to add any kind of behavior to our interfaces. For that reason, the CSS scroll-behavior property is not going to impress anyone.\nWhat is amazing here (that is typically of the CSS in general) is the simplicity as well as the backward compatibility about adding this behavior.We don't have to reinvent the wheel with some library to incorporate a smooth scrolling behavior in our scollable panel, not anymore. And we don't have to worry about backward compatibility. If a browser doesn't support it, it will be ignored, making the page working without transition.\nSo far, it's compatible with the latest version of Chrome (61.x) and Firefox (55.x). Here a quick sketch that works on every browsers, with or without animation according to browser compatility.\nFeel free to click on the header sections, the next/prev and don't forget to try the last section as well:\nSee the Pen CSS Scroll Behavior by Fabio Franchino (@abusedmedia) on CodePen.\n\n\nTip: if you set the scrollable wrapper both with overflow:hidden; and scroll-behavior:smooth; you'll get and interesting effect. The user scroll is disabled (and so the scrollbars are hidden) but the behavior is still working as expected using the anchor links, even in browsers that don't support scroll-behavior property.\n","frontmatter":"title: CSS Scroll Behavior\ndate: 2017-09-11 14:00:00 +0100\nsubtitle: 11th September, 2017\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, css, scroll, behavior, tip]"},{"attributes":{"title":"How to run Node.js before Jekyll build","date":"2017-09-11 14:00:00 +0100","subtitle":"11th September, 2017","style":"blue","cover":"cover.jpg","categories":"Tutorials","tags":["tutorial","jekyll","nodejs","ruby","builder"]},"body":"I've recently added a tiny feature on my main website. In a section, it shows the number of words written and published on this blog. A fancy way to suggest that there is also a blog you can use to know more about me.\nThat number is growing on every article I publish but I don't want to build and update my website everytime a new article come out.\nTo solve this issue, I've added a tiny ajax request towards a little json file that is updated everytime the blog gets updated. I've built a little Node.js script that read all my blog posts generating the correct number, dumping a little json file ready to be committed.\nThe problem was that I have to run the Node script by hand and sometimes (read: always) I forgot to run it after a new post.\nMy blog is Jekyll-driven, I'm quite happy with it but I'm not a rubyist and this is why I've writter that script in Node.js. I'm much more confortable with it.\nAfter a bit of research, I found out a way to integrate the two with a Jekyll plugin that calls a Node.js script everytime I build my blog for local testing (I usually do it before publishing a new article).\nThe Jekyll plugin is something like:\nmodule RunNodeBefore\n  def self.process(site, payload)\n    return if @processed\n    system \"node build_index.js\" \n    @processed = true\n  end\nend\n\nJekyll::Hooks.register :site, :pre_render do |site, payload|\n  RunNodeBefore.process(site, payload)\nend\nThe relevant line is:\nsystem \"node build_index.js\"\nYuo need to put that file within the folder _plugins in your Jekyll root folder in order to call it automatically.\nAs I said, I'm not a rubyist, therefore, I've just copy/paste/adapted something I found somewhere. \nThe important thing is that it just work and I'm pretty sure I won't forget to update my words.json file anymore.\n","frontmatter":"title: How to run Node.js before Jekyll build\ndate: 2017-09-11 14:00:00 +0100\nsubtitle: 11th September, 2017\nstyle: blue\ncover: cover.jpg\ncategories: Tutorials\ntags: [tutorial, jekyll, nodejs, ruby, builder]"},{"attributes":{"title":"D3.js dispatch custom event with parameter","date":"2017-09-12 14:00:00 +0100","subtitle":"12th September, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","d3js","custom","event","dispatch","tip"]},"body":"This post just to remember me how something apparently easy might turn out so damn time consumer.\n\nMy goal: dispatch a custom event from a selection passing a custom parameter.\n\nLet's assume you have a selection:\nvar circles = d3.selectAll('circle')\nAnd you want to listen for a custom event:\ncircles.on('myevt', function(d, i){\n  console.log('myevt')\n})\n\n\nNow you want to dispatch that custom event, therefore, all the elements listening for it will be notified:\nd3.selectAll('circle').dispatch('myevt')\nThe console.log will print myevt as expected.\nNow the quest: how to pass a custom parameter?\nFirst, you have to learn how to catch the event parameter:\ncircles.on('myevt', function(d, i){\n  var evt = d3.event\n})\nThis will get you the event object with its standards properties.\nThen, you need to learn how to properly set the parameter in the dispatch function:\nd3.selectAll('circle').dispatch('myevt', {detail: {myCustomObject:'bla bla bla'} })\nPlease note that detail is not there by chance.It's the required field that can be populated with your custom object, therefore you can access to it with:\ncircles.on('myevt', function(d, i){\n  var myParams = d3.event.detail\n})\nFiuu… another little detail learned today.\nHere the working snippet if you're interested.\n","frontmatter":"title: D3.js dispatch custom event with parameter\ndate: 2017-09-12 14:00:00 +0100\nsubtitle: 12th September, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, d3js, custom, event, dispatch, tip]"},{"attributes":{"title":"Clear DNS cache","date":"2017-09-17 14:00:00 +0100","subtitle":"17th September, 2017","style":"blue","categories":"Tutorials","tags":["tutorial","dns","cache","resource"]},"body":"This might be a newbie tip.If you need to reach a website, by means of a domain name, and that domain has changed (or you modified) its DNS settings recently, you might be in trouble to reach that website with your browser.\nThis is because your computer is caching the DNS information, therefore, the browser is, most likely, trying to contact the wrong server.\nThe DNS is a server that converts the domain name you want to visit with an IP (Internet Protocol) which is a number, like a telephone number.\n\nTo fix that situation, you need to clear the DNS computer cache.\n\nThere is this thorough article that outlines precisely how to clear DNS cache of your computer, no matter the system you're running with.\nIn my case, OS X 10.10.x, I had to run this command from the terminal:\nsudo dscacheutil -flushcache\nNow I'm able to reach the right server again.\n","frontmatter":"title: Clear DNS cache\ndate: 2017-09-17 14:00:00 +0100\nsubtitle: 17th September, 2017\nstyle: blue\ncategories: Tutorials\ntags: [tutorial, dns, cache, resource]"},{"attributes":{"title":"Simple blog with Nuxt","date":"2017-09-20 14:00:00 +0100","subtitle":"20th September, 2017","style":"blue","cover":"cover.jpg","categories":"Tutorials","tags":["tutorial","vue","nuxt","spa","static","site","generator"]},"body":"Following my enthusiasm about Nuxt.js and Vue.js, here another step.\nIn this post, I'm going to outline the additional steps to build a bare bones blog using Nuxt.\nThis is a very basic blog with an index template, a sidebar and a post template using a json array as the data source.\n\n\nThe notable differences from the previous tutorial are essentially two.\nUsing external data\nThe index page is a template that will be populated by means of an array of objects that comes from an ajax request, and this is the Nuxt way to do that:\n{% raw %}<template>\n  <article>\n    <h1>Index</h1>\n    <div class=\"grid\">\n      <ul>\n        <li v-for=\"article in articles\" class=\"item\">\n          <nuxt-link :to=\"'/article/' + article.id\">{{ article.title }}</nuxt-link>\n        </li>\n      </ul>\n    </div>\n  </article>\n</template>\n\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  title: 'Hey there',\n  async asyncData () {\n    const {data} = await axios.get('https://jsonplaceholder.typicode.com/posts')\n    return {articles:data}\n  }\n}\n\n</script>{% endraw %}\nYou can see the template will iterate over the article array to build the titles list.\nDynamic page\nSo far, every page we want to publish needs to be created as .vue component, manually, in pages folder. In our case, we need to deal with an array of objects where each object should become an article. Nuxt provides a way to setup a .vue component that acts as a master to generate multiple pages out of it.\nInside the pages folder, let's create another folder named article (or choose your own) and within it put a .vue component named _id.vue with the following source:\n{% raw %}<template>\n  <article>\n    <h1>{{title}}</h1>\n    <p>{{body}}</p>\n    <nuxt-link :to=\"'/'\">Back</nuxt-link>\n  </article>\n</template>\n\n<script>\nimport axios from 'axios'\n\nexport default {\n  validate ({ params }) {\n    return !isNaN(+params.id)\n  },\n  async asyncData({params, error}){\n    const {data} = await axios.get(`https://jsonplaceholder.typicode.com/posts/${+params.id}`)\n    return data\n  }\n}\n\n</script>{% endraw %}\nTest the shit\nUsing the usual npm run dev command, you can check in-browser your progress. \nTo generate the pages we need to run the command npm run generate. Before to run it we need to add the last detail in order to make it work properly. Nuxt needs a way to know which are the dynamic pages in order to create static files for them, also providing a way to define the filename for each.\nIn the nuxt.config.js file there's the generate property that serves for that purpose:\ngenerate: {\n    routes () {\n      return axios.get('https://jsonplaceholder.typicode.com/posts')\n        .then((res) => {\n          var rts = []\n          res.data.forEach((d) => {\n            rts.push('/article/' + d.id)\n          })\n          return rts\n        })\n    }\n}\nIn this case, the id will be used for the filename but you are free to implement different logic.\nYou can check the source on Github and navigate the prototype as well.\nConclusion\nKeep in mind that this is a SPA (Single Page Application) with SEO (Search Engine Optimization) capability. Isn't that awesome?\nFurthermore, this is a POC (Proof Of Concept) just to learn Nuxt.js.There is also a Nuxt blog module for those who want something more refined.\nCheers.\n","frontmatter":"title: Simple blog with Nuxt\ndate: 2017-09-20 14:00:00 +0100\nsubtitle: 20th September, 2017\nstyle: blue\ncover: cover.jpg\ncategories: Tutorials\ntags: [tutorial, vue, nuxt, spa, static, site, generator]"},{"attributes":{"title":"Don't blame your team!","date":"2017-09-21 14:00:00 +0100","subtitle":"21st September, 2017","style":"red","categories":"Opinions","tags":["opinion","thoughts","team","leadership"]},"body":"A creative project needs a creative leader, period.\nA creative team can't accomplish the final goal alone, without a continuously creative direction, no matter the skills of the team.\nThat's because the quality of the final artifact is a total responsibility of the creative director, the quality that has to nicely meet the client expectations.\nFor that reason, it's the creative director responsibility of the initial vision that should kick and guide the whole process, a process that needs to be monitored and adjusted over time by the same person that started the process.\nThe final outcome of the process should answer what the client asked for. \nIt's again a responsibility of the creative director defending the final work, the reason why of the choices and the benefit it'll give to the stakeholders.\nThe initial vision, the whole process and the final result responsibilities cannot be split in different persons.\nA single person should promise at the beginning something to the client and the same person should show, tell and defend the final result according to the initial promise and the client expectations.\nAs a creative leader, you cannot request to a team some results without following all the road until the last step. \n\nThey cannot provide you the right thing. \n\nIt will definitely be something wrong or not complete at best.\nBut it's not a team fault. It's easy to say the team didn't understand the brief or the director' intentions. \nThe fault is in the leadership, the fault is the leader.\nAs a creative leader, you cannot pretend to get what's in your mind without containing all the possible directions the team is in charge to formulate.\nThe next time you expect something you asked your team without directing the activities, remember who is the responsible for the failure. Don't blame your team!\n","frontmatter":"title: Don't blame your team!\ndate: 2017-09-21 14:00:00 +0100\nsubtitle: 21st September, 2017\nstyle: red\ncategories: Opinions\ntags: [opinion, thoughts, team, leadership]"},{"attributes":{"title":"Isadora and Windows 10 Pro","date":"2017-10-06 14:00:00 +0100","subtitle":"6th October, 2017","style":"blue","categories":"Tutorials","tags":["tutorial","isadora","windows","issue"]},"body":"I'm using Isadora for a project. I'll definitely write an article about it since it's a very good piece of software for interactive and media installation.\nRight now, I'm only documenting an issue I've experienced yesterday, just in case I need it again and for posterity.\nOn a brand new NUC with i7 and Windows 10 Pro(blems), Isadora didn't want to run due some missing .dll. Those lib were msvcp100.dll and msvcr100.dll, don't ask me what are all about.\nObviously, I've searched for possible solutions without any luck. I've only realized that the issue was related to the Visual C++ installation on my computer. \nAfter 2 hours battling with it (trying to install several versions of the package) I've finally found out this answer. Hammering a little bit more, I've installed this version of Visual C++ that solved the issue.\nMeh… I love the tech!\n","frontmatter":"title: Isadora and Windows 10 Pro\ndate: 2017-10-06 14:00:00 +0100\nsubtitle: 6th October, 2017\nstyle: blue\ncategories: Tutorials\ntags: [tutorial, isadora, windows, issue]"},{"attributes":{"title":"How design agencies communicate themselves?","date":"2017-10-21 14:00:00 +0100","subtitle":"21st October, 2017","style":"orange","cover":"cover.jpg","categories":"Review","tags":["review","content","website","design","structure"]},"body":"This post opens a new kind of content in this blog.\nBeside my technologist interests, I'm a designer, therefore, I do care about design choices.\nEverything related to how a specific interface has been designed and built is something within my interest boundaries.\nThere are a lot of projects out there very well executed. I want to highlight some of them alongside the details that resonate right to me.\nIn this hello world post type I want to show a specific choice taken on the Pentagram website.\nPentagram doesn't need to be introduced. They recently renewed their website. It's a sleek and very well crafted website that provides everything you might expect from a design agency website.\nCommunicating to the outside world for a design and communication firm is one of the most difficult and challenging task ever. The diversity of the outcomes and the required skills of a typical design studio makes very hard to select and define what communicate and show considering the average time and commitment a user is willing to give.\nOne of the most common ways to explain to potential users what an agency is able to provide is by showing their projects. I understand the rationale: demonstrating the abilities and skills through finished projects in order to attract potential commitments.\n\nPentagram work section shows something interesting and a little bit different than the usual way. The primary entry point to explore projects is by Type of Client. This might seems nothing special but, to me, that choice rang something.\nShowing projects basically mean considering users as potential clients that are looking for something (a brand redesign, a new website, a social campaign). Therefore, trying to show the best objects the firm is able to craft sounds right, in the hope to attract future contracts.\nBut showing the type of client as the entry point to engage potential customers means they're considering users as potential clients that are looking for help by means of a comparison with other similar previous clients needs and solutions.\nI'm not saying that this technique is totally right nor that is something original. What is right to me is the way Pentagram consider their users, someone that is looking for consultancy, not outcomes or finished projects.\nThis leads me to think that showing projects as an entry point maybe is the wrong choice if the goal is to attract potential customers. It might be the right choice if the goal would be to impress other similar agencies/professionals.\nOf course, Pentagram can afford this kind of structure thanks to their portfolio which is vast and diverse. I really don't know whether other agency might be effective like them with a smaller portfolio.\nI don't have any data to support whether this solution is working or not, we might ask to Pentagram :). Nevertheless, I'm quite sure they've conducted some user research to support their choice.\n","frontmatter":"title: How design agencies communicate themselves?\ndate: 2017-10-21 14:00:00 +0100\nsubtitle: 21st October, 2017\nstyle: orange\ncover: cover.jpg\ncategories: Review\ntags: [review, content, website, design, structure]"},{"attributes":{"title":"Conditional Design Workshop at IED","date":"2017-10-25 14:00:00 +0100","subtitle":"25th October, 2017","style":"orange","cover":"cover.jpg","categories":"Review","tags":["review","workshop","ied","conditional","design","drawing"]},"body":"So happy since I've successfully conducted my first conditional design workshop with my students at IED Torino.\n\nIt's been so long since I had this desire and finally I caught the opportunity with my new class of wannabe designers.\nI've given 30 minutes for the activity. I've set up 7 groups,  4/5 people each.\n\nThey had to draw a little square, turning clockwise, on an A0 sheet, with a colored marker, each square has to follow these rules:\n\nit doesn't be too much big/small\nit needs to have a vertex connected with another square' vertex\nit can be rotated by multiples of 45°\nit can be filled with parallel lines, horizontal, vertical or diagonal\nit doesn't have to intersect any other shapes\n\n\nI'm quite happy with the outcomes. They were skeptical at first but during the session, they got engaged and I had some difficulties to stop them because the time run out.\n\nI've noticed a couple of things observing them during the workshop:\n\nThey started to draw in silence but then they began to talk and interact in order to suggest possible directions (where to draw the next square, how to draw it, etc)\nThey followed the rules strictly at first, then some asked for variations and some were nice, which I will include in future editions.\nThey began even to want to break some rules. Some were interesting starting points for further explorations.\n\nEventually, they loved their creation as it happens for a creative team after a well designed project.\n","frontmatter":"title: Conditional Design Workshop at IED\ndate: 2017-10-25 14:00:00 +0100\nsubtitle: 25th October, 2017\nstyle: orange\ncover: cover.jpg\ncategories: Review\ntags: [review, workshop, ied, conditional, design, drawing]"},{"attributes":{"title":"Is the web dying?","date":"2017-10-31 14:00:00 +0100","subtitle":"31st October, 2017","style":"red","categories":"Opinions","tags":["opinion","thoughts","web","future"]},"body":"I read with care \"The web began dying in 2014, here's how\" article. You should too.\nIt gives an interesting glimpse of a possible future of the internet and the web.\nIt does try to outline how the web is going to be less relevant because of big players dominance.\nInternet will continue to stay here as the technical backbone but the web will be less and less relevant.\nThe problem relies on the actual main players (GOOG, FB, AMZN). They are divvying up the web into different and separated key components: AI, social and e-commerce by means of their walled gardens.\nThe future envisioned by the author looks much more to a place owned by big companies without any chances to live independently with dignity and relevance as it can happen so far.\nIt's a dystopian view of the online society.\nTo avoid this chance, we all have to do our little share. \n\nThe web is a place where everybody can live with and express his/her identity without asking for permission. \n\nGo to pick up your personal domain name and start adding your personal contents. Now.\n","frontmatter":"title: Is the web dying?\ndate: 2017-10-31 14:00:00 +0100\nsubtitle: 31st October, 2017\nstyle: red\ncategories: Opinions\ntags: [opinion, thoughts, web, future]"},{"attributes":{"title":"The invisible complexity to accomplish a user will","date":"2017-11-06 14:00:00 +0100","subtitle":"6th November, 2017","style":"red","categories":"Opinions","tags":["opinion","ux","cto","netflix"]},"body":"This interesting article explains some bits of the behind the scene of the Netflix' infrastructure.\nAlongside the technical details of a microservice based infrastructure that is able to handle the challenge of distributing video feeds to millions of users, optimizing each video file for the user device display size, checking and incorporate the DRM based on content and user nationality, it's impressing the amount of effort they spend to meet a specific requirement.\nI'm talking about the fact that people are not willing to wait even one single second after pressing 'Play' on their preferred video content. They press it and they want to start watching immediately. The custom CDN made by thousands of computers Netflix gives to internet providers around the globe is meant only to reduce, as much as possible, the time between the click and the begin of the video feed.\nIt's particularly interesting the way Netflix' software begins the streaming and, during the very initial seconds of streaming, tries to adjust the playback efficiency by selecting the best CDN on a pre-selected pool of servers.\nThis technical choice is not simple nor cheap. On the contrary, it's something that requires huge investments.\n\nThis is UX. The invisible complexity to accomplish a (apparently simple) user will.\n\n","frontmatter":"title: The invisible complexity to accomplish a user will\ndate: 2017-11-06 14:00:00 +0100\nsubtitle: 6th November, 2017\nstyle: red\ncategories: Opinions\ntags: [opinion, ux, cto, netflix]"},{"attributes":{"title":"Git Sparse: a handy command","date":"2017-11-15 14:00:00 +0100","subtitle":"15th November, 2017","style":"blue","categories":"Tutorials","tags":["tutorial","git","sparse","tip"]},"body":"At TODO we design and develop a big variety of projects. \nSometimes those projects rely on interactive software for exhibits. This means developing several software belonging to the same project and each software needs share/use some common parts. For that reason we usually put all the source code on a single git repository for convenience.\nThe downside of this choice is that by deploying the same repository on different machines, every time we run git pull to update the software it will download all the repository history with all the files related to the whole project. This is not very efficient nor bandwidth saver.\nLuckily enough, git comes with a very handy command to let us save time and bandwidth by allowing to checkout a portion of a repository. The whole command is sparsecheckout and here is the gist about its setup:\n\nmkdir myRepo\ngit init myRepo\ncd myRepo\ngit remote add origin <repo url>\ngit config core.sparsecheckout true\necho \"some/dir/\" >> .git/info/sparse-checkout\ngit pull --depth=1 origin master\n\nPS: each folder needs to be present in the remote repository to check it properly out.\nHappy git!\n","frontmatter":"title: \"Git Sparse: a handy command\"\ndate: 2017-11-15 14:00:00 +0100\nsubtitle: 15th November, 2017\nstyle: blue\ncategories: Tutorials\ntags: [tutorial, git, sparse, tip]"},{"attributes":{"title":"Sketching at IED","date":"2017-11-19 14:00:00 +0100","subtitle":"19th November, 2017","style":"orange","cover":"cover.jpg","categories":"Review","tags":["review","workshop","ied","sketching","ui","ux"]},"body":"Dealing with 30-and-something guys in a classroom might be challenging if the lesson requires practical exercises. \nOn the other side, getting the approach right can become interesting and rewarding.\nA simple exercise to design a specific moment of the user journey, the final part of the shopping experience on a mobile app, turned out with great diversity both in ideas and execution detail as well.\nHere, almost, all the outcomes:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","frontmatter":"title: Sketching at IED\ndate: 2017-11-19 14:00:00 +0100\nsubtitle: 19th November, 2017\nstyle: orange\ncover: cover.jpg\ncategories: Review\ntags: [review, workshop, ied, sketching, ui, ux]"},{"attributes":{"title":"Sketching 75|37 at Domus","date":"2017-11-28 14:00:00 +0100","subtitle":"28th November, 2017","style":"orange","cover":"cover.jpg","categories":"Review","tags":["review","workshop","domus","sketching","dataviz"]},"body":"I'm a fan of the 45 ways to communicate two quantities by Santiago Ortiz. I use it in any DataViz introductory lessons I give.\nIn my recent full-day workshop on DataViz and d3.js at Domus Academy' Master in Interaction Design, I've caught the opportunity to test my students with a simple in-class activity borrowing the Ortiz's challenge. \nI've ended up believing that I should always spend half an hour with this exercise in future DataViz classes because it provides (teach) them an interesting perspective on some core principles related to data visualization and visual perception.\nHere some results:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","frontmatter":"title: Sketching 75|37 at Domus\ndate: 2017-11-28 14:00:00 +0100\nsubtitle: 28th November, 2017\nstyle: orange\ncover: cover.jpg\ncategories: Review\ntags: [review, workshop, domus, sketching, dataviz]"},{"attributes":{"title":"Chart template with more goodies","date":"2017-11-30 14:00:00 +0100","subtitle":"30th November, 2017","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","d3js","template","reusable","proof","chart"]},"body":"Following my initial exploration of trying to figure out a better way to implement reusable d3.js scripts, here a further step on the topic.\nThe last iteration still continues to convince me, therefore, I've added more configuration possibilities.\nMargin and Padding\nThe padding was not enough, therefore, I've added another object to set the margins as well. It follows the same paradigm of the box model of the HTML elements in the browser.\nThis default objects (alongside with relative public methods to configure them) allow the correct placement of all the elements considering also the axis space requirements.\nvar padding = {top: 5, bottom: 5, left: 5, right: 5}\nvar margin = {top: 10, bottom: 30, left: 40, right: 10}\nCustom accessor\nBased on the idea to follow the d3.js paradigm as much as possible, I've added the possibility to change some accessors in the same way d3.js does with its objects. This means that I can write something like:\nvar colorScale = d3.scaleOrdinal(d3.schemeCategory10)\n\nvar vis = myViz()\n  .colors(colorScale)\n  .y(d => d.val)\nas well as this:\nvar vis = myViz()\n  .colors('red')\n  .y('country')\nto give the developer great flexibility without compromising the usability with too many configuration options.\nThe magic happens thanks to this piece of code:\nfunction getAccessor (d, a) {\n  if (typeof a === 'string') {\n    return d[a]\n  } else if (typeof a === 'function') {\n    return a(d)\n  } else {\n    return a\n  }\n}\n\nfunction getY (d) {\n  return getAccessor(d, y)\n}\n\n// example of usage:\nd3.line()\n    .x((d, i) => i)\n    .y(d => getY(d))\nWhere is it going?\nIt's a long journey with a lot of thoughts and second thoughts. I like to continue to stick with the d3.js paradigms that allow great flexibility. We'll see next.\nSource code here.\n","frontmatter":"title: Chart template with more goodies\ndate: 2017-11-30 14:00:00 +0100\nsubtitle: 30th November, 2017\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, d3js, template, reusable, proof, chart]"},{"attributes":{"title":"75|37 sketch again at Supsi Master Class","date":"2017-12-23 14:00:00 +0100","subtitle":"23th December, 2017","style":"orange","cover":"cover.jpg","categories":"Review","tags":["review","workshop","supsi","sketching","dataviz"]},"body":"I did it again. \nThe 75/37 sketching exercise to get a grasp of one of the core activity when doing data visualization.\nThis time with my new class at the Supsi Master in Interaction Design.\nIt's nice to see how people interpret this exercise with very diverse outcomes.\nAnd I really love the 'offending pizza for italian' sketch, though!\nHere a selection of the results:\n\n\n\n\n\n\n\n\n","frontmatter":"title: 75|37 sketch again at Supsi Master Class\ndate: 2017-12-23 14:00:00 +0100\nsubtitle: 23th December, 2017\nstyle: orange\ncover: cover.jpg\ncategories: Review\ntags: [review, workshop, supsi, sketching, dataviz]"},{"attributes":{"title":"Goodbye 2017","date":"2017-12-30 14:00:00 +0100","subtitle":"30th December, 2017","style":"red","categories":"Opinions","tags":["opinion","general","thoughts"]},"body":"It's almost one year ago the first post of this blog and I cannot be more happy with its current status.\nIt's hard to be committed to something. It requires dedication.It's extremely easy to get distracted and let it go somewhere.\nBut it's the rewarding part that counts.And it's for that reason that I'm going to increase my commitment to it. \nI'll write something more about my motivation behind it. Now, let's enjoy this little break. \nPersonal wise, this year has been tough, therefore, I can't wait to meet you, dear 2018.\n","frontmatter":"title: Goodbye 2017\ndate:   2017-12-30 14:00:00 +0100\nsubtitle: 30th December, 2017\nstyle: red\ncategories: Opinions\ntags: [opinion, general, thoughts]"},{"attributes":{"title":"C.Stem - Generative practices in Art and Design","date":"2018-01-03 14:00:00 +0100","subtitle":"3rd January, 2018","style":"purple","cover":"cover.jpg","categories":"Projects","tags":["project","legacy","cstem","creative","coding","generative"]},"body":"Over the first decade of this millennium I've been involved in a practice that definitely shaped my creative view as well as my professional life, a practice thoroughly defined by Philip Galanter as:\n\n«[…] an art practice where the artist uses a system, such as a set of natural language rules, a computer program, a machine, or other procedural invention, which is set into motion with some degree of autonomy contributing to or resulting in a completed work of art.»\n\nI'm talking about the Generative Art field.\nIn 2005, I've had the insane idea to organize a public festival dedicated to that field (I was very passionate about). I've had to learn how to design a public event, inviting people, finding support and fundings, managing logistics and expenses and hundreds of other things that I've never done before.\nThe festival got three editions over three years in a row, then, things became more complex in my life, thus, it never saw the fourth edition.\nRecently, I've restored its edition' websites, therefore, I thought it would have been nice to keep them online for posterity. After a bit of work to remove server-side scripting (in order to use the Github free hosting), here the starting point to explore this portion of my life.\nPS: They'll remain online as long as Github will allow free hosting :)\n","frontmatter":"title: C.Stem - Generative practices in Art and Design\ndate:   2018-01-03 14:00:00 +0100\nsubtitle: 3rd January, 2018\nstyle: purple\ncover: cover.jpg\ncategories: Projects\ntags: [project, legacy, cstem, creative, coding, generative]"},{"attributes":{"title":"Might become a lib","date":"2018-01-07 14:00:00 +0100","subtitle":"7th January, 2018","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","rivela","d3js","template","reusable","proof","chart"]},"body":"I've thought a bit on reusable D3.js chart template lately.It's an interesting journey that led me to further thoughts with the chance to create even a long-term project.\nIt's still a working progress and far from having a roadmap. I really want to follow a bottom-up process.\nThis is the first module, a barchart generator.\nThe initialization\nMost D3.js based libraries use a specific API to handle the data binding with a selector.To me, the way D3.js handles that function sounds totally right. \nThis barchart generator needs to be configured first, in the same way d3-axis or other similar modules require: \nvar chart = rivela.barchart()\n    .width(200)\n    .height(200)\nThe module has some defaults and provides some configs, then, D3.js is explicitly required to complete the initialization:\nSee the Pen MrOQvG by Fabio Franchino (@abusedmedia) on CodePen.\n\n\nThe data structure\nChart libraries usually require specific data structure in order to build something visible. This is perfectly reasonable in order to avoid too much complexity into the lib just to rearrange datasets. On the other hand, it might result annoying restructuring a loaded dataset for a simple chart . \nWhile some structure is required, the user should be able to specify some options about how to use the dataset. \nI do really love how D3.js allows this kind of configuration by means of custom accessors. This module borrows the same strategy for custom configurations, such as:\nrivela.barchart()\n  .value(d => d.v)\nSee the Pen PEOgPx by Fabio Franchino (@abusedmedia) on CodePen.\n\n\nFurther configurations follow the same principle:\nSee the Pen BJmEby by Fabio Franchino (@abusedmedia) on CodePen.\n\n\nAn additional accessor might allow to specifing the array key in case of more complex dataset structure. This turns very useful on multiple instances of the same chart:\nSee the Pen MrORxm by Fabio Franchino (@abusedmedia) on CodePen.\n\n\nOther configurations\nDynamic accessors can be powerful also in other situation such as how to tint items based on some logic. Instead of putting this logic within the chart generator, let's rely on the full power of D3.js:\nSee the Pen LeOvaJ by Fabio Franchino (@abusedmedia) on CodePen.\n\n\nDynamic\nThe module is designed to accept updates. In this example you can push the 'update' button to add random data points: \nSee the Pen BJmEEy by Fabio Franchino (@abusedmedia) on CodePen.\n\n\nStyle\nI truly believe that styling should belong to CSS as much as possible. This is not always easy nor possible to do because some styles need to be calculated using javascript. Nevertheless, good implementation design can help a lot.\nHere an example about how to transform the default style through CSS:\nSee the Pen EobJJE by Fabio Franchino (@abusedmedia) on CodePen.\n\n\nConclusion\nI'm quite happy of this stage so far. As I said, I want to conduct a bottom-up process, therefore, we'll see what is going to become in the near future.\nStay tuned.\n","frontmatter":"title: Might become a lib\ndate: 2018-01-07 14:00:00 +0100\nsubtitle: 7th January, 2018\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, rivela, d3js, template, reusable, proof, chart]"},{"attributes":{"title":"Can we live without pies?","date":"2018-01-13 14:00:00 +0100","subtitle":"13th January, 2018","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","rivela","d3js","template","reusable","proof","chart"]},"body":"Cakes are delicious, thus, no! We cannot live without pies.\nIn this further iteration of my D3.js reusable templates journey, here another module that allows generating a pie/donut chart type with D3.js.\nTo learn more about some of the core principles, please refer to my previous article.\nAs in the previous module, the bootstrap relies to the D3.js data binding mechanism. A pie can become a donut by a metter of a config:\nSee the Pen PEemKV by Fabio Franchino (@abusedmedia) on CodePen.\n\nBy using some accessors it is possible to instruct the generator about how to use the given dataset without restructuring it as well as using custom function to tint elements:\nSee the Pen ypjbPe by Fabio Franchino (@abusedmedia) on CodePen.\n\nIt's dynamic\nThis module can receive data updates therefore the chart update accordingly (push the 'update' button):\nSee the Pen XVqRVM by Fabio Franchino (@abusedmedia) on CodePen.\n\nBeyond the Pie\nThe radius configuration can accept functions, thus, it opens up several way to build representation based on the pie/donut model:\nSee the Pen xpjdpX by Fabio Franchino (@abusedmedia) on CodePen.\n\nThe spirit of the whole project is to make easy further customizations using D3.js instead baking all the possibile user requirements within it:\nSee the Pen RxyVxe by Fabio Franchino (@abusedmedia) on CodePen.\n\nInteroperability\nThis is another major principle of the project: allowing easy interoperability between components such as this little initial example.\nClick on each slice to see the result of this demo:\nSee the Pen WdJjMN by Fabio Franchino (@abusedmedia) on CodePen.\n\nUI elements\nNothing stop to use this module as a tiny UI element such as a little gauge:\nSee the Pen GydmQP by Fabio Franchino (@abusedmedia) on CodePen.\n\nSo far\nStill happy of the results nevertheless some changes over the road. \nLet's see the next episode!\n","frontmatter":"title: Can we live without pies?\ndate: 2018-01-13 14:00:00 +0100\nsubtitle: 13th January, 2018\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, rivela, d3js, template, reusable, proof, chart]"},{"attributes":{"title":"Borrowing a barchart","date":"2018-01-15 14:00:00 +0100","subtitle":"15th January, 2018","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","rivela","d3js","template","reusable","proof","chart"]},"body":"I really enjoyed reading the last article from Datawrapper. I strongly suggest you to follow their blog.\nThe only missed thing, after finished reading it and checked back the chart, was that I really wanted to play with it to answer some curiosities that came into my mind. That's the benefit of interactive charts, isn't it?\nI took this as an opportunity to play more with my D3.js in-progress-chart-lib journey, thus, I borrowed their chart. \nThis is an interesting way to improve a project that is supposed to be abstract as much as possible. Trying to replicate, and hopefully improve, a given chart means basically deal with the needs of a potential user, a great way to let arise the limitations of some design choices. \nShow the data\nI've started to visualize the dataset kindly provided by the article:\nSee the Pen GyBjXr by Fabio Franchino (@abusedmedia) on CodePen.\n\nThis shows immediately a requirement the library cannot handle so far: the label format of a given axis. Instead of adding a configuration for the label format I've implemented the possibility to set a d3-axis object. This way, the limitation described above can be overcome with this setting:\nvar myCustomAxis = d3.axisBottom().tickFormat(d3.format('.0s'))\n\nvar chartGen = rivela.barchart()\n    .axisx(myCustomAxis)\nSorting the dataset\nThe next step was to let the user sort the charts using different keys:\nSee the Pen aEjQXG by Fabio Franchino (@abusedmedia) on CodePen.\n\nTo better try to spot interesting fact out of this chart we need a tool to play with the data points. The next iteration implements a rollover effect to select the same Country on both charts:\nSee the Pen NXBEmN by Fabio Franchino (@abusedmedia) on CodePen.\n\nThe initial goal\nThe first purpose of this exploration has always been to create an interactive version of the Datawrapper chart primarly to test my library, so here it is:\nSee the Pen WdKYBx by Fabio Franchino (@abusedmedia) on CodePen.\n\nThe trick here has been to use two barcharts stacked on each other using the same svg, setting a special CSS class to make invisible some duplicated elements such as axis, title and background. This is not the most efficient and elegant solution from the implementation point of view, but I like to achieve the desired result without polluting the library with further unnecesary options.\nThis exercise allowed me also to fix a couple of other constraints to let more freedom for the experienced user.\n","frontmatter":"title: Borrowing a barchart\ndate: 2018-01-15 14:00:00 +0100\nsubtitle: 15th January, 2018\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, rivela, d3js, template, reusable, proof, chart]"},{"attributes":{"title":"Merging csv files with Node.js and D3.js","date":"2018-01-19 14:00:00 +0100","subtitle":"19th January, 2018","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","nodejs","data","d3js","wrangling"]},"body":"Node.js is awesome because it's an ecosystem. It's even more awesome when used together with some popular libraries such as D3.js and Lodash. \nThe goal\nI've had to pre-process a bunch of csv files in order to work with a single dataset file for convenience. Node.js is the platform of choice for this type of tasks now and I couldn't be more satisfied of it.\nThe process\nHere a walk through of this little script that saves to me a lot of time.\nImport our weapons:\nconst d3 = require('d3')\nconst fs = require('fs')\nconst _ = require('lodash')\nReading a folder to get the file list calling a function for each file:\nvar files = fs.readdirSync(`${__dirname}/data`)\n_.each(files, filename => process(filename))\nRead the csv content and parse it with D3.js:\nvar process = name => {\n  var raw = fs.readFileSync(`data/${name}`, 'utf8')\n  var csv = d3.csvParse(raw)\n}\nWrangling some values before commit to the final array:\n\nvar process = name => {\n  ...\n  var parse = d3.timeParse('%m/%d/%y')\n  csv.forEach(d => {\n    d.timestamp = parse(d.Dates)\n  })\n}\nCreate an unique array with all the csv files merged together (thanks Lodash):\n\nvar db = []\nvar process = name => {\n  ...\n  var newdb = _.unionBy(db, csv, 'Dates')\n  db = newdb\n}\nSave the final dataset as JSON file:\n\nvar process = name => {\n  ...\n  fs.writeFileSync('db.json', JSON.stringify(db))\n}\nThe whole script generates a json file with all the entries. A perfect starting point for an explorative session with D3.js.\nFeel good.\n","frontmatter":"title: Merging csv files with Node.js and D3.js\ndate: 2018-01-19 14:00:00 +0100\nsubtitle: 19th January, 2018\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, nodejs, data, d3js, wrangling]"},{"attributes":{"title":"Welcome cryptocurrency","date":"2018-01-19 15:00:00 +0100","subtitle":"19th January, 2018","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","scaping","jquery","data","runkit"]},"body":"Everybody talks about cryptocurrencies these days.\nI'd like to explore the topic using a data-exploration approach.\nThe first thing to do is to find some dataset about the existing currencies out there. I've found CoinMarketCap.com as a good source but, unfortunately, no open data source there,  except a couple of JSON files used for some website search functions.\nSo, again, time for a good scraping activity, which is always fun.\njQuery is already included in the website, thus, here the snippet that might be used to dump all the crypto currencies listed on the full list page. Just open the javascript console and paste this code:\nvar db = []\n$('[role=\"row\"]').each((i, e) => {\n  var el = $(e)\n  var ob = {}\n  ob.id = el.attr('id')\n  ob.name = el.find('.currency-name-container').text()\n  ob.sym = el.find('.col-symbol').text()\n  ob.cap = el.find('.market-cap').text()\n  ob.price = el.find('.price').text()\n  ob.circ = el.find('.circulating-supply').text().trim()\n  ob.vol = el.find('.volume').text()\n  ob.h = el.find('.percent-1h').text()\n  ob.d = el.find('.percent-24h').text()\n  ob.w = el.find('.percent-7d').text()\n  db.push(ob)\n})\nconsole.log(JSON.stringify(db))\nOf course, this snippet will work until the HTML markup won't be rearranged.\nA better approach might be using Runkit to expose that snippet as an API-call in order to get the latest state of the list anytime you need it.\nNext time.\n","frontmatter":"title: Welcome cryptocurrency\ndate: 2018-01-19 15:00:00 +0100\nsubtitle: 19th January, 2018\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, scaping, jquery, data, runkit]"},{"attributes":{"title":"Using Smtp2Go with Node.js","date":"2018-01-20 14:00:00 +0100","subtitle":"20th January, 2018","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","nodejs","smtp2go","email"]},"body":"Sometimes you need a way to send email based on some automatisms or you need to send a bulk of emails without relying on external SaaS for some reasons.\nSMTP2Go is a neat service to send email programmatically by calling regular RESTfull API over the network. The service is kind enough to provide a free plan for those who don't have to send a massive amount of emails.\nUsing Node.js together with it is quite trivial. A simple module, let's say sender.js might be filled with this code:\nconst request = require('request')\n\nvar smtpurl = 'https://api.smtp2go.com/v3/email/send'\n\nvar smtpob = (name, email) => {\n  return {\n    'api_key': 'your-api-key',\n    'to': [`${name} <${email}>`],\n    'sender': 'My Company <hello@example.com>',\n    'subject': 'A Subject',\n    'text_body': 'some text'\n  }\n}\n\nmodule.exports = function () {\n  function send (name, email) {\n    var src = smtpob(name, email)\n\n    request\n          .post({\n            headers: {'content-type': 'application/json'},\n            url: smtpurl,\n            body: JSON.stringify(src)\n          })\n          .on('response', function (response) {\n            if (response.statusCode !== 200) {\n              console.log(response.statusCode)\n              console.log(response.statusMessage)\n            }\n          })\n          .on('data', function (data) {\n            console.log('decoded chunk: ' + data)\n          })\n          .on('error', function (err) {\n            console.log('Email sender', err)\n          })\n  }\n\n  return {send: send}\n}\nNow, in order to use with your content, go to create an index.js file with:\nvar sender = require('./sender.js')()\n\nsender.send('Fabio', 'hello@fabiofranchino.com')\nBy running this script I'll receive a message from it (please, change the email before using it!).\nIf you want to use this service in the right way, don't forget to configure properly the SPF record in your DNS to avoid to be caught by spam filters.\n","frontmatter":"title: Using Smtp2Go with Node.js\ndate: 2018-01-20 14:00:00 +0100\nsubtitle: 20th January, 2018\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, nodejs, smtp2go, email]"},{"attributes":{"title":"All Cryptos as API","date":"2018-01-22 12:00:00 +0100","subtitle":"22nd January, 2018","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","scaping","jquery","crypto","runkit"]},"body":"Update: it turns out there is a public API on Coinmarketcap.com I didn't find out before. Thanks to let me know.\nFollowing the previous article about getting the whole list of the cryptocurrencies from Coinmarketcap.com, here the same scraping code packed in a nice end-point call thanks to Runkit, of course.\nI've resurrected a previous and working example that uses Cheerio to transform the HTML source in a JSON array.\nYou can check the source here or test the API call straight there.\n","frontmatter":"title: All Cryptos as API\ndate: 2018-01-22 12:00:00 +0100\nsubtitle: 22nd January, 2018\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, scaping, jquery, crypto, runkit]"},{"attributes":{"title":"Avoid navigate with href with D3.js","date":"2018-01-22 15:00:00 +0100","subtitle":"22nd January, 2018","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","d3js","href","jquery","tip"]},"body":"This might be a dumb post but I like the idea to log even tiny bits of what I learn in my daily routine.\nToday a spent a bit of time figuring out how to disable an href HTML link when the same should be controlled by D3.js.\nI have a considerable experience with D3.js, nevertheless, sometimes I got stuck on a very basic situation like this one.\nI usually handle this stuff with jQuery with the following, well-known, snippet:\n$('.mylink').on('click', function(){\n  // my code here\n  return false\n})\nThe return false is the key to stop the default behavior of the browser. The same doesn't work when using D3.\nIndeed, D3.js doesn't bind the callback function with the event itself. The this keyword doesn't represent the event object. You need to use a specific D3 object (d3.event) to catch it, then, you're able to modify the native event methods, i.e. the preventDefault method to stop the default browser behavior, such as:\nd3.select('.mylink').on('click', function(){\n  // my code here\n  var event = d3.event\n  event.preventDefault()\n})\nHope this might save bits of time to some random readers.\n","frontmatter":"title: Avoid navigate with href with D3.js\ndate: 2018-01-22 15:00:00 +0100\nsubtitle: 22nd January, 2018\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, d3js, href, jquery, tip]"},{"attributes":{"title":"Play with  a custom progress scroll indicator code","date":"2018-01-25 14:00:00 +0100","subtitle":"25th January, 2018","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","jquery","progress","custom","tip"]},"body":"If you want to implement a progress scroll indicator, you have two options: \n\nsearch for tutorials or drop-in libraries\ndo the hard work to learn something new\n\nThe latter is what I did that turned out simpler (from the amount of code perspective) than I thought at first instance. It has been also the opportunity to play with this specific behavior outside the initial goal.\nFirst off, the code. A progress bar element might be a simple div that needs to be styled with CSS. With the following HTML and CSS we have now an element ready to be managed by javascript:\n<div id=\"indicator\"></div>\n#indicator{\n  position: fixed;\n  top:0;\n  left:0;\n  height: 3px;\n  background-color: red;\n  z-index: 999;\n}\nIf you add this CSS rule you'll have a much more smooth animation. I do prefer the more straight width calculation, though.\ntransition: width .25s ease-in-out;\nThe next requirement is the logic part (I'm shamelessly using jQuery to write less code here):\n$(window).on('scroll', function () {\n  var scrollPos = $(window).scrollTop()\n  var winHeight = $(window).height()\n  var docHeight = $(document).height()\n  var perc = 100 * scrollPos / (docHeight - winHeight)\n  $('#indicator').width(perc + '%')\n})\nThat's it. With these code you'll have a neat progress scroll indicator on your page:\nSee the Pen NXZdgq by Fabio Franchino (@abusedmedia) on CodePen.\n\nYou might notice that using percentage value means basically that the progress bar is fluid by design no matter the window width even if the user resizes the window at runtime. \nAs you might notice, the js function compute a perc value that can be used for anything in your page, let's say, the background color:\nSee the Pen ppXRpN by Fabio Franchino (@abusedmedia) on CodePen.\n\nOr using the powerful animation library TweenMax to control more complex animations using the TimelineMax component with this code:\nvar tl = new TimelineMax().pause()\ntl.to('#a', 4, {y:100})\ntl.to('#b', 4, {y:200})\n...\n\n$(window).on('scroll', function () {\n  var scrollPos = $(window).scrollTop()\n  var winHeight = $(window).height()\n  var docHeight = $(document).height()\n  var perc = scrollPos / (docHeight - winHeight)\n  tl.progress(perc)\n})\nWhere the Timeline progression will be handled by the perc value.\nSee the Pen LeKxMX by Fabio Franchino (@abusedmedia) on CodePen.\n\nAs you can see, endless possibilities.\n","frontmatter":"title: Play with  a custom progress scroll indicator code\ndate: 2018-01-25 14:00:00 +0100\nsubtitle: 25th January, 2018\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, jquery, progress, custom, tip]"},{"attributes":{"title":"Welcome Observable","date":"2018-02-02 14:00:00 +0100","subtitle":"2nd February, 2018","style":"red","cover":"cover.jpg","categories":"Opinions","tags":["opinion","editor","online","observable","announcement"]},"body":"I've already shown multiple times my excitement for Runkit.\nFor that reason, I'm furthermore excited for the recent announcement of another incredible online tool: Observable.\n\nBoth tools overlap a bit but it looks like Observable try to push further.Indeed, it is already incredible even considering its inception. It's an online code editor that allows reactive programming to foster discoverability and effective communication where data exploration/visualization can find the most natural place to live.\nIt's in beta but the examples that can be explored are bold.\nCan't wait to test it out and, most importantly, use it in some project.\n","frontmatter":"title: Welcome Observable\ndate: 2018-02-02 14:00:00 +0100\nsubtitle: 2nd February, 2018\nstyle: red\ncover: cover.jpg\ncategories: Opinions\ntags: [opinion, editor, online, observable, announcement]"},{"attributes":{"title":"Hexo: a new Hero?","date":"2018-02-03 14:00:00 +0100","subtitle":"3rd February, 2018","style":"red","categories":"Opinions","cover":"cover.jpg","tags":["opinion","static","hexo","site","generator","nodejs","jekyll"]},"body":"I've been interested in static site generators lately. \nIndeed, this blog is cooked with Jekyll, actually the most popular static site generators out there. It does its job well, nevertheless, it shows its ages. Developing a theme is not a nice experience. It's in this context that Jekyll shows its age, because you have to develop the HTML/CSS theme the old way as we used to with PHP a few years ago. Crafting fake full pages in HTML/CSS, then split them into chunks in order to put it in a working system such as PHP or Jekyll.\nHexo, a static site generator based on Node.js, has been on my radar for a while and recently, I've had the chance to test it out. It doesn't add anything special from the innovation point of view but includes everything you need to develop a modern website with some interesting features that complete somewhat my requirements in order to support fast prototyping and iterations:\n\npartial includes\ntemplating\ndata store (markdown and json)\npost process (minification, babel)\nextendible (with plugin)\nhot reload (with Browser-sync official plugin)\n\nWhile almost all of those requirements are present in many static generators, Jekyll included, the last one is what I'm excited more.\nFurthermore, Hexo has some interesting points, such as:\n\ntemplate engine agnostic\nsolid plugin architecture\nscripts features\n\nI'm currently testing it to evaluate a possible adoption to support the development of a wide range of digital product. I'll publish my results on this blog, of course.\n","frontmatter":"title: \"Hexo: a new Hero?\"\ndate: 2018-02-03 14:00:00 +0100\nsubtitle: 3rd February, 2018\nstyle: red\ncategories: Opinions\ncover: cover.jpg\ntags: [opinion, static, hexo, site, generator, nodejs, jekyll]"},{"attributes":{"title":"The new creative lifeblood","date":"2018-02-06 14:00:00 +0100","subtitle":"6th February, 2018","style":"red","categories":"Opinions","cover":"cover.gif","tags":["opinion","webdesign","responsive","brutalism","css","creative","trend"]},"body":"Every web design savvy knows this joke: which one of the two possible websites are you currently designing?\n\nAside from the funny thing, this is an issue in creativity. Apparently, there's no room for further exploration. Did we reach the perfection or the enlightenment? I hope not!\nThank god, there's hope:\n\nIt does rely on a very interesting bottom-up and well-known movement called Brutalist the web design community started to become part of a while ago.\nHere's the lovely brief manifesto:\n\nIn its ruggedness and lack of concern to look comfortable or easy, Brutalism can be seen as a reaction by a younger generation to the lightness, optimism, and frivolity of today's web design.\n\nPlease don't be superficial. What it seems just gym for young kids it might be a seed for new aesthetics. \nCreative and design studios started to embrace it as a means of exploration such as HawRaf but one of the boldest examples of new possibilities that might arise is without any doubt the home page of the designer Lynn Fisher:\n\nHow to use the media query, a CSS function to manage the responsiveness of a website, in a creative and novel way. Chapeau!\n","frontmatter":"title: The new creative lifeblood\ndate: 2018-02-06 14:00:00 +0100\nsubtitle: 6th February, 2018\nstyle: red\ncategories: Opinions\ncover: cover.gif\ntags: [opinion, webdesign, responsive, brutalism, css, creative, trend]"},{"attributes":{"title":"How to import csv data into Contentful","date":"2018-02-12 14:00:00 +0100","subtitle":"12th February, 2018","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","nodejs","contentful","import","data","dump"]},"body":"Developing a CMS is hard. \nThis is why Contentful, or any other equivalent white-label and generic CMS, is a very interesting option when a project requires a way to manage contents maintaining a clear separation with the possible end-points (website, mobile-app, installation, etc).\nIt doesn't come for free (but there's a free tier, though), nevertheless, it's affordable enough for most small/mid size project in our field.\nRecently, I had the necessity to import a consistent set of information into Contentful.\nWhile it comes with a layer of API in order to both read and write information, there's a quicker way to handle this specific task with ease.\nUsing a specific module for Node.js, it's a matter of few lines of javascript to read a file in order to put it into the database of the service.\nFirst thing, let's include the required modules (remember to install them first with npm):\nconst contentful = require('contentful-management')\nconst d3 = require('d3')\nconst fs = require('fs')\nThen, read the local dump, assuming it's a csv formatted file (yes, I'm using D3.js just to parse the file because I feel at home with it):\nvar raw = fs.readFileSync('db.csv', 'utf8')\nvar dsv = d3.dsvFormat(';')\nvar db = dsv.parse(raw)\nNow, let's create a connector with the Contentful backend:\nconst client = contentful.createClient({\n  accessToken: '<your-access-token>'\n})\nYou can create the access token in \"Space settings/Content management tokens\" tab, remembering that you can see it just one time during the creation process (so, copy it before close the modal).\nNow it's time to perform some data munging in order to be compatible with the Contentful space structure.\nSuppose you have this csv file:\nid,TheName,TheAge\n1,John,42\n2,Tim,41\n3,Jep,39\n4,Min,28and want to map each csv column with the right field name in the content-model:\nclient.getSpace('<space-id>')\n    .then((space) => space.createEntry('<content-type-name>', {\n        fields: {\n            name: {\n                'en-US': d.TheName\n            },\n            age: {\n                'en-US': d.TheAge\n            }\n        }\n    }))\n    .then((entry) => console.log(entry))\n    .catch(console.error)\nYou see, you have to properly fill the space-id and the content-type-name as well as respecting the same field structure you gave on your content model.\nNow it's a matter of include tha above snippet into a function and call it for each row parsed from the csv.\n","frontmatter":"title: How to import csv data into Contentful\ndate: 2018-02-12 14:00:00 +0100\nsubtitle: 12th February, 2018\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, nodejs, contentful, import, data, dump]"},{"attributes":{"title":"The non-linear evolution","date":"2018-02-21 14:00:00 +0100","subtitle":"21st February, 2018","style":"red","categories":"Opinions","cover":"cover.jpg","tags":["opinion","infographic","history","evolution","life"]},"body":"I was reading the wonderful What Technology Wants by Kevin Kelly (which by the way I strongly suggest to read because open the minds) and I stumbled upon an interesting picture that catches my eyes for a while.\nIt refers to the evolution of the Medieval helmets over the centuries:\n\nIt's a beautiful as well as very informative infographic that depicts, in a clear way, how the evolution (in this case of an object) follows an organic process suggesting the non-linearity of its journey making its evolution unpredictable by design.\nThe drawing is by the zoologist Bashford Dean and it has been published around 1920, just to make it in the right perspective.\n","frontmatter":"title: The non-linear evolution\ndate: 2018-02-21 14:00:00 +0100\nsubtitle: 21st February, 2018\nstyle: red\ncategories: Opinions\ncover: cover.jpg\ntags: [opinion, infographic, history, evolution, life]"},{"attributes":{"title":"Spikes vs Organic","date":"2018-02-28 14:00:00 +0100","subtitle":"28th February, 2018","style":"orange","cover":"organic.png","categories":"Review","tags":["review","blog","analytics","stats"]},"body":"\nSo, we can buy followers and web-traffic these days, what a great time to live! \n\nI've started this blog a bit more than a year ago. I did it because I wanted to build something useful for me and for other people plus other reasons you might discover yourself in my Hello World post.\nI do track you\nI track its usage mainly for learning purposes.\nContrary to what many people might believe, I've learned that a massive amount of traffic in a short period of time is not something interesting nor valuable.\nThis is the full 2017 \"audience\" report from Google Analytics:\n\nYou can easily spot a couple of spikes thanks to YC since two of my posts happened to live on its front page for a whole day.\nAside from the momentary happiness of having hundreds of users over my pages, it's quite evident that those spikes didn't contribute to consolidate an 'audience' on my blog. \nI know that it might be a totally different scenario if all my articles were on YC or my contents were about different topics or even the quality of my posts were better or worse but, who knows?Indeed, I'm making assumptions based on data in a specific context. The same in a different context would bring to different conclusions.\nThe following chart, instead, reveals a different story:\n\nIt shows the organic traffic brought by Google search engine.\nBoth charts show two very different situations and the latter speaks about little numbers nevertheless it's the one I do care most because I'm all about perspectives.\n","frontmatter":"title: Spikes vs Organic\ndate: 2018-02-28 14:00:00 +0100\nsubtitle: 28th February, 2018\nstyle: orange\ncover: organic.png\ncategories: Review\ntags: [review, blog, analytics, stats]"},{"attributes":{"title":"Crisis","date":"2018-03-08 14:00:00 +0100","subtitle":"8th March, 2018","style":"red","categories":"Opinions","tags":["opinion","general","thoughts","feeling"]},"body":"I've started to think about the term crisis after some random news I've read somewhere.\nThis fact made me think deeper about the meaning of those events in general.\nPeople experience this type of situation all the time.\nMaybe there is a key to interpretation that might help me to understand better.\nSomething kicked in my mind after reading the official crisis definition:\n\nAny event that is, or is expected to lead to, an unstable and dangerous situation affecting an individual, group, community or society.\n\nBasically, it's something negative because it changes a given equilibrium bringing inevitably into something different.\nThe dangerous connotation depends on the situation, though.\nIn human life, a crisis needs to be pair with another concept which is the resilience, the capacity to adapt to changes without break or sunk.\n\nThe crisis is the fact, the resilience is the reaction to that fact.\n\nIn psychology, the resilience of a human being is the process of learning and understanding that leads to the subsequent reaction against a particular sudden negative situation.\nIt's not a positive feeling since the first reaction typically involves upset behaviors, to say the least.\nBut if the next feeling goes toward finding solutions instead of blaming someone or something, chances are the resilience process (which is a positive process) has been started instead of a negative one that might conduct into something dangerous.\nTo deconstruct a bit the initial definition, the crisis leads, for sure, to an unstable situation, the dangerous part arises (or not) based on how the human being reacts to that instability.\n","frontmatter":"title: Crisis\ndate:   2018-03-08 14:00:00 +0100\nsubtitle: 8th March, 2018\nstyle: red\ncategories: Opinions\ntags: [opinion, general, thoughts, feeling]"},{"attributes":{"title":"Is it what we want?","date":"2018-03-15 14:00:00 +0100","subtitle":"15th March, 2018","style":"red","categories":"Opinions","tags":["opinion","general","thoughts","web","future"]},"body":"I do confess. I'm not a youtube user in the sense I don't usually use it for browsing and searching. That brought me to not take much into consideration a real issue. It happens to watch videos on it referred from external sources such as blog posts, news articles and news feed.\nIn \"Something is wrong on the internet\" article that spread pretty well lately over the web, the author tries to alert about a danger for children present in Youtube platform.\nBesides the questionable scream of danger, I agree with the fact there's something really wrong with that system. If you do care about the online reality, you should read it and put the topic on your radar to track its evolution\nThe author even begins the article with this kind of disclaimer which I find interesting:\n\nI usually write on my own blog, but frankly I don’t want what I’m talking about here anywhere near my own site.\n\nSide note: interesting enough because platform such as Medium are used to build proper audiences while the author is using it as a throw-away notepad.\nBesides that, the author is very clear about the danger for children the system exposed them. Basically, there are thousands of 'entities' that learned a quick way to earn some money on Youtube.\nThe trick\nIf you upload a lot of videos on a Youtube channel, tricking the views, comments, likes using bots, exploiting the YT algorithm using fake title/tags to get exposed on 'related' videos, you'd probably end up to earn some interesting money via the builtin advertisement system.\nEven better, if you are able to generate thousands of videos by means of other bots, the potential of exposure growth by some magnitude order.\nThe problem here is the video quality. But what if the target of these very low-quality videos is not able to understand this trick nor distinguish between this garbage and the official materials? Let's say.. very young children.\nIt's true this sentence, though:\n\nThis is content production in the age of algorithmic discovery — even if you’re a human, you have to end up impersonating the machine.\n\nI can only say what a waste! Thousands of videos generated and uploaded every day, garbage that consume energy, resources and time for what?\nIs it the web we want to live with? I don't think so.\n","frontmatter":"title: Is it what we want?\ndate:   2018-03-15 14:00:00 +0100\nsubtitle: 15th March, 2018\nstyle: red\ncategories: Opinions\ntags: [opinion, general, thoughts, web, future]"},{"attributes":{"title":"What is Grit","date":"2018-03-25 14:00:00 +0100","subtitle":"25th March, 2018","style":"red","categories":"Opinions","tags":["opinion","general","thoughts"]},"body":"How great are these quotes?\n\nGrit is your ability to keep going even when it hurts.\n\nand\n\nProduct/market fit is not just an aha moment. It’s the summation of lots of broad experiments and microlearnings over many years.\n\nThese quotes come from Ooshma Garg, founder of Gobble, an online service for fast dinner kit production and delivery.\nResults comes from hard work keeping up even when it looks like everything doesn't make sense.\nSource\n","frontmatter":"title: What is Grit\ndate:   2018-03-25 14:00:00 +0100\nsubtitle: 25th March, 2018\nstyle: red\ncategories: Opinions\ntags: [opinion, general, thoughts]"},{"attributes":{"title":"Don, we don't need to slow down","date":"2018-03-26 14:00:00 +0100","subtitle":"26th March, 2018","style":"red","categories":"Opinions","tags":["opinion","thoughts","donnrman","technology","driveless"]},"body":"I'm a fan of Don Norman. I consider his \"The Design of Everyday Things\" book a milestone for every designer.\nBut this cannot stop me to disagree with him and, more precisely, with his latest essay about driverless car in the context of the recent accident that occurred some days ago.\nSo, Don: why that caution? You begin even with the obvious question:\n\nImperfect automation, continually getting better? Or distracted drivers, continually getting worse? Choose.\n\nIf this means 1 vs 40 deaths, the former choice, of course.\nIf you had a magic wand to swap the system overnight, wouldn't you do it? I would.\nIn technology (and science) there is a main rule: the more the tests the better the knowledge, thus, refinements and fixes.\nThe comparison with the medical industry and the approval process doesn't really make sense to me.Putting chemical substance into bodies is not like experimenting with a technology such as the autonomous driving car. Medicine can have impacts and bad (unexpected) consequences even after 10/15 years. Wrongly designed drug can increase deaths while the actual self-driving technology is able to reduce (not eliminate) the accidents.\nThere are technologies, much more potentially dangerous than the self-driving one, that have been added in our lives without any caution nor questioning (I'm referring to any tech based on frequencies such as wifi, mobile cells, etc).\nI'm not a technology-first guy but I think that we should use much care in other fields than the autonomous driving idea, though.\n","frontmatter":"title: \"Don, we don't need to slow down\"\ndate: 2018-03-26 14:00:00 +0100\nsubtitle: 26th March, 2018\nstyle: red\ncategories: Opinions\ntags: [opinion, thoughts, donnrman, technology, driveless]"},{"attributes":{"title":"How to load an external image in SVG with D3.js","date":"2018-03-26 14:00:00 +0100","subtitle":"26th March, 2018","style":"blue","categories":"Tutorials","tags":["tutorial","d3js","svg","image","load"]},"body":"In order to load an image into a svg tag we usually need a reference of the svg first (assuming there's a single svg tag in the html document), with this code:\nvar svg = d3.select('svg')\nThen, here the script to load an image both from a local or remote path. Basically we need to append an empty image tag within the svg and decorate its attribute in order to provide the image location as well as the image dimensions:\nvar myimage = svg.append('image')\n    .attr('xlink:href', 'http://lorempixel.com/200/200/')\n    .attr('width', 200)\n    .attr('height', 200)\nUnfortunately, in the svg realm, we don't have the magic of the box-model of the browser that is able to guess the image dimensions and the proper aspect-ratio for free.\nIn svg we need to explicitly set both the width and the height of the image we want to show.\nOf course, we can position the image in the canvas space by using regular x and y attributes, such as:\nmyimage.attr('x', 50)\nor even using the transform attribute to translate, scale and rotate our picture such as:\nmyimage.attr('transform', 'rotate(90)')\nHere the working Codepen:\n\n  See the Pen \n  Load an image in SVG with D3.js by Fabio Franchino (@abusedmedia)\n  on CodePen.\n","frontmatter":"title: How to load an external image in SVG with D3.js\ndate: 2018-03-26 14:00:00 +0100\nsubtitle: 26th March, 2018\nstyle: blue\ncategories: Tutorials\ntags: [tutorial, d3js, svg, image, load]"},{"attributes":{"title":"D3.js, Data science, Crypto stuff and more","date":"2018-03-27 14:00:00 +0100","subtitle":"27th March, 2018","style":"red","cover":"cover.png","categories":"Opinions","inc":"nothing.html","tags":["opinion","announcement","thoughts"]},"body":"I'm particularly excited to announce my upcoming Data Visualization courses, same field but different context.\nBig Dive 7\nThis year, alongside the regular program to become a data scientist, there will be an additional module, completely devoted to the Dataviz discipline, designed specifically for wannabes dataviz practitioners. \nBig Dive into Dataviz is the intensive hands-on educational course that will take place, from 11th to 15th June 2018, in Turin, Italy.\nIf you are more a techy-guy, interested in data science field then Big Dive 7 full program is a better option. You're still going to learn the fundamentals of the data visualization alongside other disciplines.\nAdventures in Data Visualization\nBy following the experimental tone of the last edition, this year the usual summer workshop dedicated to the data visualization will open its doors to the cryptocurrency world. Can't wait to see the final results.\nThe workshop will take place in Lugano, Switzerland from 15th to 19th July 2018, hosted by SUPSI University.\nYou can get full information from here.\n\nHope to see you in some of them. Feel free to ask for anything.\n","frontmatter":"title: D3.js, Data science, Crypto stuff and more\ndate: 2018-03-27 14:00:00 +0100\nsubtitle: 27th March, 2018\nstyle: red\ncover: cover.png\ncategories: Opinions\ninc: nothing.html\ntags: [opinion, announcement, thoughts]"},{"attributes":{"title":"How to use Google Spreadsheet as data source","date":"2018-04-11 14:00:00 +0100","subtitle":"11th April, 2018","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","csv","spreadsheet","import","data"]},"body":"Do you know you can publish any Google Spreadsheet in a CSV format for convenient usage in other environments, let's say, in a D3.js script?\nI know, it's not the revelation of the year. Blame to me since I've discovered it only recently.\nGoogle Spreadsheet can be an effective and accessible tool for initial data cleaning, exploration and visualization. Indeed, it can be used also for powerful data wrangling thanks to its set of formulas and computation ability.\nIt can be used as a single source of truth (because the export gets updated automatically if you modify something in the sheet) for an interactive visualization making it an interesting option for every DataViz practitioners.\nThe following is a very basic Proof-Of-Concept of what I said. The spreadsheet can be published as a whole as well as a partial set of sheets. You can grab the URL according to the format you need, for instance, here the HTML format for easy embedding:\n\n\nAnd here the live sketch with a little barchart using the spreadsheet as data source:\nSee the Pen TestLoadGSPXwithD3 by Fabio Franchino (@abusedmedia) on CodePen.\n\nI'll post more use-case with this combination.\n","frontmatter":"title: How to use Google Spreadsheet as data source\ndate: 2018-04-11 14:00:00 +0100\nsubtitle: 11th April, 2018\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, csv, spreadsheet, import, data]"},{"attributes":{"title":"Creating a smart layout with CSS flex","date":"2018-04-28 14:00:00 +0100","subtitle":"28th April, 2018","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","css","flex","layout","smart"]},"body":"Sometimes I use this blog to remind me some technique I learned time ago. I cannot keep everything in my memory, thus, I need to download some stuff somewhere. This blog serves also for that!\nThis is why I'm going to document this little technique I learned to solve a specific layout need for a personal project both for my personal annotation as well as in the hope it might be useful to someone else.\nMy problem was: how to keep some content centered vertically in a given wrapper BUT if that content gets bigger the aforementioned wrapper would be so nice to provide a scrollbar?\n\nThis looks a no-brainer problem with CSS flex, isn't it?\n\nThe first, and most obvious attempt, failed. Using a flex wrapper with justify-content:center property was not enough:\nSee the Pen not smart layout by Fabio Franchino (@abusedmedia) on CodePen.\n\nFor some reason, the content, the moment it needs more space, is placed outside the top side of the wrapper making impossibile to reach the top portion of the content itself.\nAfter a bit of trial and error, I've ended up with a working solution, with an additional flex wrapper:\nSee the Pen smart layout by Fabio Franchino (@abusedmedia) on CodePen.\n\nThe trick here has been separating the wrapper that is responsible to center the whole content from the one that is responsible to distribute each single items.\n","frontmatter":"title: Creating a smart layout with CSS flex\ndate: 2018-04-28 14:00:00 +0100\nsubtitle: 28th April, 2018\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, css, flex, layout, smart]"},{"attributes":{"title":"Scroll indicator with Vue.js","date":"2018-04-30 14:00:00 +0100","subtitle":"30th April, 2018","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","vue","js","scroll","vanilla"]},"body":"I'm having fun with Vue.js lately. \nI believe (and I'm not the only one) that its success is due to its multiple and progressive possibilities to adopt it, a very different strategy compared with its direct main competitors.\nTo prove its benefits further to myself, I've decided to convert a previous example I did with jQuery some time ago. That also means I'd had to get rid of jQuery utilities in favor of pure vanilla javascript functions, not rocket science here but I've still learned some bits out of it.\nThe markup\nThe greatest benefit of frameworks such as Vue, React and Angular is that they allow thinking a project as a collection of components instead of a whole monolith. Once you really begin to think that way, the whole process of a project implementation becomes much more easy to deal with.\nSo, I've envisioned and written down my ideal markup for this project, something like:\n<div id=\"app\">\n  <indicator></indicator>\n  <txtdummy></txtdummy>\n</div>\nTwo components, the former would be the progress indicator, the latter a container with dummy text.\nBootstrap the app\nThis is the usual way to bootstrap a Vue app:\nnew Vue({\n  el:'#app'\n})\nNext, we need to create the components, to put before the bootstrap instantiation.\nThe scroll component\nI've ported the previous jQuery based code into vanilla javascript and put it into this component. I've spent a bit of time to figure out why document.body.clientHeight didn't matches the (apparently) equivalent $(document).height().   \nAfter a bit of research, I've understand that the right property to get the proper calculation was document.documentElement.scrollHeight. Good to know.\nVue.component('indicator', {\n  template:'<div id=\"indicator\"></div>',\n  mounted:function(){\n    var vm = this\n    window.addEventListener('scroll', function(e){\n      var scrollPos = window.scrollY\n      var winHeight = window.innerHeight\n      var docHeight = document.documentElement.scrollHeight\n      var perc = 100 * scrollPos / (docHeight - winHeight)\n      vm.$el.style.width = perc + '%'\n    })\n  }\n})\nThe dummy text component\nSince I wanted to keep my markup clean and short, I've decided to create a small component that simply loads some dummy text from somewhere and populate the html tag for me:\nVue.component('txtdummy', {\n  template: '<h1>{{str}}</h1>',\n  data:function(){\n    return{\n      str: ''          \n    }\n  },\n  mounted:function(){\n    var url = 'https://baconipsum.com/api/?type=meat-and-filler&paras=5&format=text'\n\n    var vm = this\n    axios.get(url)\n      .then(function(d){\n        vm.str = d.data\n      })\n      .catch(function(e){\n        console.log(e)\n      })\n\n  }\n})\nAs you can see, I've used an additional library to make a request, Axios for instance, because Vue doesn't come with this capability.\nSo far, so good, hopefully more to come.\nDemo time\nHere the Codepen with the above working code:\nSee the Pen Scoll Indicator with Vue (revisited) by Fabio Franchino (@abusedmedia) on CodePen.","frontmatter":"title: Scroll indicator with Vue.js\ndate: 2018-04-30 14:00:00 +0100\nsubtitle: 30th April, 2018\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, vue, js, scroll, vanilla]"},{"attributes":{"title":"Is Figma the future of creative tools?","date":"2018-05-16 14:00:00 +0100","subtitle":"16th May, 2018","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","figma","webtask","process"]},"body":"I've started to be excited about Figma since the Web API announcement.\nTheir vision is actually the most interesting and reasonable idea of the future of creative tools.\nIt is both simple and powerful: every Figma document (and every single element) can be accessed through API.\nThat means: new tools and practices will arise to foster better process and outcomes as well. New paradigms of interactions between creatives and technologists will be invented. Exciting time to work in creative industries.\nBy teaching in design schools, I've always struggled to provide a solid process to both let them draw on a comfortable tool such as Adobe Illustrator and apply coding strategies to enhance their creations using Javascript.\nThe SVG format is nice and suitable for this kind of interaction. Adobe Illustrator, on the other side, is not so good at exporting SVG files (despite being the best compared with the alternatives).\nFigma can become that solid process. The students can either draw on Figma and switch on, let's say Codepen, to interact with it in seconds.\nHere a quick proof-of-concept. The following Codepen loads a Figma document as SVG and inject it to the body, so I can be manipulated with Javascript:\nSee the Pen FirstTestWithFigma4APIWithWebTask by Fabio Franchino (@abusedmedia) on CodePen.\n\nAs you can see, the url is not a Figma endpoint but a WebTask service, thus, the X-Figma-Token can be hidden, also simplifying the script in Codepen for newbies.\nHere the source of the task for future reference:\nconst req = require('request')\n\nmodule.exports = function (context, cb) {\n  const key = context.query.key\n\n  var options = {\n    url: `https://api.figma.com/v1/images/${key}?ids=0:1&format=svg`,\n    headers: {\n      'X-Figma-Token': 'put-your-api-key-here'\n    }\n  }\n\n  req(options, (error, response, body) => {\n    var data = JSON.parse(body)\n    var url = data.images['0:1'] // get the static url to download the SVG file\n    req(url, (error, response, body) => {\n      cb(null, body)\n    })\n  })\n}\nIt'll be the future? I don't know but I'd bet on it.\n","frontmatter":"title: Is Figma the future of creative tools?\ndate: 2018-05-16 14:00:00 +0100\nsubtitle: 16th May, 2018\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, figma, webtask, process]"},{"attributes":{"title":"Little Webtask.io sketch","date":"2018-05-19 14:00:00 +0100","subtitle":"19th May, 2018","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","webtask","vue"]},"body":"Webtask.io is a wonderful service that allows deploying little server-side functions in the cloud without worrying (or even thinking) about server setup.\nIt's one of the many alternatives in the serverless movement to allow people to deploy lambda functions that can potentially scale at a fraction of cost of traditional solutions.\nWebtask provides the most interesting and seamless development experience. You can even write functions with their online editor, straight in the browser. In my case, I wrote a little Node.js function and deployed with their CLI.\nEvery Webtask function can be invoked as regular remote service or API call. GET parameters can be used as well.\nHere a little example (powered by Vue.js) that allows the user to add or subtract a counter, saving the result in the cloud. Webtask comes with a 500Kb size limit for simple JSON file persistence.\nSee the Pen Simple WebTask.io example for fun by Fabio Franchino (@abusedmedia) on CodePen.\n\nThe task is a Node.js function that uses a bunch of Webtask functions to save and retrieve the stored JSON file:\nmodule.exports = function (ctx, cb) {\n  ctx.storage.get(function (error, data) {\n    if (error) return cb(error)\n\n    data = data || {count: 0}\n\n    var val = parseInt(ctx.query.dir)\n\n    if (val && !isNaN(val)) {\n      data.count = data.count + val\n\n      ctx.storage.set(data, {force: 1}, function (error) {\n        if (error) return cb(error)\n        cb(null, {status: 200, data: data})\n      })\n    } else {\n      cb(null, {status: 200, data: data})\n    }\n  })\n}\n\nSource here.\n","frontmatter":"title: Little Webtask.io sketch\ndate: 2018-05-19 14:00:00 +0100\nsubtitle: 19th May, 2018\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, webtask, vue]"},{"attributes":{"title":"Exploit Npm local modules","date":"2018-07-16 14:00:00 +0100","subtitle":"16th July, 2018","style":"blue","cover":"cover.jpg","categories":"Tutorials","tags":["tutorial","nodejs","npm","module"]},"body":"I've just started a personal project, you know, the so-called side project, that involves a consistent amount of Node.js code.\nFor that reason, I've taken the time to investigate a bit on a neat feature of Npm, the most popular package manager for Node.js ecosystem, to handle local modules as they were regular Npm remote and published modules. \nBuilding a project with a mindset that foster modularity is both a great way to understand the project complexity as well as to fix and refactor it along the way without rewriting everything from scratch over and over. \nNpm is a platform (that comes pre-installed with Node.js) that allows publishing Node.js modules in order to let other people use them, in full open-source spirit. Any developer can then download specific modules with a simple shell command. It allows also to use local modules in a local project, exploiting the good of the modular pattern without publishing them in the public registry.\nIn order to install a remote module we use this command:\nnpm install a_remote_module --save\nNpm query the registry in order to get the download url, this way a local copy of the module can be put within the project folder (usually in a node_modules folder).\nWe can do the same with local modules as well:\nnpm install file:local_modules/mod1 --save\nwhere mod1 is a regular Node module and local_modules is a folder within the project root folder.\nIn case you need to install a local module from another module/project outside the project root, you need to provide the full or relative path towards it.\nIn this tutorial I'm going to outline the step-by-step to learn how to write and use local modules in a Node.js based project.\nSetting up a Node project with NPM\nThis is the first step that requires a project folder and an init command such as:\nnpm init\nNpm will ask for some information in order to compile a basic package.json file properly.\nThen, let's create a local_modules subfolder where we're going to put our local modules.\nEach local module needs to be a folder within local_modules with a proper package.json file. Every time you need a new module, just create it with npm init.\n\nEach local module can have its own external node_modules as well: \n\nYou can compose a local module using other local modules:\n\nAnd finally you can use local modules in your project in the same way you'd do with the published one:\n\nThinking of a project as a collection of independent modules bring a huge benefit in terms of resiliency and maintainability. This is especially useful for long-term projects.\nYou can check-out the complete files from this repository.\n","frontmatter":"title: Exploit Npm local modules\ndate: 2018-07-16 14:00:00 +0100\nsubtitle: 16th July, 2018\nstyle: blue\ncover: cover.jpg\ncategories: Tutorials\ntags: [tutorial, nodejs, npm, module]"},{"attributes":{"title":"How to inject an external SVG with D3.js","date":"2018-07-25 14:00:00 +0100","subtitle":"25th July, 2018","style":"blue","cover":"cover.jpg","categories":"Tutorials","tags":["tutorial","d3js","svg","load"]},"body":"You know, SVG elements can be created and generated by external tools such as Adobe Illustrator or Sketch (or Figma, but this for another post). And that is great.\nMaybe you want to work with these files adding some code making them interactive or drawing further graphic elements using code (let's say, data-driven elements).\nYou already know that you may open the generated SVG file, copy the source code and paste it into your working HTML document. Not really efficient, uh?\nThere's a better way: load the SVG file and inject it into the HTML document at run-time.\n\nThis way you can go back and forth between the code editor and the SVG editor very fast, in full iterative and lean spirit.\nIf you have jQuery already loaded in your document, here the code to accomplish this task:\n$.get('myIllustration.svg', function(data){\n    $('body').append(data.documentElement)\n})\nSo basically you have to load an external resource, appending the resulting data to the body.\nIf you want to do the same with D3.js (I'm using the version 5 which introduces the promises) without relying with jQuery, here the same functionality:\nd3.xml('myIllustration.svg')\n    .then(data => {\n        d3.select('body').node().append(data.documentElement)\n    })\n or much more cleaner with a mix of pure javascript:\nd3.xml('myIllustration.svg')\n    .then(data => {\n        document.body.append(data.documentElement)\n    })\nRemember: this is going to work only under a local webserver. Double-clicking the index.html file definitely won't work due to browser security concerns. Use Brackets to have an all-in-one code editor and local webserver.\n","frontmatter":"title: How to inject an external SVG with D3.js\ndate: 2018-07-25 14:00:00 +0100\nsubtitle: 25th July, 2018\nstyle: blue\ncover: cover.jpg\ncategories: Tutorials\ntags: [tutorial, d3js, svg, load]"},{"attributes":{"title":"How to use Electron as a local server","date":"2018-08-03 14:00:00 +0100","subtitle":"3rd August, 2018","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","electron","local","server"]},"body":"I was poking with this little idea about using Electron as a host to run a local webserver, for a while. So, here the POC, even though I don't know if it's something that can be useful or not but, who knows?\nI've cloned the popular Electron Quick Start to have an Electron app without hassles, then run npm install and npm start to test whether my Electron instance worked properly.  \nI've decided to use node-static module as a local webserver which is dead-simple and good enough for this test. I've installed it with npm i node-static.\nThen, I've created a new server.js file in the root folder with the following code:\nvar static = require('node-static');\nvar file = new static.Server(`${__dirname}/public`)\n\nrequire('http').createServer(function (request, response) {\n    request.addListener('end', function () {\n        file.serve(request, response)\n    }).resume()\n}).listen(9990)\nThis is a very minimal local webserver the serves files in a folder. We also need a folder where to put the files that will be served by node-static, the project content should looks like this one: \n\nThe last point was about to run server.js from within Electron. The following code does the job and can be put in the main.js file or in the renderer.js as well, depending of the project scope:\nconst { fork } = require('child_process')\nconst ps = fork(`${__dirname}/server.js`)\nI'm exploiting an internal Node.js functionality to run a so-called child process to bootstrap the server.js script. The __dirname variable is required if you want to deploy on a binary build otherwise the script won't be reached properly.\nThat's approximately all. Now you just need to run the npm start command from the shell to run Electron and don't forget to point your browser to the URL http://localhost:9990:\n\nHappy hacking.\n","frontmatter":"title: How to use Electron as a local server\ndate: 2018-08-03 14:00:00 +0100\nsubtitle: 3rd August, 2018\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, electron, local, server]"},{"attributes":{"title":"On empathy","date":"2018-08-08 14:00:00 +0100","subtitle":"8th August, 2018","style":"red","categories":"Opinions","tags":["opinion","general","thoughts"]},"body":"I dare to say that empathy is the most important component in human relations.\nI don't know why the default setting for most human being (including me) is with empathy disabled.\nI think that if most people had it up and running, the world would be way more a better place.\nI've experienced this assumption from time to time.\nYou meet almost daily a stranger in your commute. You don't know him/her. For some weird reason, you start to think this person as a bit unlikable one. Days pass and your assumption get stronger and confirmed day after day.\nThen, one day, something different happens, such as a funny situation where both (you and him/her) assist and that moment becomes a means to comment and start talking for a bunch of seconds, you know, a little joke and that's it.\nInstantly, from that precise moment, that unpleasant person becomes nice and natural and even his/her facial expression (or your perception of) suddenly changes for the better.\nWe are weird creatures.\n","frontmatter":"title: On empathy\ndate: 2018-08-08 14:00:00 +0100\nsubtitle: 8th August, 2018\nstyle: red\ncategories: Opinions\ntags: [opinion, general, thoughts]"},{"attributes":{"title":"Vue directives in ES6","date":"2018-08-09 14:00:00 +0100","subtitle":"9th August, 2018","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","vue","es6","directive"]},"body":"I've just started studying seriously the vue-cli (now in version 3) because, among all the awesomeness of the framework, it allows to write in pure ES6 javascript, which is, you know, somewhat the future.\nI've already explored Vue in previous posts but I haven't written something about the directive feature in general.\nIn Vue world, there are two main ways to create bricks of your app, that are by:\n\ncomponents\ndirectives\n\nA component is a small piece of interface with some logic and style. A directive instead, decorate, add or modify an existing component or a simple DOM element with futher functionality, style or behaviour.\nA Vue directive in ES5\nIn plain ES5 javascript, creating a Vue directive is something like:\nVue.directive('make-it-red', {\n    inserted: function(el){\n        el.style.color = 'red'\n    }\n})\nand here how to use it in your document (Codepen here):\n<p v-make-it-red>\n    My Text\n</p>\nNow, you can see the directive has been registered in the global Vue instance, therefore, I can reuse the same functionality in any tag I want to color by red.\nBut global is evil\nOne of the things ES6 is trying to solve in the browser world is the global scope. When you import Vue in your browser, its instance is available in the window scope. Likewise, the directive I created before is available in the instance of Vue globally. This is not bad until the complexity of the app reaches some level and weird things begin to arise.\nES6 allows working without polluting the global scope. By now, not natively supported but it will in the future. Thanks to some smart tools such as vue-cli we can use it right now.\nA Vue directive in ES6\nLet's see the same above example using ES6 and the vue-cli. Suppose to save it as makeItRedDirective.js file:\nexport default{\n    inserted (el) {\n        el.style.color = 'red'\n    }\n}\nYou might notice the missing global declaration of the directive. Right now it is just a  function. In order to use it you need to import from within another file, a .vue file for instance:\n<template>\n    <div>\n        <p v-my-dir>My Text</p>\n    </div>\n</template>\n\n\n<script>\n    import myDir from './makeItRedDirective.js'\n\n    export default{\n        directives:{\n            'my-dir': myDir\n        }\n    }\n</script>\nDo you spot the difference? In ES6 you can import a directive giving a complete custom name to it. Right now the make-it-red directive can be renamed, giving much more responsibility to the developer (what about naming make-it-blue the same directive?)\nIf you want to make it global in ES6 you can do it modifying the directive like this:\nimport Vue from 'vue'\n\nexport default Vue.directive('make-it-red', {\n    inserted (el) {\n        el.style.color = 'red'\n    }\n}\nThis way you just need to import the directive without explicitly declare it in the component:\n<template>\n    <div>\n        <p v-my-dir>My Text</p>\n    </div>\n</template>\n\n\n<script>\n    import myDir from './makeItRedDirective.js'\n\n    export default{\n    }\n</script>\nHope this help new Vue learners.\n","frontmatter":"title: Vue directives in ES6\ndate: 2018-08-09 14:00:00 +0100\nsubtitle: 9th August, 2018\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, vue, es6, directive]"},{"attributes":{"title":"Deploy a back-end and front-end app using Heroku and Netlify","date":"2018-09-27 14:00:00 +0100","subtitle":"27th September, 2018","style":"blue","cover":"cover.jpg","categories":"Tutorials","tags":["tutorial","node","vue","heroku","netlify"]},"body":"I'm working on a side project that needs to be deployed online. I made some research and test, thus, here some documentation that might be useful to someone.\nIn this POC I wanted to deploy a minimal modern webapp (backend and frontend) on two different platforms, in order to get the most out of them.\nNowadays we like to make webapp as SPA (Single Page Application) that consumes data by means of API (Application Program Interface). This is a good way to split the complexity and responsibility in different codebases.\nWhile Heroku is a very good option to deploy an api-based backend app in seconds, Netlify is a much better solution for frontend app (build system, CDN and more).\nHere the steps and source code to start from zero to a minimal remote and working app.\nThis little guide assumes you already have Node.js installed and some little experience on running commands from within the CLI (Terminal or bash interface)\nThe backend\nI've used Node.js and Express.Js to develop this api-only backend POC and here the steps to set it up properly considering the final goal:\n\nCreate a new Github repository, check it out on your local computer, open that folder with your CLI\nRun npm init to set up a package.json file\nRun npm i express to install ExpressJs\nCreate a new index.js file with the following code:\n\nconst express = require('express')\nconst app = express()\n\napp.get('/api', (req, res) => {\n  res.status(200).json({api: 'version 1'})\n})\n\napp.listen(3000, () => console.log('server started'))\n\n\nAdd in package.json the command \"start\": \"node index.js\" in \"script\" portion\nRun your backend with npm start and test it with your browser http://localhost:3000/api, you should see the response\n\nThe Frontend\nNow it's time for the front end part. I like Vue.Js in these days, therefore, this sample is Vue based. The goal of the app is to make a remote request to a server (the backend) in order to get some data.\nHere the steps:\n\nCreate a new Github repository, check it out on your local computer, open that folder with your CLI\n\nRun npm init to set up a package.json file\n\nRun npm i vue to install VueJs\n\nCreate a new index.html file with the following code:\n\n<!DOCTYPE html>\n<html>\n<head>\n  <title></title>\n\n  <script type=\"text/javascript\" src=\"node_modules/vue/dist/vue.js\"></script>\n  <script type=\"text/javascript\" src=\"node_modules/axios/dist/axios.js\"></script>\n</head>\n<body>\n  <div id=\"app\">\n    <textarea v-model=\"src\"></textarea>\n  </div>\n\n  <script type=\"text/javascript\">\n    new Vue({\n      el: '#app',\n      data: {\n          src: ''\n      },\n      mounted(){\n        var vm = this\n        axios.get('http://localhost:3000/api')\n          .then(data => {\n            vm.src = JSON.stringify(data.data)\n          })\n      }\n    })\n  </script>\n</body>\n</html>\n\nTest with a local webserver (you can use http-server or something similar)\n\n\nAt this point, you should get an error in the console Access-Control-Allow-Origin because the security policy of the browser. To fix it we need to add something on the backend installing the cors module:\nconst cors = require('cors')\napp.use(cors())\nNow the backend is able to handle the cross origin request properly. If you run the frontend with http-server you can reach it with http://localhost:8080 while the backend uses http://localhost:3000 as domain name.\nAll these stuff work on our local machine, now it's time to let them available to the world.\nDeploy the backend on Heroku\nThe steps to put our little backend on Heroku are minimal.\n\nChange the port setting in the index.js code:\n\nconst port = process.env.PORT || 3000\n...\napp.listen(port, () => console.log('server started on port', port))\nThis is very important otherwise the server app won't start.\n\nOn Heroku Dashboard, create a new App and connect it to your Github repository, click the manual deploy and check it with the public URL provided by Heroku\n\nYour backend should be up and running at Heroku scale!\nDeploy the frontend on Netlify\nDeploying a simple website on Netlify usually require just a repository connection. In our case, we need to set up also a little build command since we're using a couple of Npm modules, that won't be published by Netlify:\n\nOn Netlify Dashboard, create a new App and connect it to your Github repository\nSet in the build setting the build command with npm start and the deploy folder with dist\nAdd in the package.json file, in the \"Script\" portion, this command:\n\nmkdir dist && cp node_modules/vue/dist/vue.js dist/vue.js && cp node_modules/axios/dist/axios.js dist/axios.js && cp index.html dist/index.html\nWe need also to edit the script import relative path in the HTML file:\n<script type=\"text/javascript\" src=\"vue.js\"></script>\n<script type=\"text/javascript\" src=\"axios.js\"></script>\nAs well as in the javascript part the localhost URL that need to be changed with the Heroku one:\n// this url must be the Heroku remote one\naxios.get('http://localhost:3000/api')\n// change to something like\naxios.get('https://poc-express-api-heroku.herokuapp.com/api')\n\nBlame to me!\n\nI know, not very optimal process, blame my lazyness, but this is just to test the system quickly. In a next tutorial (where I want to involve also authentication and user session) I'll try to streamline a bit also this part.\nIf everything has been done properly, your webapp made by an API-based backend running on Heroku with a Vue-based SPA running on Netlify should work nicely.\nHere the repositories:\n\nBackend\nFrontend\n\nHave a nice deploy!\n","frontmatter":"title: Deploy a back-end and front-end app using Heroku and Netlify\ndate: 2018-09-27 14:00:00 +0100\nsubtitle: 27th September, 2018\nstyle: blue\ncover: cover.jpg\ncategories: Tutorials\ntags: [tutorial, node, vue, heroku, netlify]"},{"attributes":{"title":"Missing font on SVG exported from Adobe Illustrator","date":"2018-12-09 11:00:00 +0100","subtitle":"9th December, 2018","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","svg","illustrator","font","css"]},"body":"A benefit while working with SVG files is that they can be crafted with designer-friendly tools such as Adobe Illustrator / Figma.\nThe SVG format is great at encoding a document structure. It uses several types of objects, from simple to complex shapes to present a visual document. Of course, it can contain texts as well.\nThe font problem\nText objects usually can be styled with several properties. One of the most obvious ones is the font family.\nAdobe Illustrator allows assigning font family by picking the desired one up from the list of fonts installed at the operating system level. \nIn SVG, texts are encoded as text elements with some attributes that define properties such as font-family, for instance.\nA possible, and very common, problem is the missing font if the composition is open/view from another device that doesn't have that font installed.\nThe web-font solution\nNowadays, web-font is the common tech to solve that specific problem on web documents. Let's see how to exploit it in Illustrator-generated SVG documents.\nIn this example, I'm using the Google Fonts services, but the same strategy can work also with other services as well.\nFirst thing, let's download the font file of choice in order to install on the computer. For instance, I'm going to use the Unlock font from the service.\nNext, on Illustrator, let's assign the font Unlock to the text elements. This is what I see on Illustrator:\n\nBy checking the SVG code, this is how Illustrator (with my current settings) encoded the font-family information on the text element:\n<text><tspan font-family=\"'Unlock-Regular'\" font-size=\"60px\">This is a Proof-of-Concept</tspan></text>\nLet's move on Codepen, pasting the SVG code on a new pen. \nThe document should show the correct font even without importing the web-font from Google.\nThat's because my computer still has the Ultra font installed. Since I want to be sure my document will load and show the correct font on other devices, it's better to disable it from the operating system.\nNow it's time to follow the Google instruction importing the web font with this link:\n<link href=\"https://fonts.googleapis.com/css?family=Unlock\" rel=\"stylesheet\">\nand in the CSS:\nsvg{\n  font-family: 'Unlock', cursive;\n}\nIf you've followed the instructions you should NOT see the expected result.\nThat's because there's a discrepancy between the font-face name and the one encoded in the SVG by Illustrator. The SVG is looking for Unlock-Regular but the available one is Unlock which is similar but different.\nTo solve it, we need to fix the discrepancy. The following solution is for Google Fonts service only. Other services might require some adaptations, but the concept is the same:\n\nFont-Family name in SVG should match with the Font-Face name in CSS\n\nLet's check the content of the Google css source file at https://fonts.googleapis.com/css?family=Unlock. You should see something like:\n@font-face {\n  font-family: 'Unlock';\n  font-style: normal;\n  ...\n}\nNow, instead of including the Google link, let's just using the source declaration with a tiny modification:\n@font-face {\n  font-family: 'Unlock-Regular';\n  font-style: normal;\n  ...\n}\nAnd here the proof of this technique:\nSee the Pen svg font by Fabio Franchino (@abusedmedia) on CodePen.\n\nAlternatives?\nThere are different ways to solve this problem, with pro's and con's as usual.\nBy converting as path all the text elements does fix the problem at the cost of losing the editable text in the SVG document as well as increasing the size of the file since a text converted as path elements requires much more encoding than the text element itself.\nAnother solution is by modifyng the SVG source changing the font-family value with the CSS one. This makes it hard maintaining the SVG for further modifications on Illustrator.\nUsing the web-font technique requires a bit of work but the benefits are worth the efforts.\n","frontmatter":"title: Missing font on SVG exported from Adobe Illustrator\ndate: 2018-12-09 11:00:00 +0100\nsubtitle: 9th December, 2018\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, svg, illustrator, font, css]"},{"attributes":{"title":"How to align SVG text with CSS","date":"2018-12-13 10:00:00 +0100","subtitle":"13th December, 2018","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","svg","css","text","align"]},"body":"This is more a reminder to myself to recall how to align properly (both horizontally and vertically) text elements in SVG space through a couple of CSS properties.\nCreating a text tag in SVG usually doesn't produce the expected result:\nSee the Pen txtsvg01 by Fabio Franchino (@abusedmedia) on CodePen.\n\nYou don't see anything, uh?\nThis is because the default vertical alignment is not centered causing the text to be outside the visible canvas.\nThere are two specific CSS properties, not very intuitive though, that allow to align properly, both horizontally and vertically, a text element in an SVG canvas.\ntext{\n  text-anchor: middle; /* align center */\n  dominant-baseline: middle; /* vertical alignment fix */\n}\nSee the Pen txtsvg02 by Fabio Franchino (@abusedmedia) on CodePen.\n\nHope this little note helps.\n","frontmatter":"title: How to align SVG text with CSS\ndate: 2018-12-13 10:00:00 +0100\nsubtitle: 13th December, 2018\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, svg, css, text, align]"},{"attributes":{"title":"Making contenteditable in Vue from scratch","date":"2018-12-23 10:00:00 +0100","subtitle":"23th December, 2018","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","vue","html"]},"body":"The little contenteditable attribute is one of the pillars of the modern web experience today, the ability to edit text in place and not by means of specific areas (text fields and text area, for instance).\nBy adding it to any HTML tag allows to automagically transform any text element in an editable one.\nContenteditable in a Vue.js app\nHere the secret:\n<p contenteditable>\n    This is now a live editable text\n</p>\nThis works out of the box in any modern browser. It doesn't in a Vue.js app, though. Vue updates DOM elements according to some data using the data-binding mechanism, thus, we need to sync the data and the editable element in some way.\nHere a basic Vue app with a contenteditable element:\n<div id=\"app\">\n\n    <div contenteditable\n      v-text=\"txt\"\n      @blur=\"onEdit\"></div>\n\n </div>\n\n<script>\n new Vue({\n     el: '#app',\n     data: {\n         txt:'Edit me'\n     },\n     methods:{\n         onEdit(evt){\n             var src = evt.target.innerText\n             this.txt = src\n         }\n     }\n })\n</script>\nThe @blur event updates the data using the tag content, and it happens when the user click outside the editable element.\nWe can add the ability to update the data using also the @keypress event as well, which follow a typical UX pattern, the ENTER key is meant to confirm the editing:\n<div id=\"app\">\n\n    <div contenteditable\n      class=\"editme\" \n      v-text=\"txt\"\n      @blur=\"onEdit\"\n      @keydown.enter=\"endEdit\"></div>\n\n </div>\n\n<script>\n new Vue({\n     el: '#app',\n     data: {\n         txt:'Edit me'\n     },\n     methods:{\n         onEdit(evt){\n             var src = evt.target.innerText\n             this.txt = src\n         },\n         endEdit(){\n             this.$el.querySelector('.editme').blur()\n         }\n     }\n })\n</script>\nThe following a working version to demonstrate the data-binding when editing a regular HTML tag:\nSee the Pen ContentEditable in Vue #1 by Fabio Franchino (@abusedmedia) on CodePen.\n\nA variant behavior\nThe previous example updates the data on blur or keypress Enter event. If you want to update it also as-you-type we can exploit an additional event type, the input event, which calls the update function on each text change. The previous example has been modified a bit to get the desired behavior dealing with potential conflicts with the internal data-binding of Vue:\nSee the Pen ContentEditable in Vue #2 by Fabio Franchino (@abusedmedia) on CodePen.\n\nTakeaways\nWhile it's not a good idea to replace text fields with the contenteditable attribute everywhere, there are some specific use case where the user experience really get benefits out of this technique .\nIf you plan to use it somewhere, remember to let the user know what is live-editable because it's not something you can give for granted.\n","frontmatter":"title: Making contenteditable in Vue from scratch\ndate: 2018-12-23 10:00:00 +0100\nsubtitle: 23th December, 2018\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, vue, html]"},{"attributes":{"title":"What is Data Storytelling?","date":"2018-12-31 10:00:00 +0100","subtitle":"31st December, 2018","style":"red","categories":"Opinions","tags":["opinion","data","story"]},"body":"It's a controversial term but, briefly, it can be defined as a way to convey data-driven information exploiting some paradigms of storytelling.\nThe data storytelling ultimate goal is all about lowering the bar to read and understand complex information.\nIt's particularly relevant when dealing with regular people, in the sense of non-experts in data field. There is a nice and very active community made by academics and practitioners debating around the field but, for some reasons, regular folks are not really included.\nWhile data literacy is increasing in general, non-expert people still need some help in order to grasp and fully understand complex information.\nThis is where data-storytelling may help.\nIn simple terms is a balanced mix of storytelling techniques and data-driven information built through a meaningful design process.\nStorytelling\nSome of the technique we can borrow from storytelling are:\n\nnarrative structure around a clear message\nuse (text or visual) elements to anticipate or set the context\nsequencing chunks of information to give time to understand the whole\nsimplify visual elements to reduce cognitive efforts\ninjecting human or personal components to trigger emotional reactions to strength and enhance the communication level\n\nData/Information\nSince the information and insights come from some data, here a list of the common task we're asked to face:\n\ndata are facts, we need to interpret them\ndata is material, we need to explore and manipulate it in order to grasp\nbias are everywhere, even our own bias\n\"interviewing the data\" or understanding how the data has been collected is mandatory\ndeal with the statistically significant value\ndata are not perfect, errors or missing is the norm\ncontext is everything, we need to get it\nthe sources need to be verifiable\nevery conclusion might be wrong, double test everything\ncorrelation is not causation\nscales are powerful and they can trick the perception\nsloppiness is also a source of misleading\n\nProcess\nThe process is the glue of the above parts. Nowadays, it needs to be an iterative process based on these main steps:\n\nexplore/define\nprototype/test\nreview/fix\ngo to 1\n\nConclusion\nTrying to define data-storytelling is not easy. It's a combination of many different techniques and strategies. One size to fit all recipe is not possible in this context.\nNevertheless, due to the complexity of the today information world, we need to push the limit in the communication field by means of new breeding techniques and artefacts.\n","frontmatter":"title: What is Data Storytelling?\ndate: 2018-12-31 10:00:00 +0100\nsubtitle: 31st December, 2018\nstyle: red\ncategories: Opinions\ntags: [opinion, data, story]"},{"attributes":{"title":"Let's talk about presenting information and data","date":"2019-01-25 10:00:00 +0100","subtitle":"25th Jannuary, 2019","style":"red","cover":"cover.png","categories":"Opinions","tags":["opinion","announcement","presenta"]},"body":"I've been in the communication and tech fields enough to maturate some ideas about how to present and visualize data and information effectively.\nI teach this stuff in several classes and institutions and I use a lot of visual materials during my lessons. It means that I need to prepare a lot of presentations, which is time-consuming.\nI'm allergic to the time-consuming notion unless it gives enjoyment or learning opportunities.\nI started poking around the idea of a custom tool a year ago, a tool able to build effective presentational documents in an efficient way.\nHere one of the very first POC (now completely different, though):\n\nLately, I was able to dedicate some time to this side project and a little tool was born.\nIt's far from being a usable tool but I actively use it to produce my presentations and I believe the time has come to understand if it can be useful to someone else.\nSo, welcome Presenta.\n","frontmatter":"title: Let's talk about presenting information and data\ndate: 2019-01-25 10:00:00 +0100\nsubtitle: 25th Jannuary, 2019\nstyle: red\ncover: cover.png\ncategories: Opinions\ntags: [opinion, announcement, presenta]"},{"attributes":{"title":"The last 75|37 exploration","date":"2019-01-26 10:00:00 +0100","subtitle":"26th Jannuary, 2019","style":"orange","cover":"cover.png","categories":"Review","tags":["review","workshop","dataviz","sketching","dataviz"]},"body":"I've assigned a 75/37 exercise a bunch of times to my DataViz classes/lectures, some of them documented here and here.\nIt's a very interesting and effective way to introduce and teach one of the most important principles in data visualization: the relation between the abstract information and the visual element defined by an agreed rule.\nIt's a mechanical exercise since it takes out, purposely, any meaningful context.\nA follow-up\nDuring my last DataViz class I've introduced a variation which has been promising.\nI've published a Google Form with a bunch of questions related to personal information (age, studies, origin, alongside other silly curiosity such as preferred meal, number of laughs/goodbyes, fast-foods/cinema in a month, or the number of likes in a social network) .\nStudents were asked to complete the form and then use it as a data source to ideate and sketch possible representations.\nIn addition to the assignment, I've shown them the DearData project which gives a lot of inspirations.\nThe exercise gave the opportunity to both understand the mechanic of the representation and making practice in the storytelling field as well.\nI don't have the results to show, I promise I'll post the next results during in my next upcoming DataViz classes.\n","frontmatter":"title: The last 75|37 exploration\ndate: 2019-01-26 10:00:00 +0100\nsubtitle: 26th Jannuary, 2019\nstyle: orange\ncover: cover.png\ncategories: Review\ntags: [review, workshop, dataviz, sketching, dataviz]"},{"attributes":{"title":"Using data as material for visual exploration","date":"2019-01-26 15:00:00 +0100","subtitle":"26th Jannuary, 2019","style":"purple","cover":"cover.jpg","categories":"Projects","tags":["project","legacy","dataviz","data","creative","coding","d3js"]},"body":"I've resurrected a bunch of images found on my hard-drive. They are related to a teaching experience I had in Shanghai a couple of years ago, a data-visualization workshop for design students at Tongji University.\nI remember that I've used some open data sources from the project Data Canvas, as by today, they don't seem to be available anymore.\nI had prepared some examples with D3.js as a starting point for the sudents to allow them making some visual explorations using data as raw material.\nHere some screenshots of this little project, visual reperantations using pollution data of specific cities, of which unfortunately I cannot find the source code anymore.\nIn retrospect, I find them interesting:\n\n\n\n\n\n\n\n\n\n","frontmatter":"title: Using data as material for visual exploration\ndate: 2019-01-26 15:00:00 +0100\nsubtitle: 26th Jannuary, 2019\nstyle: purple\ncover: cover.jpg\ncategories: Projects\ntags: [project, legacy, dataviz,data,creative, coding,d3js]"},{"attributes":{"title":"The last 75/37 exercise as gallery","date":"2019-01-28 10:00:00 +0100","subtitle":"28th Jannuary, 2019","style":"orange","cover":"cover.png","categories":"Review","tags":["review","workshop","dataviz","sketching","dataviz"]},"body":"Following-up this post, here the last drawing from my students in their full glory:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","frontmatter":"title: The last 75/37 exercise as gallery\ndate: 2019-01-28 10:00:00 +0100\nsubtitle: 28th Jannuary, 2019\nstyle: orange\ncover: cover.png\ncategories: Review\ntags: [review, workshop, dataviz, sketching, dataviz]"},{"attributes":{"title":"How to make a client-side search engine with Vue.js and Lunr.js","date":"2019-01-29 13:00:00 +0100","subtitle":"29th Jannuary, 2019","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","vue","lunr","search"]},"body":"This is a little tutorial about making a search/filter Vue.js component using the powerful Lunr.js library.\nA little disclaimer: I've purposely avoided any CSS styles also keeping minimal the HTML markup, using Vue without the CLI, to focus only on the logic and integration part for simplicity. I thought Vue.js learners may find this way useful.\nA little Vue.js app\nSuppose to have a little component that loads a JSON file and creates a items list based on a given array, such as:\nVue.component('mylist', {\n  template:`<ul>\n    <li v-for=\"item in list\" :key=\"item.id\">{{item.name}}</li>\n</ul>`,\n  props:['list']\n})\nHere the working example:\n\n  See the Pen \n  vue lunr search 1 by Fabio Franchino (@abusedmedia)\n  on CodePen.\n\n\nThen, we want to integrate a search/filter capability with an input text field:\nVue.component('mysearchbtn', {\n  template:`<div>\n    <input type=\"text\" placeholder=\"type to search\"\n      v-model=\"search\"\n      @input=\"$emit('update:search', $event.target.value)\" />\n</div>`,\n  props:['search']\n})\nand here the updated example:\n\n  See the Pen \n  vue lunr search 2 by Fabio Franchino (@abusedmedia)\n  on CodePen.\n\n\nNow we need to make both the components working together, let's say, when I type into the text field, the list should update according to the search pattern.\nWelcome Lunr.js\nInstead of reinventing the wheel by implementing a search algorithm, I'm going to exploit Lunr, a very powerful and configurable library that make complex search pretty neat!\nJust to give a taste, you can search using some well-known patterns such as:\n\nusing the wildcard, i.e. Pete* to find anything that begins with pete\nsearching in a specific field object, i.e. email:*@gmail.com to find in email field the string that ends with @gmail.com\nusing operators to include or exclude specific keywords, i.e. me +you -her \nLunr handles plurals and articles for us as well\nbonus tip, each result item comes with a score based on search relevance as well as additional useful information related\n\nSetting Lunr up\nLurn requires the creation of an index based on a given dataset, such as:\nvar searchIndex = lunr(function () {\n  this.ref('id')\n  this.field('name')\n  this.field('body')\n  this.field('email')\n\n  documents.forEach(doc => {\n    this.add(doc)\n  })\n})\nAn important thing to consider about Lunr is the result array that is not a filtered version of the original dataset but a new and different array of objects containing specific search result properties, I guess both for performance reasons and to provide additional search information without manipulating the original array.\nThat means we need to find a way to filter the original array based on the produced Lunr array. This is the function I use; basically, I set a new array on every search keyword change including only the items present in the search result based on the reference field (the id in this case):\nthis.list = []\nthis.resuls.forEach(d => {\n    this.original.forEach(p => {\n        if(d.ref == p.id) this.list.push(p)\n    })\n})\nI'm still wondering whether that is the best way to update the list from a performance perspective in Vue.js, though.\nNow, the final examples looks like this:\n\n  See the Pen \n  vue lunr search 3 by Fabio Franchino (@abusedmedia)\n  on CodePen.\n\n\nHope this might be helpful to someone. I made it to integrate the functionality on a little tool I'm working on, Presenta.\nHave a nice day!\n","frontmatter":"title: How to make a client-side search engine with Vue.js and Lunr.js\ndate: 2019-01-29 13:00:00 +0100\nsubtitle: 29th Jannuary, 2019\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, vue, lunr, search]"},{"attributes":{"title":"The new D3.js Join method is awesome for teaching","date":"2019-01-30 07:00:00 +0100","subtitle":"30th Jannuary, 2019","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","d3","join","chart"]},"body":"The new join method of D3.js simplifies a lot introducing the library to newcomers.\nOne of the most difficult parts of D3.js to grasp has always been the brilliant enter update exit strategy that manages the different phases required by any dynamic and interactive visualization built with the library.\nThe very recent 5.8.0 release introduces a new method to simplify that part, adding a very common default behavior for simple representations. No doubt, it's going to become the preferred way to teach the basics of interactive D3.js visualizations.\nLet's look at the difference, using a very minimal dynamic barchart that is able to adapt based on the dataset changes.\nHere the pre-join version (just the relevant part):\nvar rects = d3.select('svg')\n    .selectAll('rect')\n    .data(data)\n\nvar newrects = rects.enter()\n    .append('rect')\n    .style('fill', 'red')\n\nrects.merge(newrects)\n    .attr('width', d => d.value)\n    .attr('height', 20)\n    .attr('y', (d, i) => i*20)\n\nrects.exit()\n    .remove()\nHere, the same functionality with the new method:\nd3.select('svg')\n    .selectAll('rect')\n    .data(data)\n    .join('rect')\n    .style('fill', 'red')\n    .attr('width', d => d.value)\n    .attr('height', 20)\n    .attr('y', (d, i) => i*20)\nBoth handle the three different stages when a visualization needs to be updated according to a given dataset, in particular:\n\na visual element needs to be created according to a new data-point (enter selection)\na visual element needs to be updated because its data-point has changed (update implicit selection)\na visual element needs to be removed because the data-point doesn't exist anymore (exit selection)\n\nHere the complete Codepen, click on the chart to trigger the update:\n\n  See the Pen \n  d3-quick-chart-2 by Fabio Franchino (@abusedmedia)\n  on CodePen.\n\n\nYou can check both versions here and here.\nWell done, @mbostock.\n","frontmatter":"title: The new D3.js Join method is awesome for teaching\ndate: 2019-01-30 07:00:00 +0100\nsubtitle: 30th Jannuary, 2019\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, d3, join, chart]"},{"attributes":{"title":"Smooth the scroll position with JS","date":"2019-02-08 14:00:00 +0100","subtitle":"8th February, 2019","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","ux","scroll","css"]},"body":"I've already written about the CSS gem scroll-behavior, a property that allows animating the scroll position change of any HTML element with scroll capability.\nIn the previous tutorial, I've shown how it can be used together with anchor links, without relying on javascript at all.\nThis time I needed to achieve a particular micro-interaction in my side-project toy,  Presenta, as briefly shown here:\n\nThe sidebar allows to select a specific item (the thumb) and the scroll position needs to be changed in order to keep a precise horizontal alignment between the thumb and the editor panel.\nAn immediate change would not be very user-friendly or even worse it would be highly annoying.\nScroll-Behavior to the rescue\nHere the amazingness of CSS. With just one line of it, any scroll position changes will be nicely animated.\nIt's jus a matter of modifing the scrollTop property of the HTML element to make the magic, such as:\ndocument.querySelector('.mydiv').scrollTop = 100\nIf you have Chrome or Firefox you should see the animation here:\n\n  See the Pen \n  Scroll-position-basic by Fabio Franchino (@abusedmedia)\n  on CodePen.\n\n\nHere a little Vue.js app (you know that I'm a fan of Vue.js?) that shows the meat (click the red thumbs 1):\n\n  See the Pen \n  smooth scrolling to position by Fabio Franchino (@abusedmedia)\n  on CodePen.\n\n\nHave a nice day!\n","frontmatter":"title: Smooth the scroll position with JS\ndate: 2019-02-08 14:00:00 +0100\nsubtitle: 8th February, 2019\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, ux, scroll, css]"},{"attributes":{"title":"Let's talk about presentation tools","date":"2019-02-09 07:00:00 +0100","subtitle":"9th February, 2019","style":"red","cover":"cover.png","categories":"Opinions","tags":["opinion","tools","presenta"]},"body":"The status-quo\nYou bet? Try to ask \"I need to build a presentation\" and you'll get these hints:\n\nPowerpoint\nApple Keynote\nGoogle Presentation\nmaybe the new kid Slides.com or Canva\n\nThat's understandable. Powerpoint came out 30 years ago. Keynote and GPresentation just improved the Powerpoint legacy, by adding features, integration possibilities and better user interfaces. \nIt looks like there's just one way to build digital presentations.\nNo matter the choice, they all belong to the same paradigm:\n\nYou have a canvas and you can do whatever you want on that canvas\n\nAnd that's a problem in most cases.\nA new breed of presentation tools\nI'm working on a side-project, a little tool that helps to make effective presentations in an efficient way. \nIt's still in progress, a lot of things are supposed to change, but there's one principle I'm very close to that is guiding the whole design since the beginning:\n\nNot a canvas, but a system with options and sensible defaults.\n\nNot an easy task, though, but Presenta is in good company. And that's awesome!\nPasteapp, Pitch, Swipe, Slidebean, Beautiful, Mentimeter, DeckSet (please tell me if I missed some others). [edit: Wow, there's also a big fish that for some reason I missed: Sway from Microsoft] [edit 2: apparently internet is big, here another one: PitchDeck]\nThey are all different, each following a precise concept and paradigm. \nThey are all trying to change the current status-quo of the presentation tools. \nProbably, no one is going to become the new standard, or maybe yes. \nThe important thing is that all of them will contribute to innovating in the field by pushing the limits in different directions.\nIsn't this great?\n","frontmatter":"title: Let's talk about presentation tools\ndate: 2019-02-09 07:00:00 +0100\nsubtitle: 9th February, 2019\nstyle: red\ncover: cover.png\ncategories: Opinions\ntags: [opinion, tools, presenta]"},{"attributes":{"title":"Competitors are good","date":"2019-02-19 07:00:00 +0100","subtitle":"19th February, 2019","style":"red","cover":"cover.png","categories":"Opinions","tags":["opinion","competitors","presenta"]},"body":"Usually, having competitors is a pain point in a business model canvas. To me, they are opportunities.\nI started a personal project I enjoy working on. It's based on a personal idea and vision, but as everything happens on internet, there's a high chance that similar things already exist.\n\nPresenta makes no exception.\n\nHaving competitors is not negative. I always find interesting learning about how others faced and solved similar problems I had. It's not about copying, it's learning and get inspiration to come up with something better at solving the same problem.\nThe notion of competitors doesn't really sound right to me. It's not a competition. It's more about trying innovating all together with different solutions.\nThis is why I consider all the mentioned similar tools a good source of inspiration. If there's a good idea in a product, why make it different at any cost? I'm much more learning from a good solution and try to make it better.\nThis post is a preface of a series that is meant to describe what I find very good from other products that might potentially be used in Presenta as well.\nI strongly believe in the remix culture. Everything is a remix. Innovation is remixing.\n","frontmatter":"title: Competitors are good\ndate: 2019-02-19 07:00:00 +0100\nsubtitle: 19th February, 2019\nstyle: red\ncover: cover.png\ncategories: Opinions\ntags: [opinion, competitors, presenta]"},{"attributes":{"title":"Swipe review","date":"2019-03-14 10:00:00 +0100","subtitle":"14th March, 2019","style":"orange","cover":"selector.gif","categories":"Review","tags":["review","presenta","competitors","ux"]},"body":"This is the first post of a series related to the good part of having competitors. Presenta is not alone as you may guess. This post talks about Swipe. \nSwipe is an online presentation tool. It's mostly markdown based with a focus on simple presentations that can be built very quickly. It has limited composition capabilities but it has a rational interface that makes it a good option in the field.\nThe index view is done right\nThe presentation list is very good. It shows clearly some important indicators (public/private and sharing setting) and the most frequently used buttons (View and Present and Edit).\nThe possibility to scroll all the presentation thumbs horizontally is sooo good. You can have a glimpse of the content in a bunch of seconds. Furthermore, you can click to edit a specific slide from there.\n\nThe grid view to edit multiple slides\nThe other well designed component is the grid editor. Nothing new but it just works.\nSelecting one single slide is not very clear, though (I had to read the help to discover how to do that), in general, it allows the typical tasks related to arranging and managing slides in the context of a presentation builder.\n\nThe Drag&Drop\nThis cannot be avoided. The ability to drag&drop elements is part of any digital experience today. Swipe does it right without fuss.\n\nAnd the drag images over to create slides on the fly is simply great!\n\nWhat about Presenta?\nPresenta has an initial version of a similar capability. Right now, you can select multiple slides by clicking them arbitrarily and a dedicated tool to performe common tasks such as move, delete and duplicated appear on the contextual top bar.\n\nOn the way, the same tool will allow drawable selection and drag&drop to arrange slides quickly. The drag&upload is also in the pipeline. Furthermore, a copy/paste function will complete that part of the editor as well.\nWant to test it out? Become a beta tester here!\n","frontmatter":"title: Swipe review\ndate: 2019-03-14 10:00:00 +0100\nsubtitle: 14th March, 2019\nstyle: orange\ncover: selector.gif\ncategories: Review\ntags: [review, presenta, competitors, ux]"},{"attributes":{"title":"Develop a JS lib these days","date":"2019-04-12 10:00:00 +0100","subtitle":"12th April, 2019","style":"blue","categories":"Tutorials","tags":["tutorial","js","es6","library"]},"body":"I made several attempts in the past trying to develop javascript libraries. Recently, I wanted to include in my current side-project a lib I built a while ago.\nI've realized, quite immediately, that my little piece of code was not compatible anymore with the modern way of building web-app (read: import in a ES6 or Vue-cli projects). I succeed to include it with some hacks but, most importantly, I've realized that I should update my knowledge in the field.\nThe time has come and here my first attempt at grasping the whole stuff.\nThe goal\nHere my goal: I want to write a js library the modern way, that means:\n- write it in ES6 (or other additional flavors)\n- use the module loader (import/export) for peace of mind\n- build a package that is compatible both in the browser and node.js\n- have a developer-friendly setup (watcher and reloader during development session)\nThe Proof-of-concept\nHere the repo with my P-O-C which I'm quite satisfied with.\nRollup is the bundler that does almost all of the hard work, Babel to make it compatible with ES5.\nSo far, so good since the same bundle can be used in the browser, such as:\n<script src=\"mylib.js\"></script>\n<script>\n  mylib.mod1.method()\n</script>\nand in Node.js with:\nvar { mod1 } = require('mylib')\nmod1.method()\nAll that with a nice and modular development experience.\n","frontmatter":"title: Develop a JS lib these days\ndate: 2019-04-12 10:00:00 +0100\nsubtitle: 12th April, 2019\nstyle: blue\ncategories: Tutorials\ntags: [tutorial, js, es6, library]"},{"attributes":{"title":"Get the SVG right from Illustrator","date":"2019-04-13 10:00:00 +0100","subtitle":"13th April, 2019","style":"blue","categories":"Tutorials","tags":["tutorial","svg","illustrator"]},"body":"I usually teach in my computational design class the benefits of the SVG format as a way to lower the barriers in the creative coding field.\nIndeed, I teach my students that they can draw assets in Adobe Illustrator to transform them in interactive and dynamic compositions using a programming language, javascript for instance.\nThe SVG format is a structured and hierarchical (scene-graph) document that can be nicely manipulated through code within the browser.\nThis is the process (simplified):\n\ndraw something on Illustrator \nexport it in SVG\nput it in the browser and start playing with it through javascript\n\nTo achieve that, a drawn composition needs to be exported to make it compatible with the coding environment. \n\nUnfortunately, exporting an SVG is not a seamless process, even these days.\n\nDifferent tools produce different markup. Adobe Illustrator, by far, is the most reliable and predictable tool in terms of generated SVG. There are some quirks, though, that I want to highlight here.\nTwo exporters\nThere are two distinct ways to generate an SVG from an Illustrator document. Indeed, for some unknown reasons, it has two exporters.\nYou can Save As a document in an SVG format and you can Export As to do the same. Both produce an SVG but the  markup can be pretty different and there are PRO's and CON's for each option.\nThe \"Save As\" SVG\nThis is the most obvious command and it's the one I used (and struggled) for a long time. Here the review:\nPRO'S:\n\nYou can use the SVG as the main source since it tries to include all the elements\nThe artboard size is the default way to define the SVG size\noutside and hidden elements are preserved, this can be useful in some situation\n\nCON'S:\n\nLayer name can be messed up very easily, just duplicating already named element to enter in what I call the naming-hell where it's almost impossible to fix unless starting over the document.\nMask is messed too, names are ignored, using unpredictable internal encoding names. Furthermore, it breaks the hierarchy of the elements every time the file is re-open for further edits. Another problem is that clip-path id and element id are on the same element making impossible to manipulate only one (the mask or the content) independently.\nGradients have same name issues as the masks\noutside and hidden elements are preserved, this can be an issue in some situation\n\nThe \"Export As\" SVG\nPRO'S:\n\nlayer name conflict works much well because it can be predictable and fixable within illustrator, conflicted names bring the original string in a data-name attribute, that means we can exploit to have a sort-of classification for multiple items\nthe mask works as expected, structure and name are respected and is predictable and fully exploitable with code\nyou can use artboards to export multiple SVGs, sometime might be useful\noutside and hidden elements are not exported by default, this can be a PRO in some situations\n\nCON'S:\n\noutside artboard elements and hidden elements are not exported in the SVG, this can be a CON if you plan to have already outside positioned element or already hidden element that will be brought to life through code\nthere is the option to keep the outside element in the exported version, exporting the whole doc instead of the artboards, but still, the hidden elements are skipped and the viewBox is increased according to the bounding-box of all the elements, again, not predictable size.\nelements within the artboard with opacity=0 are included in the export, at least.\nan element that is outside the artboard but a descendant of an object that is inside the artboard will be skipped in the exported version.\nyou need to export for any change instead to just save, a slower process\nit includes a title tag that shows an annoying tooltip in the browser, it can be disabled with CSS though.\n\nThe Winner\nIt's difficult to declare a real winner but considering the better trade-off, the Export As is the most reliable and predictable, that is the most important thing in the integration field. Export As would be almost perfect if it weren't for the way it optiomize the SVG excluding hidden or artboard-outside elements.\nThese are some rules to remember when exporting an SVG with \"Export As\" in Illustrator that can ease the process:\n\nEverything needs to be within the artboard\nEverything needs to be visible\nImages need to be in the same folder\n\nSaid that, I'm still looking for a solid tool that allows a designer-friendly experience to draw and create graphic elements with an easy and repeatable way to integrate them in a coding environment. We'll see.\n","frontmatter":"title: Get the SVG right from Illustrator\ndate: 2019-04-13 10:00:00 +0100\nsubtitle: 13th April, 2019\nstyle: blue\ncategories: Tutorials\ntags: [tutorial, svg, illustrator]"},{"attributes":{"title":"Fetch, the native method to do ajax","date":"2019-04-30 10:00:00 +0100","subtitle":"30th April, 2019","style":"blue","categories":"Tutorials","tags":["tutorial","js","fetch","ajax"]},"body":"Everybody knows that one of the most important benefits of jQuery has always been the $.get() or the $.ajax() function to perform the so-called ajax request in the browser. At that time doing the same in vanilla js (using the XMLHttpRequest object) was way more verbose and error-prone.\nNowadays, the modern javascript provides us a much modern method to perform http requests.\nFetch, the modern native function looks pretty much the predecessor of jQuery or other libraries such as d3 and axios. \nIts usage is pretty straightforward, well documented on the MDN website.\nUnlike the libraries that have similar fetch concepts, the native fetch returns a Promise of the request first, then a second Promise will contain the response of the server.\nSo, a request made with jQuery, like:\n$.get('https://www.example.com')\n    .then(data => console.log(data))\nshould be rewritten using fetch like:\nfetch('https://www.example.com')\n    .then(response => response.json())\n    .then(data => console.log(data))\nThe .json() function actually convert the raw data into a native javascript object, that object will be returned by the second Promise.\nTo catch an error, use the .catch function as usual in this type of context:\nfetch('https://www.example.com')\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(err => console.log(err))\nFetch options\nFor instance, to perform a POST request with fetch, here the way:\nfetch(`/save`, {\n      method: 'POST',\n      body: JSON.stringify({ }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n    .then(response => response.json())\n    .then(data => console.log(data))\n    .catch(err => console.log(err))\nYou have to add on optional configuration object where you can specify the method and other options as well.\nAt first sight the double Promises to get the data we want looks a bit over-complicated and unnecessary.\nIn reality, using the async/await keywords, the possibility to separate the response status and the actual server response is essential to catch all the edge cases. \nStay tuned for the next tip about them.\n","frontmatter":"title: Fetch, the native method to do ajax\ndate: 2019-04-30 10:00:00 +0100\nsubtitle: 30th April, 2019\nstyle: blue\ncategories: Tutorials\ntags: [tutorial, js, fetch, ajax]"},{"attributes":{"title":"I've launched SVGmator 1.0","date":"2019-05-23 7:00:00 +0100","subtitle":"23th May, 2019","style":"red","cover":"cover.gif","categories":"Opinions","tags":["opinion","announcement","presenta","svgmator"]},"body":"A couple of days ago I've launched SVGmator, a little online tool to help people animating SVG files fast and easily.\nThe idea has been with me for a while, then, a week ago, I set the brief:\n\n7 days, using my free and available time building it. Let's do it!\n\nThanks to the current stack possibilities (Vue.js, AWS S3, Netlify hosting and Functions), it's totally possible nowadays building a web app with server capabilities in a bunch of days.\nThis is what I did and proved to myself.\nOf course, in order to deliver, you need to be very focussed of what it's feasible fighting the huge amount of features and ideas that arise during the process.\nStick with the fundamental idea, remove everything else, then, you're making it.\nThe reason\nAside from the personal challenge to design, build and release a working software in a very tight timeframe, originally, I wanted to prototype the idea of a simplified SVG animator tool within Presenta, my preferred presentation tool.\nI've realized very quickly that it would have required much more time implementing it, therefore, the idea of making a stand-alone spin-off would have solved nicely my requirements (time-frame and test in the wild). \nThe dissemination\nI took this opportunity to test some dissemination strategies. I've announced the tool in the following popular networks:\n\non Twitter\non ProductHunt\non HackerNews\n\nVery little reactions over there with almost zero acquisition. No surprise here, but...\n...for some obscure reasons, SVGmator got some traction over Reddit and a thousand of users actually tried the tool, receiving a bunch of interesting comments, feedback and usage-case.\nThe next step\nBased on the encouraging comments, I'm planning to add some features and release a 2.0 version soon. I believe there's room for this kind of tools.\nAlso, I want to play further with the dissemination toy :) \n","frontmatter":"title: I've launched SVGmator 1.0\ndate: 2019-05-23 7:00:00 +0100\nsubtitle: 23th May, 2019\nstyle: red\ncover: cover.gif\ncategories: Opinions\ntags: [opinion, announcement, presenta, svgmator]"},{"attributes":{"title":"Using a lambda function to fetch external files","date":"2019-06-13 5:00:00 +0100","subtitle":"13th June, 2019","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","lambda","fetch","svg"]},"body":"In my recent toy, I had the need to load external files from within the browser, such as an SVG file hosted on a remote server, in order to inject them in the DOM for further manipulation.\nIt's a nice little UX add-on to avoid the user downloading a particular file and then to upload it on SVGmator. Providing the URL, the software would be able to download and upload behind the scene on behalf of the user.\n\nIt's a simple task, but the security model of the browser prevents to fetch, via javascript, external text files that belong to different domains, thus, this simple script is not going to work out of the box:\nfetch('https://www.examples.com/myfile.svg')\nWelcome Lambda Functions\nIt these days it's quite common to find services that provide the so-called lambda functions. Briefly, they are (usually Node.js) scripts that can be invoked through an API call, performing a task and returning a result. You don't have to deal with their hosting and other server stuff (indeed they are part of the serverless movement!).\nBack to my problem, here the code that accomplishes the mentioned requirement, using Netlify Functions in this case (the Netlify version of the lambda thing).\nThe browser needs to make a POST request to the lambda, passing a parameter, such as:\nconst req = await fetch('/.netlify/getsvg', {\n  method:'POST',\n  body: JSON.stringify({url: 'https://www.examples.com/myfile.svg'})\n})\nconst res = await req.text()\nThe above code (it's ES6, it needs to be within an async function) will get a raw SVG code that can be eventually injected in the DOM.\nThe lambda function is a Node.js script that actually fetches the SVG and returns it as raw source:\nconst axios = require('axios')\n\nexports.handler = async (event, context) => {\n  const body = JSON.parse(event.body)\n\n  const res = await axios.get(body.url)\n\n  return {\n    statusCode: res.status,\n    body: res.data\n  }\n}\nThat's approximately all. Please refer to the Netlify documentation about how to use the service.\n","frontmatter":"title: Using a lambda function to fetch external files\ndate: 2019-06-13 5:00:00 +0100\nsubtitle: 13th June, 2019\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, lambda, fetch, svg]"},{"attributes":{"title":"Vertical Text with CSS","date":"2019-07-05 5:00:00 +0100","subtitle":"5th July, 2019","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","css","text","vertical"]},"body":"If you need to put a text vertical (meaning rotated) the usual solutions are basically two:\n\nusing writing-mode CSS property\nrotate the text with transform\n\nBoth solutions work well but the direction of the text is always the same, the text starts from top to bottom.\nIf you want to have more control defining more precisely the direction and other position contraints, here a quick solution using an outer wrapper and an inner text container.\nThe markup is something like:\n<div class=\"outer\">\n  <div class=\"inner\">A vertical text</div>\n</div>\nand here the minimal CSS:\n.outer{\n  writing-mode: tb-rl;\n  display:flex;\n  align-items:center;\n  justify-content: flex-end;\n}\n.inner{\n  transform: rotate(180deg);\n  transition: transform 1s ease-in-out;\n}\nIt's based on the combination of flex properties in the outer wrapper and the transform property in the inner one.\nYou can check a working example here and if you want to explore the different possibilities, here a little toy to pay with:\n\n  See the Pen \n  rotated vertical text interactive by Fabio Franchino (@abusedmedia)\n  on CodePen.\n\n","frontmatter":"title: Vertical Text with CSS\ndate: 2019-07-05 5:00:00 +0100\nsubtitle: 5th July, 2019\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, css, text, vertical]"},{"attributes":{"title":"How to create a Nuxt based blog markdown driven from scratch","date":"2019-09-20 5:00:00 +0100","subtitle":"20th September, 2019","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","nuxt","markdown","blog"]},"body":"This is a little guide to set up a minimal Nuxt.js based blog with markdown capability.\nI've already explored this topic here and here and this time I want to explore the same concept using markdown files as the content source.\nNuxt.js is a very good piece of software that provides a very nice development experience without sacrificing top-notch outcomes in terms of performance and reliability as well.\nFor instance, Nuxt.js allows creating universal Vue based websites, meaning you can build a fully static, SEO-ready, websites using all the features of Vue.js in terms of modern user experience.\nI've tested it recently with the marketing website of PRESENTA and I was impressed by the speed and the comfort during the development as well as the outcome that is super optimized (PageSpeed gave me 92/99 score for mobile/desktop out of 100) and future-proof (the whole website is fully navigable even with javascript turned off!\nI've conducted also some stress tests in order to learn whether Nuxt.js can be used to build bigger websites such as products catalogs or news portals. I was able to build a website with more than 1000 markdown files without issues and with a reasonable built time.\nThis makes Nuxt.js a very good option against another very good static builder that I like a lot, 11ty.\nLet's get started from scratch\nHere the step by step assuming you've already Node.js+NPM installed, an empty folder on your system and the shell pointing that path.\n\nCreate the package with npm init\nInstall Nuxt: npm i nuxt\nAdd this dependency: npm i frontmatter-markdown-loader\nAdd the dev command in the scripts section: \"dev\": \"nuxt\"\nCreate the nuxt.config.js file filled with:\n\nmodule.exports = {\n  build: {\n    extend (config) {\n      config.module.rules.push({\n        test: /\\.md$/,\n        loader: 'frontmatter-markdown-loader'\n      })\n    }\n  }\n}\n\nCreate the pages folder\nCreate in pages/ the template file for root pages with this name: _id.vue and put this code:\n\n<template>\n    <div v-html=\"html\"></div>\n</template>\n\n<script>\nexport default {\n    async asyncData({params}) {\n        return await import(`content/${params.id}.md`)\n    }\n}\n</script>\n\nCreate your first markdown file in the content/ folder, such as my-page.md:\n\n# Title\n\n### sub title\n\nSome text\n\n> A quote\n\nRun the development command npm run dev and point your browser to http://localhost:3000/my-page\n\nYou should see the rendered page in beautiful basic HTML.\nNow you can create as many markdown files as you want in the content root and they will be rendered and properly served according to the browser request.\nIt's possible also create different templates for different types of content using subfolders as a way to categorize your content.\nWhat about static pages\nSo far, the above example is a regular SPA (Single Page Application), not very SEO friendly.\nIf you want to transform all those markdown files in static HTML files, this way your blog will be SEO ready and backward compatible, here the additional steps to make that happen:\n\nAdd the generate command in package.json scripts section \"generate\": \"nuxt generate\"\nInstall another dependency with npm i glob\nUpdate the nuxt.config.js with this code:\n\nimport glob from 'glob'\n\nlet files = glob.sync('**/*.md', { cwd: 'content' })\nfiles = files.map(d => d.substr(0, d.lastIndexOf('.')))\n\nmodule.exports = {\n    generate: {\n        routes: files\n    },\n    build: {\n      extend (config) {\n        config.module.rules.push({\n          test: /\\.md$/,\n          loader: 'frontmatter-markdown-loader'\n        })\n      }\n    }\n  }\n\nNow run npm run generate\n\nYou should get in dist folder all the website pages generated ready to be served.\nWhat about the sitemap?\nIf you want to give to your blog some chances to get crawled by the search engines, you need to create also a sitemap of all your pages. Here the futher steps:\n\nAdd this dependency: npm i @nuxtjs/sitemap\nUpdate the nuxt.config.js with:\n\nimport glob from 'glob'\n\nlet files = glob.sync('**/*.md', { cwd: 'content' })\nfiles = files.map(d => d.substr(0, d.lastIndexOf('.')))\n\nmodule.exports = {\n    modules: [\n        '@nuxtjs/sitemap'\n    ],\n    sitemap: {\n        hostname: 'https://www.example.com'\n    },\n    generate: {\n        routes: files\n    },\n    build: {\n      extend (config) {\n        config.module.rules.push({\n          test: /\\.md$/,\n          loader: 'frontmatter-markdown-loader'\n        })\n      }\n    }\n  }\n\nRun again npm run generate checking your dist folder\n\nHope this sheds some light on this wonderful library. You can download all the source files from here.\nNext post will teach you how to list posts and allows navigation between similar posts.\n","frontmatter":"title: How to create a Nuxt based blog markdown driven from scratch\ndate: 2019-09-20 5:00:00 +0100\nsubtitle: 20th September, 2019\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, nuxt, markdown, blog]"},{"attributes":{"title":"Download a resource as file in browser with this library","date":"2019-10-12 13:00:00 +0100","subtitle":"12th October, 2019","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","library","js","file"]},"body":"If you need to allow your users downloading a resource from your website, here a tiny library I've built for you.\nWhat is a resource?\nA resource can be something contained in a web page such as an Image, Video, SVG, Canvas element or a Text.\nWhat it does?\nSuppose you have an SVG or a Canvas element or even a text that you want your users download as a single file. Well, this library allows this feature with a convenient function call, such this:\ndownloadAs.svg('#mySvg', 'svgFile.svg')\nJust pass the SVG selector and the file name to force the browser the download action.\nOr you can use these API variations based on what you need:\ndownloadAs.cnv('#myCanvas', 'svgFile.png')\ndownloadAs.txt('Some paragraph', 'svgFile.txt')\ndownloadAs.svgcnv('#mySvg', 'svgFile.png')\nHow I've built it?\nFollowing my proof-of-concept about building a javascript library these days, I've learned how to properly package a library to have a cross-compatible piece of code as well as a nice development experience at the same time.\nThe funny thing is that I've used the Rollup/Babel setup in the very first version then I've switched to Webpack setup. \nWebpack streamlined a lot the setup process, thus, my choice of the porting.\nWhy I've built it?\nThere are some other similar libs around (of course) but I wanted something more complete because I'm planning to release a bunch of little tools that will use such functionality.\nLimitations\nSo far, images and videos are not supported because it's meant to support primarly generated elements such as SVG, Canvas elements and Text source. Said that, it's something that can be added quite easily in the future.\nGo to its repository to learn more about the library or check this live example on Codepen.\n","frontmatter":"title: Download a resource as file in browser with this library\ndate: 2019-10-12 13:00:00 +0100\nsubtitle: 12th October, 2019\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, library, js, file]"},{"attributes":{"title":"Include external CSS and JSON files with Vue-CLI 3","date":"2019-10-13 19:00:00 +0100","subtitle":"13th October, 2019","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","vue","css","cli","json"]},"body":"A little reminder about how to include external files in a Vue.js app using the Vue-CLI 3.\nInclude a CSS file\nHere a Vue component (using the .vue format) with both a CSS library and a custom CSS file that need to be included in the build:\n<template>\n  <div>\n  </div>\n</template>\n\n<script type=\"text/javascript\">\n  import Buttons from './buttons.css'\n  import Normalize from 'normalize-css'\n\n  export default{\n  }\n</script>\nThe above component will inject both the normalize CSS library as well as the custom CSS one. Typically, a CSS library should be included across the whole application, thus, it's better to add it in the App.vue file.\nInclude a JS (data purpose) or a JSON file\nYou can include at built-time (meaning, it will be injected in the build, thus, if you change the external file you need to rebuild the app to see the effect) also Javascript and JSON file as well.\nSuppose you have this data.js file:\nexport default{\n  list: [1, 5, 3, 45, 34, 23, 5]\n}\nand you want to use it in your Vue component, such as:\n<template>\n  <div>\n    <ul>\n      <li v-for=\"item in list\" :key=\"item\">{{item}}</li>\n    </ul>\n  </div>\n</template>\n\n\n<script type=\"text/javascript\">\n  import data from './data.js'\n\n  export default{\n    data(){\n      return{\n        list: data.list\n      }\n    }\n  }\n</script>\nThe same can be done with a .json file:\n{\n  \"list\": [1, 5, 3, 45, 34, 23, 5]\n}\nRemember that those files are not loaded at run-time (such as ajax) but they are included in the build as they were writter straight in the source code.\nHope this help.\n","frontmatter":"title: Include external CSS and JSON files with Vue-CLI 3\ndate: 2019-10-13 19:00:00 +0100\nsubtitle: 13th October, 2019\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, vue, css, cli, json]"},{"attributes":{"title":"Inject SVG in the DOM with Vue.js and CLI","date":"2019-10-13 13:00:00 +0100","subtitle":"13th October, 2019","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","vue","svg","cli","config"]},"body":"By default, vue-cli, with its default webpack configuration, allows to process images and svg files in the same way, meaning as external resources.\nFor instance, the following component will be rendered correctly, whether the relative or absolute paths of the asset as well as if using both the img tag or background-image CSS property:\n<template>\n  <div>\n    <img src=\"@/assets/theSvg.svg\" />\n    <img src=\"@/assets/theImage.png\" />\n\n    <img src=\"./otherSvg.svg\" />\n    <img src=\"./otherImage.png\" />\n\n    <div class=\"png\"></div>\n    <div class=\"svg\"></div>\n  </div>\n</template>\n\n<style>\n.png{\n  width:100px;\n  height:100px;\n  background-image: url(./otherImage.png);\n}\n.svg{\n  width:100px;\n  height:100px;\n  background-image: url(./otherSvg.svg);\n}\n</style>\nUse a Valid SVG source\nThere is a caveat that might break some SVG to be loaded properly. If you experience some missing files in your build with SVG files, it might be depend of its source that needs to be valid from specification point of view.\nBe sure the SVG tag contains this attribute xmlns=\"http://www.w3.org/2000/svg\" such as:\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 18.3 14.3\">\n</svg>\notherwise webpack will fail to load it.\nWhat about injecting the SVG source\nIf you want to have at your fingertips the SVG source instead of a linked resource, you need to configure a bit your project.\nIt's a well documented feature in the officual Vue-CLI 3 documentation, briefly you need to:\n\ninstall an additional module: npm install vue-svg-loader\nthen, add this configuration (``vue.config.js` in the project root folder):\n\nmodule.exports = {\n  chainWebpack: config => {\n    const svgRule = config.module.rule('svg')\n\n    svgRule.uses.clear()\n\n    svgRule\n      .use('vue-svg-loader')\n      .loader('vue-svg-loader')\n  }\n}\nRun again your watcher (npm run serve) to experience the new setting with the following component:\n<template>\n  <div>\n    <MySVG />\n  </div>\n</template>\n\n<script>\nimport MySVG from './theSVG.svg'\n\nexport default {\n  components:{\n    MySVG\n  }\n}\n</script>\n\nThe MySVG component will be rendered as SVG DOM that can be manipulated through JS or CSS.\nFurthermore, this way you can also configure some SVG options that belong to SVGO:\nsvgRule\n  .use('vue-svg-loader')\n  .loader('vue-svg-loader')\n  .options({\n    svgo: {\n      plugins: [{ removeViewBox: false }]\n    }\n  })\nOne or the other\nThe problem with the above setting is that you cannot mix injected with external SVGs. If you try the setting, all the external SVG files will fail to load.\nHere the solution with a different configuration to handle both scenarios. The vue.config.js file now should look like:\nmodule.exports = {\n  chainWebpack: config => {\n    const svgRule = config.module.rule('svg')\n\n    svgRule.uses.clear()\n\n    svgRule\n      .oneOf('inline')\n      .resourceQuery(/inline/)\n      .use('vue-svg-loader')\n      .loader('vue-svg-loader')\n      .end()\n      .end()\n      .oneOf('external')\n      .use('file-loader')\n      .loader('file-loader')\n      .options({\n        name: 'assets/[name].[hash:8].[ext]'\n      })\n  }\n}\nAnd here the component with the mixed scenario:\n<template>\n  <div>\n    <img src=\"./otherSvg.svg\" />\n    <MySVG />\n  </div>\n</template>\n\n<script>\nimport MySVG from './otherSvg.svg?inline'\n\nexport default {\n  components:{\n    MySVG\n  }\n}\n</script>\nPay attention to the import statement the requires the ?inline fragment to work properly.\nNow you can include SVG files in different ways depending of what you need to do with them.\n","frontmatter":"title: Inject SVG in the DOM with Vue.js and CLI\ndate: 2019-10-13 13:00:00 +0100\nsubtitle: 13th October, 2019\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, vue, svg, cli, config]"},{"attributes":{"title":"CSS Object-Fit is awesome","date":"2019-10-23 13:00:00 +0100","subtitle":"23th October, 2019","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","css","center","layout"]},"body":"The CSS object-fit property is simply great.\nHere an example on what you can do with it together with flex, centering and scaling an image in a container maintaining the image proportion:\n\n  See the Pen <a href='https://codepen.io/abusedmedia/pen/qBBroYO'>object fit</a> by Fabio Franchino\n  (<a href='https://codepen.io/abusedmedia'>@abusedmedia</a>) on <a href='https://codepen.io'>CodePen</a>.\n\n\nHere the relevant parts:\nSet the container as flex and center its content:\n.wrapper{\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\nand here the part for the image in order to scale it proportionally:\n.wrapper img{\n  width: 100%;\n  height: 100%;\n  object-fit: contain;\n}\nSimple as that!\nHere the Codepen.\n","frontmatter":"title: CSS Object-Fit is awesome\ndate: 2019-10-23 13:00:00 +0100\nsubtitle: 23th October, 2019\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, css,  center, layout]"},{"attributes":{"title":"How to build a Drag&Drop Images Vue.js component from scratch","date":"2019-10-24 07:00:00 +0100","subtitle":"24th October, 2019","style":"blue","cover":"cover.gif","categories":"Tutorials","tags":["tutorial","vue","drag&drop","component"]},"body":"In this post I'm going to dive a bit creating a Vue.js component from scratch using Vue CLI and ES6 to allow users drag&drop images in the browser.\nThe final implementation is not meant to be \"ready to be drop\" components for your app. They are better a starting point to be include in your app by adding further logics required by your product.\n\nThe component can be used in any Vue app such this one:\n<template>\n  <div id=\"app\">\n      <DropAnImage />\n  </div>\n</template>\n\n<script>\nimport DropAnImage from './components/DropAnImage.vue'\n\nexport default {\n  name: 'app',\n  components: {\n    DropAnImage\n  }\n}\n</script>\n\n\n<style>\nhtml, body, #app{\n  width:100%;\n  height:100%;\n  padding: 0;\n  margin: 0;\n  overflow: hidden;\n}\n</style>\nAnd here up and running, if you want to drop something:\n\n\nJust to be clear, the above app is not uploading anything, all happens client-side only.\nBuild the component\nThere are two relevant parts to make it work properly:\n\nthe native drag events\nthe FileReader object to read on-the-fly dropped elements\n\nThe native events\nThe browser allows to listen for dragover, dragleave and drop events to performe the interactive part of the component.\nIn Vue.js we can set those event in the template:\n<template>\n  <div class=\"drop\" \n    @dragover.prevent=\"dragOver\" \n    @dragleave.prevent=\"dragLeave\"\n    @drop.prevent=\"drop($event)\">\n\n  </div>\n</template>\nWith this events you can define some logic to display relevant UI information for the user. The drop event is the one that bring to the next part.\nThe FileReader\nThe FileReader allows to read the content of a file attached to an event. It requires a File object to work properly.\nThis is the typical implementation:\nvar reader = new FileReader()\nreader.onload = f => {\n  let src = f.target.result\n}\nreader.readAsDataURL(file)\nand here used in the callback after a drop event:\ndrop(e){\n      let files = e.dataTransfer.files\n\n      let file = files[0]\n\n      let reader = new FileReader()\n      reader.onload = f => {\n        // f.target.result contains the base64 encoding of the image\n        let src = f.target.result\n      }\n      reader.readAsDataURL(file)\n}\nThe above snippet is simplified on purpose to show the relevant part. The fully implemented\nConclusion\nYou can check the repository if you want to start from the source. The components are not meant to be a drop-in component but rather a starting point to extend them to something more meaningful in your app. There are two flavuors of the same implementation:\n\nDropAnImage to allow uploading only one image\nDropImages allows many images to be dropped\n\n","frontmatter":"title: How to build a Drag&Drop Images Vue.js component from scratch\ndate: 2019-10-24 07:00:00 +0100\nsubtitle: 24th October, 2019\nstyle: blue\ncover: cover.gif\ncategories: Tutorials\ntags: [tutorial, vue,  drag&drop, component]"},{"attributes":{"title":"Invoke the upload dialog from Vue.js component","date":"2019-10-25 07:00:00 +0100","subtitle":"25th October, 2019","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","vue","input","upload","component"]},"body":"In my previous tutorial I've outlined how to build a Vue.js component to allow users to drag&drop files on the browser window.\nNow, I want to add a little feature more to those components, the possibility to invoke the upload dialog box by clicking or tapping some link.\nThe input selector\nThere is only one way to show the upload dialog in the browser. We need an <input type=\"file\" /> tag which produces a default form button, not really sexy from UI point of view.\nBut we can hide it and use a placeholder instead, that can be styled as we prefer with CSS:\n<label for=\"uploadmyfile\">\n  <p>Open the Upload dialog</p>\n</label>\n<input type=\"file\" id=\"uploadmyfile\" />\n\n<style>\n  #uploadmyfile{\n    display:none;\n  }\n  p{\n    color:red;\n  }\n</style>\nThe JS add-on\nThe input selector is responsible to open the dialog window and call a function once the user choose something. Here a minimal component in Vue.js that does the job:\n<template>\n    <div>\n        <label for=\"uploadmyfile\">\n            <p>Open the Upload dialog</p>\n        </label>\n        <input type=\"file\" id=\"uploadmyfile\" @change=\"requestUploadFile\" />\n    </div>\n</template>\n\n\n<script>\nexport default {\n    methods:{\n        requestUploadFile(){\n            var src = this.$el.querySelector('#uploadmyfile')\n            console.log(src.files)\n        }\n    }\n}\n</script>\nThe requestUploadFile method is called once the users choose some files from their computer. The function then can read the input element to get a FileList object containing the list of File choosen by the users.\nIn the previous components there was already a method responsible to read the images from a FileList object. We just need to integrate the two together.\nThe complete component\nHere the result combining both the drag&drop feature with the upload dialog box function:\n\n\nYou can review the complete source code from its repository.\n","frontmatter":"title: Invoke the upload dialog from Vue.js component\ndate: 2019-10-25 07:00:00 +0100\nsubtitle: 25th October, 2019\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, vue,  input, upload, component]"},{"attributes":{"title":"Webpack based starterkit for quick web explorations","date":"2019-10-26 07:00:00 +0100","subtitle":"26th October, 2019","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","webpack","es6","config","js"]},"body":"My current and favorite stack  in web development is based on Vue.js with its CLI. \nNevertheless, for simple coding explorations I find it a little overkill. Furthermore, I like to test other possibilities in the field from time to time. \nFor that reason, I've explored Webpack a bit and this post tries to outline the configuration I've set up for my needs.\nIf you want to benefit from one of more of the following features:\n\nES6 modules and  async/await\nLoaders for CSS, SVG, CSV and images\nHot replacement webserver for development\nStatic and external files handled properly\n\nYou're welcomed to test my configuration and continue to read as well :)\nSome code snippets for a fast start\nES6 modules\nI want to write encapsulated and reusable js modules without worry about global scope pollution and nested dependencies.\nCreate a .js file in src folder, src/mod1.js with\nexport default {\n  some: 'object'\n}\nCreate a secondary .js file in src folder, src/mod2.js with\nexport default {\n  some: 'other object'\n}\nLoad them from within index.js:\nimport mod1 from './mod1.js'\nimport mod2 from './mod2.js'\n\nconsole.log(mod1, mod2)\nES6 async/await\nI want to use the async/await sugar syntax to escape the callback hell and exploit the cleaner procedural syntax as well.\nCreate src/modasync.js file with:\nexport default () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('Hey!')\n    }, 2000)\n  })\n}\nLoad it from within index.js:\nimport mod from './modasync.js'\n\nconst init = async () => {\n  const v = await mod()\n  console.log(v)\n}\n\ninit()\nSince there is not async in the root scope, we need to wrap the main code in an async function.\nES6 async/await with fetch\nI want to do the same when fetching external API. Here an example with fetch, put this code in the index.js:\nconst url = 'https://jsonplaceholder.typicode.com/todos/1'\n\nconst init = async () => {\n  const response = await fetch(url)\n  const json = await response.json()\n  console.log(json)\n}\n\ninit()\nAnother example with multiple fetches in sequence, a nice way to avoid the callback hell:\nconst base = 'https://jsonplaceholder.typicode.com/'\nconst todos = 'todos'\nconst posts = 'posts'\nconst photos = 'photos'\n\nconst init = async () => {\n  const promises = [fetch(base + todos), fetch(base + posts), fetch(base + photos)]\n\n  const all = await Promise.all(promises)\n\n  all.forEach(async response => {\n    const json = await response.json()\n    console.log(json)\n  })\n}\n\ninit()\nCSS\nI want to inject my CSS files into the build.\nYou can both include a CSS file from within the template.html and within js files as well.\nFrom the template, assuming the external file is in /assets/external.css:\n<head>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/external.css\" />\n</head>\nFrom the js file, the CSS needs to be within src folder such as src/style.css and put this in the index.js:\nimport './style.css'\nExternal CSV/JSON files\nI want to load external files at runtime, such as a CSV or a JSON file. In this snippet, let's assume the file is placed in /assets/data.csv, then use this code:\n;(async () => {\n  const response = await fetch('assets/data.csv')\n  const data = await response.text()\n  console.log(data)\n})()\nThere's also the possibility to include (inject) external data files in the build: \nimport data1 from './data2.csv'\nimport data2 from './data.json'\n\nconsole.log(data1, data2)\nIn this situation you need to put those files within the src folder.\nImages\nI want to handle images properly using the Webpack way.\nAssuming the images placed within src/images folder:\nimport img from './images/1.png'\n\nconst myImg = new Image()\nmyImg.src = img\n\ndocument.body.appendChild(myImg)\nThe above code works with the following file format:\n\npng\njpg\ngif\nsvg\n\nInterested?\nGo to this repository to learn more about this configuration. You can clone it to start exploring quickly.\nThis is meant to be a quick guide to use fast a common webpack configuration. It might be updated eventually the moment I'll need further features.\nLike what? I'd like to explore more about using HTML templates and post-processor, mainly for CSS. So stay tuned!\n","frontmatter":"title: Webpack based starterkit for quick web explorations\ndate: 2019-10-26 07:00:00 +0100\nsubtitle: 26th October, 2019\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, webpack,  es6, config, js]"},{"attributes":{"title":"Use Vuex in large application"},"body":"Lately I've had the opportunity to explore more in depth Vuex in a mid/large application.\nVuex is modular by design, and \nWhen working in a relatively mid-large front-end application, the are a couple of things to remember about what Vuex provides before start structuring your app.\n\nVuex modules can communicate nicely\n\nTwo Vuex modules can read from within each other and sending (dispatch) events as well.\nLet's say, there's a project.js module which keep the project status in memory:\nexport default {\n  state:{\n    project: null\n  },\n  commit:{\n    setProject(state, p){\n      state.project = p\n    }\n  }\n}\nand onother module responsible to keep the user preferences in memory:\n\n","frontmatter":"title: Use Vuex in large application"},{"attributes":{"title":"How to create a stacked area chart with D3.js"},"body":"This is a little step-by-step to create a stacked area chart with D3.js using ES6.\nInitially, I've tried Parcel to bundle all the things but, nevertheless the initial fast start without config, I've experiences some pains trying to make it work with async/await ES6. I've gave up and got back to Webpack.\nInstall D3.js with npm install d3.\n","frontmatter":"title: How to create a stacked area chart with D3.js"},{"attributes":{"title":"Use Firebase as bridge to make a real-time communication"},"body":"Learn how you can exploit the Firebase real-time database to make a real-time communication between clients.\nThe obvious first idea using a real-time communication would be a simple chat.\nSuppose that we want to be a little more creative, thus, let's try to imagine  \n","frontmatter":"title: Use Firebase as bridge to make a real-time communication"},{"attributes":{"title":"Upload on AWS S3 with Express.js and Vue.js - Part 1","date":"2019-12-01 07:00:00 +0100","subtitle":"1st December, 2019","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","express","s3","aws","vue"]},"body":"I'm refactoring my favorite side project. \nPart of this relies on how the file-upload works both on the backend and frontend as well.\nIn PRESENTA the external files are uploaded using AWS S3 service. The real upload happens straight from the front-end app to the AWS servers. The backend is in charge only to request the one-time token from AWS. Here the flow:\n\nThe frontend ask to the backend a valid token (this way the backend can make some additional validation about auth and other stuff)\nThe backend ask to AWS the same and routes it to the frontend\nThe frontend begins a PUT request to AWS server to upload the files\nThe dialogue during the upload happens only between the frontend and the S3 service\n\nThe backend\nIn this tutorial, I'm explaining the backend code that is an Express.js based app. The dependencies (that need to be installed) are:\n\nexpress\ncors\ndotenv\naws-sdk\n\nHere the minimal Express app:\nconst express = require('express')\nconst path = require('path')\nconst app = express()\nconst port = process.env.PORT || 3131\n\napp.listen(port, () => console.log('Server is running on port: ' + port))\nSet-up the CORS\nWe need a nice dialogue between the backend and the frontend, therefore, we enable the CORS communication with:\nconst cors = require('cors')\nvar origins = {\n  origin: ['http://localhost:8080'],\n  optionsSuccessStatus: 200,\n  credentials: false\n}\napp.use(cors(origins))\nAuth with AWS\nHere the authentication with S3 using your personal credentials:\nconst aws = require('aws-sdk')\naws.config.region = 'eu-west-3'\nconst S3_BUCKET = process.env.S3_BUCKET_NAME\nThe route\nIn this little webserver contains only one route with comments between the lines\napp.get('/s3', (req, res) => {\n\n  // get the params from the initial request\n  const fileName = req.query.filename\n  const fileType = req.query.filetype\n  const ext = path.extname(fileName)\n\n  // define the location and the file name\n  const pathName = path.join('myfoldertest', 'myuploadedfile' + ext)\n\n  const s3 = new aws.S3()\n\n  // configure the S3 object to get the token\n  const s3Params = {\n    Bucket: S3_BUCKET,\n    Key: pathName,\n    Expires: 60 * 15,\n    ContentType: fileType,\n    ACL: 'public-read'\n  }\n\n  // ask for the token\n  s3.getSignedUrl('putObject', s3Params, (err, data) => {\n    if (err) {\n      return res.status(500).json(err)\n    }\n\n    const returnData = {\n      signedRequest: data,\n      url: `${pathName}`\n    }\n\n    // returning the token to the frontend\n    res.status(200).json(returnData)\n  })\n})\nThis little server can be run with node index.js and it will listen at http://localhost:3131/s3 with the filename and the filetype parameters correctly set.\nThis is a bare-bone example without many error handling, just to demonstrate this particular functionality. Full source code here.\nIn part 2 I'll dive in the frontend part, of course.\nStay tuned.\n","frontmatter":"title: Upload on AWS S3 with Express.js and Vue.js - Part 1\ndate: 2019-12-01 07:00:00 +0100\nsubtitle: 1st December, 2019\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, express, s3, aws, vue]"},{"attributes":{"title":"Emulate the API behavior with Promises","date":"2019-12-08 07:00:00 +0100","subtitle":"8th December, 2019","style":"blue","cover":"cover.png","categories":"Tutorials","tags":["tutorial","promise","api","es6"]},"body":"Nowadays is quite common to fetch data from within the client using some API layers (whether is an application server or a little lambda function as well).\nThe following snippet is generally what we need in our web app when dealing with REST API calls:\nconst url = 'https://jsonplaceholder.typicode.com/todos/1'\nconst response = await fetch(url)\nconst json = await response.json()\nconsole.log(json)\nFrontend, backend and in between\nThe technical benefits of such architecture are many: separation of concerns, better modularity, less interwoven dependencies, etc.\nAmong the others, one of my favorite is the possibility to start developing one side without waiting for the other.\nIt's perfectly fine starting to develop the frontend code without even know the technology stack of the backend.\nThe only contract we have to agree is the API layer (usually HTTP async requests) and its end points (the verbs list the frontend needs).\nUse custom promises\nWhile it's totally possible to replace the API responses with some static data, what I'd like to outline here is the possibility to emulate the tipical behavior of an HTTP request in terms of waiting time and unpredictability of the response in order to show possible side effects of the frontend interface in specific edge cases.\nLet's make an example. When you request some async data there's the chance that the interface need to handle some feedback and empty states to let the user know what's going on. Even if your backend is going to be lightly fast you have to deal with state transition of the UI, maybe applying some delay\nHere some example of what happen\nGet a response\nGet an error\nGet something wrong\nTest with the real API\n","frontmatter":"title: Emulate the API behavior with Promises\ndate: 2019-12-08 07:00:00 +0100\nsubtitle: 8th December, 2019\nstyle: blue\ncover: cover.png\ncategories: Tutorials\ntags: [tutorial, promise, api, es6]"}]}